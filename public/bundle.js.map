{
  "version": 3,
  "sources": ["../types/playcanvas-shim.ts", "../node_modules/eventemitter3/index.js", "../src/core/debug/DebugOverlay.ts", "../src/index.ts", "../src/core/GameEngine.ts", "../src/core/characters/CharacterManager.ts", "../src/core/utils/Logger.ts", "../src/core/procgen/ProceduralFrameGenerator.ts", "../src/core/combat/CombatSystem.ts", "../src/core/stages/StageManager.ts", "../src/scripts/graphics/ParallaxManager.ts", "../src/core/graphics/ShaderUtils.ts", "../src/typescript/shaders/CharacterHighlightShader.ts", "../src/typescript/shaders/RimLightingShader.ts", "../src/typescript/shaders/SpriteNormalMappingShader.ts", "../src/typescript/shaders/DepthPostProcessShader.ts", "../src/typescript/shaders/StageStormySkyShader.ts", "../src/core/procgen/ProceduralStageGenerator.ts", "../src/core/input/InputManager.ts", "../src/core/ui/UIManager.ts", "../src/scripts/graphics/PostProcessingManager.ts", "../src/core/utils/EventBus.ts", "../src/core/utils/ServiceContainer.ts", "../src/core/utils/FeatureFlags.ts", "../src/core/UpdatePipeline.ts", "../src/core/state/GameStateStack.ts", "../src/core/state/BootState.ts", "../src/core/state/MenuState.ts", "../src/core/state/MatchState.ts", "../src/core/state/LoginState.ts", "../src/scripts/RotationService.ts", "../src/scripts/EntitlementBridge.ts", "../src/scripts/VariationOverlay.ts", "../src/scripts/CharacterLoader.ts", "../src/scripts/CharacterSelectUI.ts", "../src/core/state/CharacterSelectState.ts", "../src/core/utils/PreloadManager.ts", "../src/core/ai/AIManager.ts", "../src/core/utils/DecompDataService.ts", "../src/client/retention/RetentionClient.ts", "../node_modules/uuid/dist/esm-browser/stringify.js", "../node_modules/uuid/dist/esm-browser/rng.js", "../node_modules/uuid/dist/esm-browser/native.js", "../node_modules/uuid/dist/esm-browser/v4.js", "../src/client/commerce/Storefront.ts", "../src/core/monetization/MonetizationService.ts", "../src/core/security/SecurityService.ts", "../src/core/security/AntiCheat.ts", "../src/core/utils/OfflineService.ts", "../src/core/utils/SyncService.ts", "../src/core/utils/RemoteConfigService.ts", "../src/core/liveops/LiveOpsService.ts", "../src/core/netcode/types.ts", "../src/core/netcode/RollbackNetcode.ts", "../src/core/netcode/DeterministicAdapter.ts", "../src/core/netcode/LocalTransport.ts", "../src/core/netcode/NetcodeService.ts", "../src/core/utils/ConfigService.ts"],
  "sourcesContent": ["// Runtime shim to map module 'playcanvas' imports to the global `pc` provided\n// by the PlayCanvas engine script tag.\n// Important: Do NOT capture the global at bundle time. Always resolve at runtime.\n\nfunction getPc(): any {\n  // Resolve the runtime global inserted by the PlayCanvas CDN script tag\n  return (globalThis as any).pc || {};\n}\n\n// Minimal fallback EventHandler to avoid crashes if accessed before the engine loads\nclass FallbackEventHandler {\n  private _handlers: Map<string, Set<Function>> = new Map();\n  on(evt: string, cb: Function): void {\n    if (!this._handlers.has(evt)) this._handlers.set(evt, new Set());\n    this._handlers.get(evt)!.add(cb);\n  }\n  off(evt: string, cb?: Function): void {\n    if (!this._handlers.has(evt)) return;\n    if (cb) this._handlers.get(evt)!.delete(cb); else this._handlers.set(evt, new Set());\n  }\n  fire(evt: string, ...args: any[]): void {\n    const set = this._handlers.get(evt);\n    if (!set) return;\n    for (const cb of set) {\n      try { cb(...args); } catch {}\n    }\n  }\n  destroy(): void {\n    this._handlers.clear();\n  }\n}\n\n// Proxy that forwards property access to the live global `pc` at runtime\nconst pcProxy: any = new Proxy({}, {\n  get(_target, prop: PropertyKey) {\n    const pc = getPc();\n    // Provide a safe fallback for EventHandler early-access\n    if (prop === 'EventHandler' && pc && !pc.EventHandler) {\n      return FallbackEventHandler;\n    }\n    return pc ? pc[prop as any] : undefined;\n  },\n  set(_target, prop: PropertyKey, value: any) {\n    const pc = getPc();\n    if (pc) {\n      pc[prop as any] = value;\n      return true;\n    }\n    return false;\n  },\n  has(_target, prop: PropertyKey) {\n    const pc = getPc();\n    return pc ? (prop in pc) : false;\n  }\n});\n\n// CommonJS-style default export so that `import * as pc from 'playcanvas'`\n// receives the namespace object across our TypeScript sources.\nexport = pcProxy;\n\n", "'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n", "export interface TimingSample { name: string; ms: number; }\n\nexport class DebugOverlay {\n\tprivate container: HTMLDivElement;\n\tprivate fpsLabel: HTMLDivElement;\n\tprivate timingsLabel: HTMLDivElement;\n\tprivate lastTime = performance.now();\n\tprivate frames = 0;\n\tprivate fps = 0;\n\n\tconstructor() {\n\t\tthis.container = document.createElement('div');\n\t\tthis.container.style.position = 'fixed';\n\t\tthis.container.style.top = '8px';\n\t\tthis.container.style.left = '8px';\n\t\tthis.container.style.background = 'rgba(0,0,0,0.5)';\n\t\tthis.container.style.color = '#0f0';\n\t\tthis.container.style.font = '12px monospace';\n\t\tthis.container.style.padding = '6px 8px';\n\t\tthis.container.style.borderRadius = '4px';\n\t\tthis.container.style.zIndex = '9999';\n\n\t\tthis.fpsLabel = document.createElement('div');\n\t\tthis.timingsLabel = document.createElement('div');\n\t\tthis.container.appendChild(this.fpsLabel);\n\t\tthis.container.appendChild(this.timingsLabel);\n\t\tdocument.body.appendChild(this.container);\n\t}\n\n\tupdate(): void {\n\t\tthis.frames++;\n\t\tconst now = performance.now();\n\t\tif (now - this.lastTime >= 1000) {\n\t\t\tthis.fps = Math.round((this.frames * 1000) / (now - this.lastTime));\n\t\t\tthis.frames = 0;\n\t\t\tthis.lastTime = now;\n\t\t\tthis.fpsLabel.textContent = `FPS: ${this.fps}`;\n\t\t}\n\t}\n\n\tsetTimings(samples: TimingSample[]): void {\n\t\tconst text = samples.map(s => `${s.name}:${s.ms.toFixed(2)}ms`).join('  ');\n\t\tthis.timingsLabel.textContent = text;\n\t}\n}", "\nimport { GameEngine } from './core/GameEngine';\nimport { Logger } from './core/utils/Logger';\nimport * as pc from 'playcanvas';\n\nasync function defaultStart(canvas: HTMLCanvasElement | null): Promise<void> {\n  const targetCanvas = canvas || createCanvas();\n  const engine = new GameEngine(targetCanvas);\n  Logger.info('Starting Street Fighter III: 3rd Strike - PlayCanvas Edition');\n  await engine.initialize();\n}\n\nfunction createCanvas(): HTMLCanvasElement {\n  const canvas = document.createElement('canvas');\n  canvas.id = 'application-canvas';\n  Object.assign(canvas.style, {\n    width: '100vw',\n    height: '100vh',\n    display: 'block',\n    background: '#000',\n    position: 'fixed',\n    inset: '0'\n  } as CSSStyleDeclaration);\n  document.body.appendChild(canvas);\n  return canvas;\n}\n\nexport { defaultStart };\n", "\nimport * as pc from 'playcanvas';\nimport { CharacterManager } from './characters/CharacterManager';\nimport { CombatSystem } from './combat/CombatSystem';\n// Integrate with existing PlayCanvas script-based managers under src/scripts\nimport { StageManager } from './stages/StageManager';\nimport { InputManager } from './input/InputManager';\nimport { UIManager } from './ui/UIManager';\n// (Optional) Asset loader integration available under scripts if needed\nimport { Logger } from './utils/Logger';\nimport PostProcessingManager from '../scripts/graphics/PostProcessingManager';\nimport { EventBus } from './utils/EventBus';\nimport { ServiceContainer } from './utils/ServiceContainer';\nimport { FeatureFlags } from './utils/FeatureFlags';\nimport { UpdatePipeline, UpdatableSystem } from './UpdatePipeline';\nimport { GameStateStack } from './state/GameStateStack';\nimport { BootState } from './state/BootState';\nimport { MenuState } from './state/MenuState';\nimport { MatchState } from './state/MatchState';\nimport { LoginState } from './state/LoginState';\nimport { CharacterSelectState } from './state/CharacterSelectState';\nimport { PreloadManager } from './utils/PreloadManager';\nimport { AIManager } from './ai/AIManager';\nimport { ProceduralStageGenerator } from './procgen/ProceduralStageGenerator';\nimport { DecompDataService } from './utils/DecompDataService';\nimport { MonetizationService } from './monetization/MonetizationService';\nimport { EntitlementBridge } from '../scripts/EntitlementBridge';\nimport { SecurityService } from './security/SecurityService';\nimport { AntiCheat } from './security/AntiCheat';\nimport { OfflineService } from './utils/OfflineService';\nimport { SyncService } from './utils/SyncService';\nimport { RemoteConfigService } from './utils/RemoteConfigService';\nimport { LiveOpsService } from './liveops/LiveOpsService';\nimport { NetcodeService } from './netcode/NetcodeService';\nimport { ConfigService } from './utils/ConfigService';\n\nexport class GameEngine {\n  private app: pc.Application;\n  private characterManager: CharacterManager;\n  private combatSystem: CombatSystem;\n  private stageManager: StageManager;\n  private inputManager: InputManager;\n  private uiManager: UIManager;\n  private postProcessingManager: PostProcessingManager | null = null;\n  private eventBus: EventBus;\n  private services: ServiceContainer;\n  private featureFlags: FeatureFlags;\n  private pipeline: UpdatePipeline;\n  private debugOverlay: any | null = null;\n  private stateStack: GameStateStack;\n  private preloader: PreloadManager;\n  private aiManager: AIManager;\n  private stageGen: ProceduralStageGenerator;\n  private decompService: DecompDataService;\n  private monetization: MonetizationService;\n  private entitlement: EntitlementBridge;\n  private security: SecurityService;\n  private antiCheat: AntiCheat;\n  private offline: OfflineService;\n  private sync: SyncService;\n  private remoteConfig: RemoteConfigService;\n  private liveOps: LiveOpsService;\n  private netcode?: NetcodeService;\n  // private assetManager: any;\n  private isInitialized = false;\n  private updateHandler: ((dt: number) => void) | null = null;\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.app = new pc.Application(canvas, {\n      mouse: new pc.Mouse(canvas),\n      touch: new pc.TouchDevice(canvas),\n      keyboard: new pc.Keyboard(window),\n      gamepads: new pc.GamePads()\n    });\n\n    this.setupApplication();\n\n    // Core infrastructure must be ready before managers register to the pipeline\n    this.eventBus = new EventBus();\n    this.services = new ServiceContainer();\n    this.featureFlags = new FeatureFlags();\n    this.pipeline = new UpdatePipeline();\n\n    this.initializeManagers();\n\n    // Register services\n    this.services.register('app', this.app);\n    this.services.register('events', this.eventBus);\n    this.services.register('flags', this.featureFlags);\n    // Config service will be registered during initialize()\n    this.preloader = new PreloadManager();\n    this.aiManager = new AIManager(this.app);\n    this.stageGen = new ProceduralStageGenerator();\n    this.decompService = new DecompDataService();\n    this.monetization = new MonetizationService();\n    this.entitlement = new EntitlementBridge();\n    this.security = new SecurityService();\n    this.antiCheat = new AntiCheat();\n    this.offline = new OfflineService();\n    this.sync = new SyncService(this.offline);\n    this.remoteConfig = new RemoteConfigService();\n    this.liveOps = new LiveOpsService();\n    this.netcode = new NetcodeService(this.combatSystem, this.characterManager, this.inputManager);\n    this.services.register('preloader', this.preloader);\n    this.services.register('ai', this.aiManager);\n    this.services.register('stageGen', this.stageGen);\n    this.services.register('decomp', this.decompService);\n    this.services.register('monetization', this.monetization);\n    this.services.register('entitlement', this.entitlement);\n    this.services.register('security', this.security);\n    this.services.register('anticheat', this.antiCheat);\n    this.services.register('offline', this.offline);\n    this.services.register('sync', this.sync);\n    this.services.register('configRemote', this.remoteConfig);\n    this.services.register('liveops', this.liveOps);\n    this.services.register('netcode', this.netcode);\n    this.services.register('characters', this.characterManager);\n    // expose services for legacy components that pull from app\n    (this.app as any)._services = this.services;\n\n    // State stack\n    this.stateStack = new GameStateStack();\n\n    // State transitions via EventBus\n    this.eventBus.on('state:goto', ({ state }: any) => {\n      (async () => {\n        switch (state) {\n          case 'menu':\n            await this.stateStack.replace(new MenuState(this.app, this.eventBus));\n            break;\n          case 'login':\n            await this.stateStack.replace(new LoginState(this.app, this.eventBus));\n            break;\n          case 'characterselect':\n            await this.stateStack.replace(new CharacterSelectState(this.app, this.eventBus));\n            break;\n          case 'match':\n            await this.stateStack.replace(new MatchState(this.app, this.eventBus));\n            break;\n        }\n      })().catch((err: unknown) => {\n        try { Logger.error('state:goto failed', err as any); } catch {}\n      });\n    });\n  }\n\n  private setupApplication(): void {\n    this.app.setCanvasFillMode(pc.FILLMODE_FILL_WINDOW);\n    this.app.setCanvasResolution(pc.RESOLUTION_AUTO);\n    \n    window.addEventListener('resize', () => this.app.resizeCanvas());\n    \n    Logger.info('PlayCanvas application initialized');\n  }\n\n  private initializeManagers(): void {\n    // Asset loading can be handled later via script components\n    this.inputManager = new InputManager(this.app);\n    // Audio handled by PlayCanvas components or a future wrapper\n    this.characterManager = new CharacterManager(this.app);\n    this.combatSystem = new CombatSystem(this.app);\n    this.stageManager = new StageManager(this.app);\n    this.uiManager = new UIManager(this.app);\n    // expose for states\n    (this.app as any)._ui = this.uiManager;\n    this.postProcessingManager = new PostProcessingManager(this.app);\n\n    // Register update order\n    const inputUpdatable: UpdatableSystem = { name: 'input', priority: 10, update: dt => this.inputManager.update() };\n    const characterUpdatable: UpdatableSystem = { name: 'characters', priority: 20, update: dt => this.characterManager.update(dt) };\n    const combatUpdatable: UpdatableSystem = { name: 'combat', priority: 30, update: dt => this.combatSystem.update(dt) };\n    const netcodeUpdatable: UpdatableSystem = { name: 'netcode', priority: 28, update: dt => this.netcode?.step() };\n    const postFxUpdatable: UpdatableSystem = { name: 'postfx', priority: 90, update: dt => this.postProcessingManager?.update(dt) };\n    const aiUpdatable: UpdatableSystem = { name: 'ai', priority: 25, update: dt => this.aiManager.update(dt) };\n    this.pipeline.add(inputUpdatable);\n    this.pipeline.add(characterUpdatable);\n    this.pipeline.add(aiUpdatable);\n    this.pipeline.add(netcodeUpdatable);\n    this.pipeline.add(combatUpdatable);\n    this.pipeline.add(postFxUpdatable);\n  }\n\n  public async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      Logger.info('Initializing game systems...');\n      // Register config service (static import for IIFE compatibility)\n      this.services.register('config', new ConfigService());\n      \n      // Preload assets if needed using AssetLoader script\n      await this.characterManager.initialize();\n      // StageManager/UIManager initialize through their own methods if needed\n      await this.stageManager.initialize();\n      await this.uiManager.initialize();\n      if (this.postProcessingManager) {\n        await this.postProcessingManager.initialize();\n      }\n\n      // Load manifest first\n      await this.preloader.loadManifest('/assets/manifest.json');\n\n      \n      this.combatSystem.initialize(this.characterManager, this.inputManager);\n      \n      this.isInitialized = true;\n      this.app.start();\n\n      // Push boot state\n      await this.stateStack.push(new BootState(this.app, this.services, this.eventBus));\n\n      // Wire main update loop\n      this.updateHandler = (dt: number) => {\n        this.pipeline.update(dt);\n        this.stateStack.update(dt);\n        if (!this.debugOverlay && typeof window !== 'undefined') {\n          import('./debug/DebugOverlay').then(({ DebugOverlay }) => {\n            if (!this.debugOverlay) this.debugOverlay = new DebugOverlay();\n          }).catch(() => {});\n        }\n        this.debugOverlay?.update();\n        this.debugOverlay?.setTimings(this.pipeline.getTimings());\n      };\n      this.app.on('update', this.updateHandler);\n      \n      Logger.info('Game engine fully initialized');\n    } catch (error) {\n      Logger.error('Failed to initialize game engine:', error);\n      throw error;\n    }\n  }\n\n  public getApp(): pc.Application {\n    return this.app;\n  }\n\n  public getCharacterManager(): CharacterManager {\n    return this.characterManager;\n  }\n\n  public getCombatSystem(): CombatSystem {\n    return this.combatSystem;\n  }\n\n  public destroy(): void {\n    if (this.updateHandler) {\n      this.app.off('update', this.updateHandler);\n      this.updateHandler = null;\n    }\n    this.app.destroy();\n    Logger.info('Game engine destroyed');\n  }\n}\n", "\nimport * as pc from 'playcanvas';\nimport { Character, CharacterConfig } from '../../../types/character';\nimport { Logger } from '../utils/Logger';\nimport { PreloadManager } from '../utils/PreloadManager';\nimport { DecompDataService } from '../utils/DecompDataService';\nimport { ProceduralFrameGenerator } from '../procgen/ProceduralFrameGenerator';\n\nexport class CharacterManager {\n  private app: pc.Application;\n  private characters = new Map<string, Character>();\n  private characterConfigs = new Map<string, CharacterConfig>();\n  private activeCharacters: Character[] = [];\n  private preloader: PreloadManager | null = null;\n  private frameGen: ProceduralFrameGenerator = new ProceduralFrameGenerator();\n  private decomp: DecompDataService | null = null;\n\n  constructor(app: pc.Application) {\n    this.app = app;\n  }\n\n  public async initialize(): Promise<void> {\n    try {\n      // Attempt to resolve preloader from global services if present\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const services = (this.app as any)._services as any;\n      if (services && services.resolve) {\n        this.preloader = services.resolve('preloader') as PreloadManager;\n        try { this.decomp = services.resolve('decomp') as DecompDataService; } catch {}\n      }\n    } catch {}\n    await this.loadCharacterConfigs();\n    Logger.info('Character manager initialized');\n  }\n\n  private async loadCharacterConfigs(): Promise<void> {\n    const fetchJson = async (path: string) => {\n      try {\n        if (this.preloader) return await this.preloader.getJson<any>(path);\n        const r = await fetch(path, { cache: 'no-store' });\n        return await r.json();\n      } catch (e) {\n        throw e;\n      }\n    };\n    // Prefer a consolidated database file if available\n    try {\n      const db = await fetchJson('/data/characters_db.json');\n      if (db) {\n        const keys = Object.keys(db);\n        for (const key of keys) {\n          let cfg = this.normalizeCharacterConfig(db[key] as CharacterConfig);\n          cfg = this.frameGen.generateForCharacter(cfg);\n          this.characterConfigs.set(key, cfg);\n        }\n        Logger.info(`Loaded ${keys.length} characters from consolidated database`);\n        return;\n      }\n    } catch (e) {\n      Logger.warn('Consolidated character database not found; falling back to individual files');\n    }\n\n    // Fallback to individual files\n    const characterNames = ['ryu', 'ken', 'chun_li', 'sagat', 'zangief'];\n    for (const name of characterNames) {\n      try {\n        const rawConfig: CharacterConfig = await fetchJson(`/data/characters/${name}.json`);\n        let config = this.normalizeCharacterConfig(rawConfig);\n        config = this.frameGen.generateForCharacter(config);\n        this.characterConfigs.set(name, config);\n        Logger.info(`Loaded character config: ${name}`);\n      } catch (error) {\n        Logger.error(`Failed to load character ${name}:`, error);\n      }\n    }\n\n    // Optionally load a ground-truth seed from decomp import if present, or derive at runtime\n    try {\n      let cfg: CharacterConfig | null = null;\n      try {\n        cfg = (await fetchJson('/data/characters_decomp/sf3_ground_truth_seed.json')) as CharacterConfig;\n      } catch {}\n      if (!cfg && this.decomp) cfg = (await this.decomp.deriveFromDecompIfAvailable()) as CharacterConfig | null;\n      if (cfg) {\n        const norm = this.normalizeCharacterConfig(cfg);\n        const finalCfg = this.frameGen.generateForCharacter(norm);\n        this.characterConfigs.set(cfg.characterId || 'sf3_ground_truth_seed', finalCfg);\n        Logger.info('Loaded ground-truth character seed');\n      }\n    } catch {}\n  }\n\n  private normalizeCharacterConfig(config: CharacterConfig): CharacterConfig {\n    // Ensure stats exist with required fields using top-level fallbacks\n    const normalizedStats = {\n      health: (config as any).stats?.health ?? (config as any).health ?? 1000,\n      walkSpeed: (config as any).stats?.walkSpeed ?? (config as any).walkSpeed ?? 2\n    } as any;\n\n    // Flatten nested move groups like { moves: { normals: { ... }, specials: { ... } } }\n    let flattenedMoves: Record<string, any> | undefined = undefined;\n    const movesAny = (config as any).moves as any;\n    if (movesAny && typeof movesAny === 'object') {\n      const groups = ['normals', 'specials', 'supers', 'throws', 'unique'];\n      flattenedMoves = {};\n      for (const key of Object.keys(movesAny)) {\n        if (groups.includes(key) && movesAny[key] && typeof movesAny[key] === 'object') {\n          Object.assign(flattenedMoves, movesAny[key]);\n        } else if (movesAny[key] && typeof movesAny[key] === 'object') {\n          // Top-level moves already\n          flattenedMoves[key] = movesAny[key];\n        }\n      }\n    }\n\n    const normalized = {\n      ...config,\n      stats: normalizedStats,\n      moves: flattenedMoves ?? (config as any).moves\n    } as CharacterConfig as any;\n\n    return normalized;\n  }\n\n  public createCharacter(characterId: string, position: pc.Vec3): Character | null {\n    // Entitlement gating (player-respecting monetization)\n    try {\n      const services = (this.app as any)._services as any;\n      const entitlement = services?.resolve?.('entitlement');\n      if (entitlement && !entitlement.hasCharacterAccess?.(characterId, 'casual')) {\n        Logger.warn(`Access denied by entitlements for character: ${characterId}`);\n        return null;\n      }\n    } catch {}\n\n    const config = this.characterConfigs.get(characterId);\n    if (!config) {\n      Logger.error(`Character config not found: ${characterId}`);\n      return null;\n    }\n\n    const characterEntity = new pc.Entity(characterId);\n    characterEntity.setPosition(position);\n    \n    const character: Character = {\n      id: characterId,\n      entity: characterEntity,\n      config: config,\n      health: config.stats.health,\n      meter: 0,\n      state: 'idle',\n      currentMove: null,\n      frameData: {\n        startup: 0,\n        active: 0,\n        recovery: 0,\n        advantage: 0\n      }\n    };\n\n    this.characters.set(characterId, character);\n    this.app.root.addChild(characterEntity);\n    \n    Logger.info(`Created character: ${characterId}`);\n    return character;\n  }\n\n  public getCharacter(characterId: string): Character | undefined {\n    return this.characters.get(characterId);\n  }\n\n  public setActiveCharacters(player1Id: string, player2Id: string): void {\n    const p1 = this.characters.get(player1Id);\n    const p2 = this.characters.get(player2Id);\n    \n    if (p1 && p2) {\n      this.activeCharacters = [p1, p2];\n      Logger.info(`Active characters set: ${player1Id} vs ${player2Id}`);\n    }\n  }\n\n  public getActiveCharacters(): Character[] {\n    return this.activeCharacters;\n  }\n\n  public update(deltaTime: number): void {\n    for (const character of this.activeCharacters) {\n      this.updateCharacterState(character, deltaTime);\n    }\n  }\n\n  private updateCharacterState(character: Character, deltaTime: number): void {\n    // Update character animation, physics, and state\n    // This will be expanded based on your specific needs\n  }\n\n  public getAvailableCharacters(): string[] {\n    return Array.from(this.characterConfigs.keys());\n  }\n}\n", "\nexport enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3\n}\n\nexport class Logger {\n  private static logLevel: LogLevel = LogLevel.INFO;\n  private static prefix = '[SF3]';\n\n  public static setLogLevel(level: LogLevel): void {\n    this.logLevel = level;\n  }\n\n  public static debug(message: string, ...args: any[]): void {\n    if (this.logLevel <= LogLevel.DEBUG) {\n      console.debug(`${this.prefix}[DEBUG]`, message, ...args);\n    }\n  }\n\n  public static info(message: string, ...args: any[]): void {\n    if (this.logLevel <= LogLevel.INFO) {\n      console.info(`${this.prefix}[INFO]`, message, ...args);\n    }\n  }\n\n  public static warn(message: string, ...args: any[]): void {\n    if (this.logLevel <= LogLevel.WARN) {\n      console.warn(`${this.prefix}[WARN]`, message, ...args);\n    }\n  }\n\n  public static error(message: string, ...args: any[]): void {\n    if (this.logLevel <= LogLevel.ERROR) {\n      console.error(`${this.prefix}[ERROR]`, message, ...args);\n    }\n  }\n}\n", "import * as pc from 'playcanvas';\nimport { CharacterConfig, CharacterData, AnimationData } from '../../../types/character';\n\nexport class ProceduralFrameGenerator {\n\tgenerateForCharacter(config: CharacterConfig): CharacterConfig {\n\t\tconst updated: CharacterConfig = { ...config } as CharacterConfig;\n\t\tconst animations: Record<string, AnimationData> = updated.animations || {};\n\n\t\t// Expand moves into animations if not present\n\t\tconst moveGroups = [updated.moves as any, (updated as any).normals, (updated as any).specials, (updated as any).supers];\n\t\tfor (const group of moveGroups) {\n\t\t\tif (!group) continue;\n\t\t\tfor (const [name, move] of Object.entries<any>(group)) {\n\t\t\t\tconst key = `move_${name}`;\n\t\t\t\tif (!animations[key]) {\n\t\t\t\t\tconst total = (move.startupFrames || move.startup || 0) + (move.activeFrames || move.active || 0) + (move.recoveryFrames || move.recovery || 0);\n\t\t\t\t\tanimations[key] = {\n\t\t\t\t\t\tframeCount: Math.max(1, total || 5),\n\t\t\t\t\t\tduration: Math.max(83, (total || 5) * 16.6),\n\t\t\t\t\t\tloop: false\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t(updated as any).animations = animations;\n\t\treturn updated;\n\t}\n}", "\nimport * as pc from 'playcanvas';\nimport { Character } from '../../../types/character';\nimport { CharacterManager } from '../characters/CharacterManager';\nimport { InputManager, PlayerInputs } from '../input/InputManager';\nimport { Logger } from '../utils/Logger';\n\ninterface HitResult {\n  hit: boolean;\n  damage: number;\n  knockback: pc.Vec3;\n  hitstun: number;\n  blockstun: number;\n}\n\nexport class CombatSystem {\n  private app: pc.Application;\n  private characterManager!: CharacterManager;\n  private inputManager!: InputManager;\n  private frameCounter = 0;\n  private hitstop = 0;\n\n  constructor(app: pc.Application) {\n    this.app = app;\n  }\n\n  public initialize(characterManager: CharacterManager, inputManager: InputManager): void {\n    this.characterManager = characterManager;\n    this.inputManager = inputManager;\n    Logger.info('Combat system initialized');\n  }\n\n  public update(deltaTime: number): void {\n    if (this.hitstop > 0) {\n      this.hitstop--;\n      return; // Skip frame during hitstop\n    }\n\n    this.frameCounter++;\n    this.processInputs();\n    this.updateHitboxes();\n    this.checkCollisions();\n  }\n\n  // Deterministic step for rollback, driven by netcode\n  public stepWithInputs(p0: PlayerInputs, p1: PlayerInputs): void {\n    if (this.hitstop > 0) {\n      this.hitstop--;\n      return;\n    }\n    this.frameCounter++;\n    const activeCharacters = this.characterManager.getActiveCharacters();\n    if (activeCharacters[0]) this.processCharacterInputs(activeCharacters[0], p0);\n    if (activeCharacters[1]) this.processCharacterInputs(activeCharacters[1], p1);\n    this.updateHitboxes();\n    this.checkCollisions();\n  }\n\n  private processInputs(): void {\n    const activeCharacters = this.characterManager.getActiveCharacters();\n    \n    for (let i = 0; i < activeCharacters.length; i++) {\n      const character = activeCharacters[i];\n      const inputs = this.inputManager.getPlayerInputs(i);\n      \n      this.processCharacterInputs(character, inputs);\n    }\n  }\n\n  private processCharacterInputs(character: Character, inputs: any): void {\n    if (character.state !== 'idle' && character.state !== 'walking') {\n      return; // Character is in an active state\n    }\n\n    // Process movement\n    if (inputs.left) {\n      this.moveCharacter(character, -1);\n    } else if (inputs.right) {\n      this.moveCharacter(character, 1);\n    }\n\n    // Process attacks\n    if (inputs.lightPunch) {\n      this.executeMove(character, 'lightPunch');\n    } else if (inputs.mediumPunch) {\n      this.executeMove(character, 'mediumPunch');\n    } else if (inputs.heavyPunch) {\n      this.executeMove(character, 'heavyPunch');\n    }\n\n    // Process special moves (simplified motion detection)\n    if (inputs.hadoken) {\n      this.executeMove(character, 'hadoken');\n    }\n  }\n\n  private moveCharacter(character: Character, direction: number): void {\n    const walkSpeed = character.config.stats.walkSpeed;\n    const currentPos = character.entity.getPosition();\n    \n    currentPos.x += direction * walkSpeed * (1/60); // Assuming 60fps\n    character.entity.setPosition(currentPos);\n    \n    character.state = 'walking';\n  }\n\n  private executeMove(character: Character, moveName: string): void {\n    const moveData = character.config.moves[moveName];\n    if (!moveData) {\n      Logger.warn(`Move not found: ${moveName} for character ${character.id}`);\n      return;\n    }\n\n    character.currentMove = {\n      name: moveName,\n      data: moveData,\n      currentFrame: 0,\n      phase: 'startup'\n    };\n\n    character.state = 'attacking';\n    character.frameData = {\n      startup: moveData.startupFrames,\n      active: moveData.activeFrames,\n      recovery: moveData.recoveryFrames,\n      advantage: moveData.advantage || 0\n    };\n\n    Logger.info(`${character.id} executing ${moveName}`);\n  }\n\n  private updateHitboxes(): void {\n    const activeCharacters = this.characterManager.getActiveCharacters();\n    \n    for (const character of activeCharacters) {\n      if (character.currentMove) {\n        this.updateMoveFrames(character);\n      }\n    }\n  }\n\n  private updateMoveFrames(character: Character): void {\n    if (!character.currentMove) return;\n\n    character.currentMove.currentFrame++;\n    const move = character.currentMove;\n    const frameData = character.frameData;\n\n    if (move.currentFrame <= frameData.startup) {\n      move.phase = 'startup';\n    } else if (move.currentFrame <= frameData.startup + frameData.active) {\n      move.phase = 'active';\n    } else if (move.currentFrame <= frameData.startup + frameData.active + frameData.recovery) {\n      move.phase = 'recovery';\n    } else {\n      // Move finished\n      character.currentMove = null;\n      character.state = 'idle';\n    }\n  }\n\n  private checkCollisions(): void {\n    const activeCharacters = this.characterManager.getActiveCharacters();\n    \n    if (activeCharacters.length !== 2) return;\n\n    const [p1, p2] = activeCharacters;\n    \n    if (p1.currentMove?.phase === 'active' && this.charactersColliding(p1, p2)) {\n      this.processHit(p1, p2);\n    } else if (p2.currentMove?.phase === 'active' && this.charactersColliding(p2, p1)) {\n      this.processHit(p2, p1);\n    }\n  }\n\n  private charactersColliding(attacker: Character, defender: Character): boolean {\n    const attackerPos = attacker.entity.getPosition();\n    const defenderPos = defender.entity.getPosition();\n    const distance = attackerPos.distance(defenderPos);\n    \n    // Simple collision detection - should be replaced with proper hitbox system\n    return distance < 2.0;\n  }\n\n  private processHit(attacker: Character, defender: Character): void {\n    if (!attacker.currentMove) return;\n\n    const moveData = attacker.currentMove.data;\n    const damage = moveData.damage;\n    \n    defender.health = Math.max(0, defender.health - damage);\n    this.hitstop = Math.floor(damage / 10); // Hitstop based on damage\n    \n    Logger.info(`${attacker.id} hits ${defender.id} for ${damage} damage`);\n    \n    if (defender.health <= 0) {\n      this.handleKO(defender, attacker);\n    }\n  }\n\n  private handleKO(ko: Character, winner: Character): void {\n    ko.state = 'ko';\n    Logger.info(`${ko.id} is KO'd! ${winner.id} wins!`);\n    \n    // Trigger victory sequence\n    this.app.fire('match:victory', winner.id);\n  }\n\n  public getCurrentFrame(): number {\n    return this.frameCounter;\n  }\n\n  public isInHistop(): boolean {\n    return this.hitstop > 0;\n  }\n}\n", "import * as pc from 'playcanvas';\nimport ParallaxManager from '../../scripts/graphics/ParallaxManager';\nimport { ProceduralStageGenerator } from '../procgen/ProceduralStageGenerator';\n\nexport class StageManager {\n  private app: pc.Application;\n  private parallax?: ParallaxManager;\n\n  constructor(app: pc.Application) {\n    this.app = app;\n  }\n\n  public async initialize(): Promise<void> {\n    // Camera\n    const camera = new pc.Entity('MainCamera');\n    camera.addComponent('camera', {\n      clearColor: new pc.Color(0, 0, 0),\n      fov: 55,\n      nearClip: 0.1,\n      farClip: 1000\n    });\n    camera.setPosition(0, 2, 10);\n    camera.lookAt(0, 1, 0);\n    this.app.root.addChild(camera);\n\n    // Light\n    const light = new pc.Entity('DirectionalLight');\n    light.addComponent('light', {\n      type: pc.LIGHTTYPE_DIRECTIONAL,\n      color: new pc.Color(1, 1, 1),\n      intensity: 1.0,\n      castShadows: false\n    });\n    light.setEulerAngles(45, 30, 0);\n    this.app.root.addChild(light);\n\n    // Parallax background system\n    this.parallax = new ParallaxManager(this.app);\n    await this.parallax.initialize();\n\n    // Procedural stage generation with URL-configurable seed/theme\n    const params = new URLSearchParams(typeof window !== 'undefined' ? window.location.search : '');\n    const seedParam = params.get('seed');\n    const themeParam = params.get('theme') as 'training' | 'gothic' | 'urban' | null;\n    const seed = seedParam ? parseInt(seedParam, 10) : Date.now();\n    const theme = themeParam || 'training';\n\n    const gen = new ProceduralStageGenerator(seed);\n    const stageData = gen.generate({ theme });\n    await this.parallax.loadStageData(stageData);\n\n    // Hot-regenerate with keyboard: R to reseed, T to cycle theme\n    if (typeof window !== 'undefined') {\n      window.addEventListener('keydown', (e: KeyboardEvent) => {\n        if (!this.parallax) return;\n        if (e.key === 'r' || e.key === 'R') {\n          const newSeed = Date.now();\n          const g = new ProceduralStageGenerator(newSeed);\n          const d = g.generate({ theme });\n          this.parallax!.loadStageData(d);\n        } else if (e.key === 't' || e.key === 'T') {\n          const themes: ('training' | 'gothic' | 'urban')[] = ['training', 'gothic', 'urban'];\n          const idx = Math.max(0, themes.indexOf(theme));\n          const next = themes[(idx + 1) % themes.length];\n          const g = new ProceduralStageGenerator(seed);\n          const d = g.generate({ theme: next });\n          this.parallax!.loadStageData(d);\n        }\n      });\n    }\n  }\n}\n\n", "/**\n * ParallaxManager - HD-2D Multi-layer Parallax Background System\n * Creates depth and immersion through layered parallax scrolling\n * Features: Multiple depth layers, speed variation, dynamic backgrounds\n */\n\nimport * as pc from 'playcanvas';\nimport { ISystem } from '../../../types/core';\nimport { ParallaxLayer, ParallaxSettings } from '../../../types/graphics';\nimport { ShaderUtils } from '../../core/graphics/ShaderUtils';\n\ninterface LayerConfig {\n    depth: number;\n    speed: number;\n    name: string;\n    opacity: number;\n    blur: number;\n}\n\ninterface StageData {\n    name: string;\n    layers: Record<string, any>;\n    lighting?: {\n        ambient: pc.Color;\n        directional: pc.Color;\n        intensity: number;\n    };\n    atmosphere?: {\n        fog: boolean;\n        particles: string[];\n        wind: number;\n    };\n}\n\ninterface ParallaxLayerData {\n    entity: pc.Entity;\n    config: LayerConfig;\n    elements: pc.Entity[];\n    basePosition: pc.Vec3;\n    currentOffset: pc.Vec3;\n}\n\ninterface DynamicElement {\n    entity: pc.Entity;\n    data: any;\n    layer: string;\n    animation: any;\n}\n\ninterface VisualEffects {\n    windSpeed: number;\n    timeOfDay: number;\n    weather: string;\n    atmosphere: number;\n}\n\ninterface PerformanceSettings {\n    cullingDistance: number;\n    maxElements: number;\n    updateFrequency: number;\n    frameSkip: number;\n}\n\nclass ParallaxManager implements ISystem {\n    private app: pc.Application;\n    private initialized: boolean = false;\n    \n    // Parallax configuration based on HD-2D depth layers\n    private layerConfig: Record<string, LayerConfig> = {\n        skybox: { \n            depth: -100, \n            speed: 0.05, \n            name: 'Skybox',\n            opacity: 0.8,\n            blur: 0.3\n        },\n        farBackground: { \n            depth: -50, \n            speed: 0.1, \n            name: 'Far Background',\n            opacity: 0.9,\n            blur: 0.2\n        },\n        midBackground: { \n            depth: -25, \n            speed: 0.3, \n            name: 'Mid Background',\n            opacity: 0.95,\n            blur: 0.1\n        },\n        nearBackground: { \n            depth: -15, \n            speed: 0.5, \n            name: 'Near Background',\n            opacity: 1.0,\n            blur: 0.05\n        },\n        playground: { \n            depth: -8, \n            speed: 0.7, \n            name: 'Playground',\n            opacity: 1.0,\n            blur: 0.0\n        },\n        stageForeground: { \n            depth: -3, \n            speed: 0.9, \n            name: 'Stage Foreground',\n            opacity: 1.0,\n            blur: 0.0\n        }\n    };\n    \n    // Active parallax layers\n    private parallaxLayers: Map<string, ParallaxLayerData> = new Map();\n    private layerEntities: Map<string, pc.Entity> = new Map();\n    \n    // Camera tracking\n    private cameraPosition: pc.Vec3 = new pc.Vec3(0, 0, 0);\n    private lastCameraPosition: pc.Vec3 = new pc.Vec3(0, 0, 0);\n    private cameraVelocity: pc.Vec3 = new pc.Vec3(0, 0, 0);\n    \n    // Dynamic elements\n    private dynamicElements: Map<string, any> = new Map();\n    private animatedElements: DynamicElement[] = [];\n    \n    // Stage-specific data\n    private currentStage: string | null = null;\n    private stageData: Map<string, StageData> = new Map();\n    private shaderDrivenEntities: { entity: pc.Entity; material: pc.Material; name: string }[] = [];\n    private timeMs: number = 0;\n    \n    // Performance settings\n    private performance: PerformanceSettings = {\n        cullingDistance: 100,\n        maxElements: 50,\n        updateFrequency: 60,\n        frameSkip: 0\n    };\n    \n    // Visual effects\n    private effects: VisualEffects = {\n        windSpeed: 0.5,\n        timeOfDay: 0.5, // 0 = night, 1 = day\n        weather: 'clear', // clear, rain, wind, storm\n        atmosphere: 1.0\n    };\n    \n    // Entities\n    private parallaxContainer: pc.Entity | null = null;\n    private mainCamera: pc.Entity | null = null;\n\n    constructor(app: pc.Application) {\n        this.app = app;\n        this.setupDefaultStages();\n    }\n\n    public async initialize(): Promise<void> {\n        console.log('Initializing Parallax Manager...');\n        \n        try {\n            // Create parallax layer containers\n            this.createParallaxLayers();\n            \n            // Setup camera tracking\n            this.setupCameraTracking();\n            \n            // Initialize default stage\n            await this.loadStage('training_stage');\n            \n            // Setup dynamic updates\n            this.setupUpdateLoop();\n            \n            this.initialized = true;\n            console.log('Parallax Manager initialized successfully');\n            \n        } catch (error) {\n            console.error('Failed to initialize Parallax Manager:', error);\n            throw error;\n        }\n    }\n\n    private setupDefaultStages(): void {\n        // Training Stage - Simple multi-layer setup\n        this.stageData.set('training_stage', {\n            name: 'Training Stage',\n            layers: {\n                skybox: {\n                    type: 'gradient',\n                    colors: ['#87CEEB', '#98D8E8', '#B8E6F0'],\n                    animated: false\n                },\n                farBackground: {\n                    type: 'mountains',\n                    elements: [\n                        { type: 'mountain', x: -200, y: -20, scale: 2.0, color: '#4A5568' },\n                        { type: 'mountain', x: 0, y: -15, scale: 1.8, color: '#5A6578' },\n                        { type: 'mountain', x: 180, y: -18, scale: 2.2, color: '#3A4558' }\n                    ]\n                },\n                midBackground: {\n                    type: 'buildings',\n                    elements: [\n                        { type: 'building', x: -150, y: -10, width: 40, height: 60, color: '#6B7280' },\n                        { type: 'building', x: -80, y: -5, width: 35, height: 45, color: '#5B6270' },\n                        { type: 'building', x: 50, y: -8, width: 50, height: 70, color: '#7B8290' },\n                        { type: 'building', x: 120, y: -12, width: 30, height: 55, color: '#4B5260' }\n                    ]\n                },\n                nearBackground: {\n                    type: 'trees',\n                    elements: [\n                        { type: 'tree', x: -100, y: -5, scale: 1.5, sway: true },\n                        { type: 'tree', x: -30, y: -3, scale: 1.2, sway: true },\n                        { type: 'tree', x: 80, y: -6, scale: 1.8, sway: true },\n                        { type: 'tree', x: 150, y: -4, scale: 1.3, sway: true }\n                    ]\n                },\n                playground: {\n                    type: 'stage_floor',\n                    elements: [\n                        { type: 'platform', x: 0, y: -5, width: 40, height: 2, color: '#8B7355' },\n                        { type: 'boundary_left', x: -20, y: 0, height: 10 },\n                        { type: 'boundary_right', x: 20, y: 0, height: 10 }\n                    ]\n                },\n                stageForeground: {\n                    type: 'decorative',\n                    elements: [\n                        { type: 'lamp', x: -25, y: 5, animated: true, light: true },\n                        { type: 'lamp', x: 25, y: 5, animated: true, light: true }\n                    ]\n                }\n            },\n            lighting: {\n                ambient: new pc.Color(0.3, 0.4, 0.5),\n                directional: new pc.Color(1.0, 0.95, 0.8),\n                intensity: 1.2\n            },\n            atmosphere: {\n                fog: false,\n                particles: ['dust'],\n                wind: 0.3\n            }\n        });\n        \n        // Urban Stage - 2D Fighting Game style\n        this.stageData.set('urban_stage', {\n            name: 'Urban Street',\n            layers: {\n                skybox: {\n                    type: 'cityscape',\n                    colors: ['#2D3748', '#4A5568', '#718096'],\n                    timeOfDay: 0.7 // Evening\n                },\n                farBackground: {\n                    type: 'cityscape',\n                    elements: [\n                        { type: 'skyscraper', x: -300, y: -30, width: 60, height: 120 },\n                        { type: 'skyscraper', x: -200, y: -25, width: 80, height: 150 },\n                        { type: 'skyscraper', x: 0, y: -35, width: 100, height: 180 },\n                        { type: 'skyscraper', x: 200, y: -28, width: 70, height: 140 }\n                    ]\n                },\n                midBackground: {\n                    type: 'street',\n                    elements: [\n                        { type: 'storefront', x: -120, y: -10, width: 60, height: 40 },\n                        { type: 'alley', x: -40, y: -8, width: 20, height: 35 },\n                        { type: 'storefront', x: 40, y: -12, width: 80, height: 45 }\n                    ]\n                },\n                nearBackground: {\n                    type: 'crowd',\n                    elements: [\n                        { type: 'spectator_group', x: -80, y: -5, count: 8, animated: true },\n                        { type: 'spectator_group', x: 80, y: -5, count: 12, animated: true }\n                    ]\n                },\n                playground: {\n                    type: 'street_stage',\n                    elements: [\n                        { type: 'asphalt', x: 0, y: -5, width: 50, height: 3 },\n                        { type: 'sidewalk', x: -30, y: -3, width: 10, height: 1 },\n                        { type: 'sidewalk', x: 30, y: -3, width: 10, height: 1 }\n                    ]\n                }\n            }\n        });\n    }\n\n    private createParallaxLayers(): void {\n        // Create container for all parallax layers\n        this.parallaxContainer = new pc.Entity('ParallaxContainer');\n        this.app.root.addChild(this.parallaxContainer);\n        \n        // Create individual layer containers\n        Object.entries(this.layerConfig).forEach(([layerName, config]) => {\n            const layerEntity = new pc.Entity(`ParallaxLayer_${layerName}`);\n            layerEntity.setPosition(0, 0, config.depth);\n            \n            this.parallaxContainer!.addChild(layerEntity);\n            this.layerEntities.set(layerName, layerEntity);\n            \n            // Create layer data\n            this.parallaxLayers.set(layerName, {\n                entity: layerEntity,\n                config: config,\n                elements: [],\n                basePosition: new pc.Vec3(0, 0, config.depth),\n                currentOffset: new pc.Vec3(0, 0, 0)\n            });\n        });\n        \n        console.log('Parallax layers created:', this.parallaxLayers.size);\n    }\n\n    private setupCameraTracking(): void {\n        // Get main camera reference\n        this.mainCamera = this.app.root.findByName('MainCamera');\n        \n        if (!this.mainCamera) {\n            console.warn('Main camera not found for parallax tracking');\n            return;\n        }\n        \n        // Initialize camera position tracking\n        this.lastCameraPosition.copy(this.mainCamera.getPosition());\n        this.cameraPosition.copy(this.mainCamera.getPosition());\n        \n        console.log('Camera tracking setup complete');\n    }\n\n    public async loadStage(stageId: string): Promise<void> {\n        const stage = this.stageData.get(stageId);\n        if (!stage) {\n            console.error(`Stage not found: ${stageId}`);\n            return;\n        }\n        \n        console.log(`Loading stage: ${stage.name}`);\n        \n        // Clear existing elements\n        this.clearAllLayers();\n        \n        // Load stage layers\n        Object.entries(stage.layers).forEach(([layerName, layerData]) => {\n            this.loadStageLayer(layerName, layerData);\n        });\n        \n        // Set stage lighting\n        if (stage.lighting) {\n            this.applyStageLighting(stage.lighting);\n        }\n        \n        // Set stage atmosphere\n        if (stage.atmosphere) {\n            this.applyStageAtmosphere(stage.atmosphere);\n        }\n        \n        this.currentStage = stageId;\n        console.log(`Stage loaded: ${stage.name}`);\n    }\n\n    public async loadStageData(stage: StageData): Promise<void> {\n        // Clear tracked shader-driven entities\n        this.shaderDrivenEntities = [];\n\n        // Clear existing elements\n        this.clearAllLayers();\n\n        // Load stage layers from provided data\n        Object.entries(stage.layers).forEach(([layerName, layerData]) => {\n            this.loadStageLayer(layerName, layerData);\n        });\n\n        // Apply optional lighting and atmosphere\n        if (stage.lighting) {\n            this.applyStageLighting(stage.lighting);\n        }\n        if (stage.atmosphere) {\n            this.applyStageAtmosphere(stage.atmosphere);\n        }\n\n        this.currentStage = stage.name || null;\n        console.log(`Stage loaded (data): ${stage.name}`);\n    }\n\n    private loadStageLayer(layerName: string, layerData: any): void {\n        const layer = this.parallaxLayers.get(layerName);\n        if (!layer) return;\n        \n        // Create elements for this layer\n        layerData.elements?.forEach((elementData: any, index: number) => {\n            const element = this.createElement(layerName, elementData, index);\n            if (element) {\n                layer.entity.addChild(element);\n                layer.elements.push(element);\n                // Apply shader mappings when element name hints match\n                if (elementData.name === 'stormy_sky' || layerName === 'skybox') {\n                    this.applyStageShader(element, 'stormy_sky');\n                }\n                \n                // Add to animated elements if needed\n                if (elementData.animated || elementData.sway) {\n                    this.animatedElements.push({\n                        entity: element,\n                        data: elementData,\n                        layer: layerName,\n                        animation: this.createElementAnimation(elementData)\n                    });\n                }\n            }\n        });\n    }\n\n    private createElement(layerName: string, elementData: any, index: number | string): pc.Entity | null {\n        const element = new pc.Entity(`${layerName}_element_${index}`);\n        \n        // Position element\n        element.setPosition(elementData.x || 0, elementData.y || 0, 0);\n        \n        // Scale element\n        if (elementData.scale) {\n            element.setLocalScale(elementData.scale, elementData.scale, 1);\n        }\n        \n        // Create visual representation based on type\n        switch (elementData.type) {\n            case 'mountain':\n                this.createMountainElement(element, elementData);\n                break;\n            case 'building':\n            case 'skyscraper':\n                this.createBuildingElement(element, elementData);\n                break;\n            case 'tree':\n                this.createTreeElement(element, elementData);\n                break;\n            case 'platform':\n                this.createPlatformElement(element, elementData);\n                break;\n            case 'lamp':\n                this.createLampElement(element, elementData);\n                break;\n            case 'spectator_group':\n                this.createSpectatorGroup(element, elementData);\n                break;\n            default:\n                this.createGenericElement(element, elementData);\n        }\n        \n        return element;\n    }\n\n    private createMountainElement(element: pc.Entity, data: any): void {\n        element.addComponent('render', {\n            type: 'plane',\n            material: this.createSolidMaterial(data.color || '#4A5568')\n        });\n        \n        // Create mountain silhouette shape\n        element.setLocalScale(data.width || 20, data.height || 15, 1);\n    }\n\n    private createBuildingElement(element: pc.Entity, data: any): void {\n        element.addComponent('render', {\n            type: 'box',\n            material: this.createSolidMaterial(data.color || '#6B7280')\n        });\n        \n        element.setLocalScale(data.width || 10, data.height || 20, 2);\n        \n        // Add windows\n        this.addBuildingWindows(element, data);\n    }\n\n    private addBuildingWindows(building: pc.Entity, data: any): void {\n        const windowRows = Math.floor((data.height || 20) / 4);\n        const windowCols = Math.floor((data.width || 10) / 3);\n        \n        for (let row = 0; row < windowRows; row++) {\n            for (let col = 0; col < windowCols; col++) {\n                if (Math.random() > 0.3) { // 70% chance for lit window\n                    const window = new pc.Entity(`window_${row}_${col}`);\n                    window.addComponent('render', {\n                        type: 'plane',\n                        material: this.createEmissiveMaterial('#FFFF99')\n                    });\n                    \n                    const x = (col - windowCols/2) * 2.5;\n                    const y = (row - windowRows/2) * 3;\n                    window.setPosition(x, y, 1.1);\n                    window.setLocalScale(0.8, 1.2, 1);\n                    \n                    building.addChild(window);\n                }\n            }\n        }\n    }\n\n    private createTreeElement(element: pc.Entity, data: any): void {\n        // Tree trunk\n        const trunk = new pc.Entity('trunk');\n        trunk.addComponent('render', {\n            type: 'cylinder',\n            material: this.createSolidMaterial('#4A3429')\n        });\n        trunk.setLocalScale(1, 4, 1);\n        trunk.setPosition(0, -2, 0);\n        \n        // Tree foliage\n        const foliage = new pc.Entity('foliage');\n        foliage.addComponent('render', {\n            type: 'sphere',\n            material: this.createSolidMaterial('#228B22')\n        });\n        foliage.setLocalScale(4, 3, 4);\n        foliage.setPosition(0, 1, 0);\n        \n        element.addChild(trunk);\n        element.addChild(foliage);\n    }\n\n    private createPlatformElement(element: pc.Entity, data: any): void {\n        element.addComponent('render', {\n            type: 'box',\n            material: this.createSolidMaterial(data.color || '#8B7355')\n        });\n        \n        element.setLocalScale(data.width || 10, data.height || 1, 3);\n    }\n\n    private createLampElement(element: pc.Entity, data: any): void {\n        // Lamp post\n        const post = new pc.Entity('lamp_post');\n        post.addComponent('render', {\n            type: 'cylinder',\n            material: this.createSolidMaterial('#2C2C2C')\n        });\n        post.setLocalScale(0.2, 8, 0.2);\n        \n        // Lamp head\n        const head = new pc.Entity('lamp_head');\n        head.addComponent('render', {\n            type: 'sphere',\n            material: this.createEmissiveMaterial('#FFFFCC')\n        });\n        head.setLocalScale(1.5, 1.5, 1.5);\n        head.setPosition(0, 4, 0);\n        \n        // Add light source\n        if (data.light) {\n            head.addComponent('light', {\n                type: pc.LIGHTTYPE_OMNI,\n                color: new pc.Color(1, 1, 0.8),\n                intensity: 2,\n                range: 15,\n                castShadows: false\n            });\n        }\n        \n        element.addChild(post);\n        element.addChild(head);\n    }\n\n    private createSpectatorGroup(element: pc.Entity, data: any): void {\n        const count = data.count || 5;\n        \n        for (let i = 0; i < count; i++) {\n            const spectator = new pc.Entity(`spectator_${i}`);\n            spectator.addComponent('render', {\n                type: 'capsule',\n                material: this.createSolidMaterial(`hsl(${Math.random() * 360}, 50%, 60%)`)\n            });\n            \n            const x = (i - count/2) * 2 + (Math.random() - 0.5);\n            const z = Math.random() * 2 - 1;\n            spectator.setPosition(x, 0, z);\n            spectator.setLocalScale(0.8, 1.5, 0.8);\n            \n            element.addChild(spectator);\n        }\n    }\n\n    private createGenericElement(element: pc.Entity, data: any): void {\n        element.addComponent('render', {\n            type: 'plane',\n            material: this.createSolidMaterial(data.color || '#666666')\n        });\n    }\n\n    private applyStageShader(entity: pc.Entity, shaderName: string): void {\n        switch (shaderName) {\n            case 'stormy_sky': {\n                const mat = ShaderUtils.createStageStormySkyMaterial(this.app);\n                const existing: any = entity.render?.material;\n                if (existing && existing.diffuseMap) {\n                    (mat as any).setParameter?.('texture_diffuseMap', existing.diffuseMap);\n                }\n                entity.render!.material = mat as unknown as pc.Material;\n                this.shaderDrivenEntities.push({ entity, material: mat, name: shaderName });\n                break;\n            }\n        }\n    }\n\n    private createSolidMaterial(color: string): pc.StandardMaterial {\n        const material = new pc.StandardMaterial();\n        material.diffuse = new pc.Color().fromString(color);\n        material.update();\n        return material;\n    }\n\n    private createEmissiveMaterial(color: string): pc.StandardMaterial {\n        const material = new pc.StandardMaterial();\n        material.emissive = new pc.Color().fromString(color);\n        material.update();\n        return material;\n    }\n\n    private createElementAnimation(elementData: any): any {\n        const animation = {\n            type: 'none',\n            time: 0,\n            speed: 1,\n            amplitude: 1\n        };\n        \n        if (elementData.sway) {\n            animation.type = 'sway';\n            animation.speed = 0.5 + Math.random() * 0.5;\n            animation.amplitude = 0.1 + Math.random() * 0.1;\n        } else if (elementData.animated) {\n            animation.type = 'pulse';\n            animation.speed = 1 + Math.random() * 0.5;\n            animation.amplitude = 0.1;\n        }\n        \n        return animation;\n    }\n\n    private setupUpdateLoop(): void {\n        // Hook into app update loop\n        this.app.on('update', this.update.bind(this));\n    }\n\n    public update(dt: number): void {\n        if (!this.initialized || !this.mainCamera) return;\n        \n        // Update camera tracking\n        this.updateCameraTracking(dt);\n        \n        // Update parallax layers\n        this.updateParallaxLayers(dt);\n        \n        // Update animated elements\n        this.updateAnimatedElements(dt);\n\n        // Update shader time uniforms for animated stage materials\n        this.timeMs += dt * 1000;\n        for (const entry of this.shaderDrivenEntities) {\n            (entry.material as any).setParameter?.('uTime', this.timeMs);\n        }\n    }\n\n    private updateCameraTracking(dt: number): void {\n        this.lastCameraPosition.copy(this.cameraPosition);\n        this.cameraPosition.copy(this.mainCamera!.getPosition());\n        \n        // Calculate camera velocity\n        this.cameraVelocity.sub2(this.cameraPosition, this.lastCameraPosition);\n    }\n\n    private updateParallaxLayers(dt: number): void {\n        // Calculate camera movement delta\n        const cameraDelta = new pc.Vec3().sub2(this.cameraPosition, this.lastCameraPosition);\n        \n        this.parallaxLayers.forEach((layer, layerName) => {\n            // Calculate parallax offset based on layer speed\n            const parallaxOffset = new pc.Vec3().copy(cameraDelta).scale(layer.config.speed);\n            \n            // Add to current offset\n            layer.currentOffset.add(parallaxOffset);\n            \n            // Apply offset to layer entity\n            const newPosition = new pc.Vec3().add2(layer.basePosition, layer.currentOffset);\n            layer.entity.setPosition(newPosition);\n        });\n    }\n\n    private updateAnimatedElements(dt: number): void {\n        this.animatedElements.forEach(animElement => {\n            const animation = animElement.animation;\n            animation.time += dt * animation.speed;\n            \n            switch (animation.type) {\n                case 'sway':\n                    this.updateSwayAnimation(animElement, animation);\n                    break;\n                case 'pulse':\n                    this.updatePulseAnimation(animElement, animation);\n                    break;\n            }\n        });\n    }\n\n    private updateSwayAnimation(animElement: DynamicElement, animation: any): void {\n        const swayAmount = Math.sin(animation.time) * animation.amplitude;\n        const currentRotation = animElement.entity.getEulerAngles();\n        animElement.entity.setEulerAngles(currentRotation.x, currentRotation.y, swayAmount * 5);\n    }\n\n    private updatePulseAnimation(animElement: DynamicElement, animation: any): void {\n        const pulseAmount = 1 + Math.sin(animation.time) * animation.amplitude;\n        animElement.entity.setLocalScale(pulseAmount, pulseAmount, pulseAmount);\n    }\n\n    private applyStageLighting(lighting: { ambient: pc.Color; directional: pc.Color; intensity: number }): void {\n        // Apply stage-specific lighting\n        this.app.scene.ambientLight = lighting.ambient;\n        \n        // Update directional lights if available\n        const lights = this.app.root.findComponents('light');\n        lights.forEach(light => {\n            if (light.type === pc.LIGHTTYPE_DIRECTIONAL) {\n                light.color = lighting.directional;\n                light.intensity = lighting.intensity;\n            }\n        });\n    }\n\n    private applyStageAtmosphere(atmosphere: { particles?: string[]; wind?: number; fog?: boolean }): void {\n        // Apply atmospheric effects\n        this.effects.weather = atmosphere.particles?.[0] || 'clear';\n        this.effects.windSpeed = atmosphere.wind || 0.3;\n        \n        if (atmosphere.fog) {\n            this.app.scene.fog = pc.FOG_LINEAR;\n            this.app.scene.fogStart = 20;\n            this.app.scene.fogEnd = 100;\n            this.app.scene.fogColor = new pc.Color(0.5, 0.6, 0.7);\n        }\n    }\n\n    private clearAllLayers(): void {\n        this.parallaxLayers.forEach(layer => {\n            // Remove all children\n            layer.elements.forEach(element => {\n                layer.entity.removeChild(element);\n                element.destroy();\n            });\n            layer.elements = [];\n        });\n        \n        // Clear animated elements\n        this.animatedElements = [];\n    }\n\n    // Public API\n    public setParallaxSpeed(layerName: string, speed: number): void {\n        const layer = this.parallaxLayers.get(layerName);\n        if (layer) {\n            layer.config.speed = speed;\n        }\n    }\n\n    public setWeatherEffect(weather: string): void {\n        this.effects.weather = weather;\n        // Implement weather effects\n    }\n\n    public setTimeOfDay(time: number): void {\n        this.effects.timeOfDay = time;\n        // Adjust lighting and colors based on time\n    }\n\n    public addDynamicElement(layerName: string, elementData: any): pc.Entity | null {\n        const element = this.createElement(layerName, elementData, 'dynamic');\n        const layer = this.parallaxLayers.get(layerName);\n        \n        if (element && layer) {\n            layer.entity.addChild(element);\n            layer.elements.push(element);\n            return element;\n        }\n        \n        return null;\n    }\n\n    public removeDynamicElement(element: pc.Entity): void {\n        this.parallaxLayers.forEach(layer => {\n            const index = layer.elements.indexOf(element);\n            if (index !== -1) {\n                layer.elements.splice(index, 1);\n                layer.entity.removeChild(element);\n                element.destroy();\n            }\n        });\n    }\n\n    // Debug and utility\n    public getParallaxStats(): any {\n        return {\n            initialized: this.initialized,\n            currentStage: this.currentStage,\n            layerCount: this.parallaxLayers.size,\n            elementCount: Array.from(this.parallaxLayers.values()).reduce((sum, layer) => sum + layer.elements.length, 0),\n            animatedElements: this.animatedElements.length,\n            cameraPosition: this.cameraPosition.toString(),\n            effects: this.effects\n        };\n    }\n\n    public destroy(): void {\n        // Clean up resources\n        this.clearAllLayers();\n        \n        if (this.parallaxContainer) {\n            this.parallaxContainer.destroy();\n        }\n        \n        this.parallaxLayers.clear();\n        this.layerEntities.clear();\n        this.dynamicElements.clear();\n        this.animatedElements = [];\n        this.stageData.clear();\n        \n        console.log('ParallaxManager destroyed');\n    }\n}\n\nexport default ParallaxManager;", "import * as pc from 'playcanvas';\nimport { CharacterHighlightShader } from '../../typescript/shaders/CharacterHighlightShader';\nimport { RimLightingShader } from '../../typescript/shaders/RimLightingShader';\nimport { SpriteNormalMappingShader } from '../../typescript/shaders/SpriteNormalMappingShader';\nimport { DepthPostProcessShader } from '../../typescript/shaders/DepthPostProcessShader';\nimport { StageStormySkyShader } from '../../typescript/shaders/StageStormySkyShader';\n\nexport class ShaderUtils {\n    public static createMaterialFromShaders(app: pc.Application, vertexShader: string, fragmentShader: string): pc.Material {\n        const shader = new pc.Shader(app.graphicsDevice, {\n            attributes: {\n                vertex_position: pc.SEMANTIC_POSITION,\n                vertex_texCoord0: pc.SEMANTIC_TEXCOORD0,\n                vertex_normal: pc.SEMANTIC_NORMAL,\n                vertex_tangent: pc.SEMANTIC_TANGENT\n            },\n            vshader: vertexShader,\n            fshader: fragmentShader\n        });\n\n        const material = new pc.Material();\n        material.shader = shader;\n        return material;\n    }\n\n    public static createCharacterHighlightMaterial(app: pc.Application): pc.Material {\n        const mat = this.createMaterialFromShaders(app, CharacterHighlightShader.vertexShader, CharacterHighlightShader.fragmentShader);\n        // Reasonable defaults; callers can override\n        mat.setParameter('outline_width', 2.0);\n        mat.setParameter('outline_color', new Float32Array([1.0, 0.5, 0.0, 1.0]));\n        mat.setParameter('rim_power', 2.0);\n        mat.setParameter('rim_intensity', 1.0);\n        mat.setParameter('rim_color', new Float32Array([0.8, 0.9, 1.0, 1.0]));\n        mat.setParameter('energy_flow_speed', 2.0);\n        mat.setParameter('energy_frequency', 5.0);\n        mat.setParameter('enable_energy_flow', 1);\n        mat.setParameter('ambient_color', new Float32Array([0.2, 0.2, 0.3, 1.0]));\n        mat.setParameter('main_light_color', new Float32Array([1.0, 0.95, 0.9, 1.0]));\n        mat.setParameter('lighting_intensity', 1.0);\n        mat.setParameter('light_direction', new Float32Array([0.3, -0.5]));\n        mat.setParameter('enable_pseudo_depth', 1);\n        mat.setParameter('depth_offset', 0.01);\n        mat.setParameter('shadow_color', new Float32Array([0.1, 0.1, 0.2, 0.3]));\n        mat.setParameter('time', 0.0);\n        mat.setParameter('texture_pixelSize', new Float32Array([1.0 / 256.0, 1.0 / 256.0]));\n        return mat;\n    }\n\n    public static createRimLightingMaterial(app: pc.Application): pc.Material {\n        const mat = this.createMaterialFromShaders(app, RimLightingShader.vertexShader, RimLightingShader.fragmentShader);\n        // Minimal defaults\n        mat.setParameter('material_opacity', 1.0);\n        mat.setParameter('material_diffuse', new Float32Array([1, 1, 1]));\n        mat.setParameter('material_emissive', new Float32Array([0, 0, 0]));\n        mat.setParameter('light_globalAmbient', new Float32Array([0.2, 0.2, 0.2]));\n        mat.setParameter('light_color', new Float32Array([1, 1, 1]));\n        mat.setParameter('light_direction', new Float32Array([0, -1, 0]));\n        mat.setParameter('light_intensity', 1.0);\n        mat.setParameter('rimPower', 2.0);\n        mat.setParameter('rimIntensity', 0.8);\n        mat.setParameter('rimColor', new Float32Array([0.8, 0.9, 1.0]));\n        mat.setParameter('depthBlur', 0.0);\n        mat.setParameter('pixelSize', 0.0);\n        mat.setParameter('screenResolution', new Float32Array([1920, 1080]));\n        mat.setParameter('hitFlash', 0.0);\n        mat.setParameter('hitFlashColor', new Float32Array([1.0, 1.0, 1.0]));\n        mat.setParameter('characterHighlight', 0.0);\n        return mat;\n    }\n\n    public static createSpriteNormalMappingMaterial(app: pc.Application): pc.Material {\n        const mat = this.createMaterialFromShaders(app, SpriteNormalMappingShader.vertexShader, SpriteNormalMappingShader.fragmentShader);\n        // Defaults for normal mapping sprite\n        mat.setParameter('material_diffuse', new Float32Array([1, 1, 1]));\n        mat.setParameter('material_specular', new Float32Array([0.1, 0.1, 0.1]));\n        mat.setParameter('material_shininess', 16.0);\n        mat.setParameter('material_opacity', 1.0);\n        mat.setParameter('light_color_0', new Float32Array([1, 1, 1]));\n        mat.setParameter('light_color_1', new Float32Array([1, 1, 1]));\n        mat.setParameter('light_color_2', new Float32Array([1, 1, 1]));\n        mat.setParameter('light_intensity_0', 1.0);\n        mat.setParameter('light_intensity_1', 0.5);\n        mat.setParameter('light_intensity_2', 0.2);\n        mat.setParameter('normalMapStrength', 1.0);\n        mat.setParameter('spriteDepth', 0.0);\n        mat.setParameter('spritePixelSize', new Float32Array([256, 256]));\n        mat.setParameter('pixelPerfect', 0.0);\n        mat.setParameter('hitFlash', 0.0);\n        mat.setParameter('hitFlashColor', new Float32Array([1, 1, 1]));\n        mat.setParameter('stunEffect', 0.0);\n        mat.setParameter('counterHitGlow', 0.0);\n        mat.setParameter('playerTint', new Float32Array([1, 1, 1]));\n        mat.setParameter('animationFrame', 0.0);\n        mat.setParameter('spriteSheetSize', new Float32Array([1, 1]));\n        mat.setParameter('frameSize', new Float32Array([1, 1]));\n        return mat;\n    }\n\n    public static createDepthPostProcessMaterial(app: pc.Application): pc.Material {\n        const mat = this.createMaterialFromShaders(app, DepthPostProcessShader.vertexShader, DepthPostProcessShader.fragmentShader);\n        // Defaults\n        const device = app.graphicsDevice;\n        mat.setParameter('uScreenSize', new Float32Array([device.width, device.height]));\n        mat.setParameter('uInvScreenSize', new Float32Array([1 / Math.max(1, device.width), 1 / Math.max(1, device.height)]));\n        mat.setParameter('uNearClip', 0.1);\n        mat.setParameter('uFarClip', 1000.0);\n        mat.setParameter('uFocusDistance', 15.0);\n        mat.setParameter('uFocusRange', 5.0);\n        mat.setParameter('uBokehRadius', 1.5);\n        mat.setParameter('uBokehIntensity', 0.8);\n        mat.setParameter('uFogColor', new Float32Array([0.7, 0.8, 0.9]));\n        mat.setParameter('uFogDensity', 0.0);\n        mat.setParameter('uFogStart', 10.0);\n        mat.setParameter('uFogEnd', 50.0);\n        mat.setParameter('uAtmosphericPerspective', 0.0);\n        mat.setParameter('uAtmosphereColor', new Float32Array([0.7, 0.8, 0.9]));\n        mat.setParameter('uHeatHaze', 0.0);\n        mat.setParameter('uColorSeparation', 0.0);\n        mat.setParameter('uScreenShake', 0.0);\n        mat.setParameter('uScreenShakeOffset', new Float32Array([0, 0]));\n        mat.setParameter('uTimeScale', 1.0);\n        mat.setParameter('uTime', 0.0);\n        return mat;\n    }\n\n    public static createStageStormySkyMaterial(app: pc.Application): pc.Material {\n        const mat = this.createMaterialFromShaders(app, StageStormySkyShader.vertexShader, StageStormySkyShader.fragmentShader);\n        mat.setParameter('uScrollSpeed', new Float32Array([0.01, 0.002]));\n        mat.setParameter('uTime', 0.0);\n        mat.setParameter('uTint', new Float32Array([0.6, 0.7, 0.8, 1.0]));\n        return mat;\n    }\n}\n\n", "\n/**\n * Advanced Character Highlight Shader for Cutting-Edge Visuals\n * Enhanced for Pseudo 2.5D rendering pipeline\n * Converted from GDScript to TypeScript\n */\n\nexport class CharacterHighlightShader {\n  static readonly vertexShader = `\n    attribute vec3 vertex_position;\n    attribute vec2 vertex_texCoord0;\n    \n    uniform mat4 matrix_model;\n    uniform mat4 matrix_view;\n    uniform mat4 matrix_projection;\n    \n    varying vec2 vUv0;\n    varying vec2 vWorldPosition;\n    \n    void main() {\n        vec4 worldPos = matrix_model * vec4(vertex_position, 1.0);\n        vWorldPosition = worldPos.xy;\n        vUv0 = vertex_texCoord0;\n        gl_Position = matrix_projection * matrix_view * worldPos;\n    }\n  `;\n\n  static readonly fragmentShader = `\n    #ifdef GL_ES\n    precision highp float;\n    #endif\n    \n    varying vec2 vUv0;\n    varying vec2 vWorldPosition;\n    \n    uniform sampler2D texture_diffuseMap;\n    uniform vec2 texture_pixelSize;\n    \n    // Shader parameters\n    uniform float outline_width;\n    uniform vec4 outline_color;\n    uniform float rim_power;\n    uniform float rim_intensity;\n    uniform vec4 rim_color;\n    uniform float energy_flow_speed;\n    uniform float energy_frequency;\n    uniform bool enable_energy_flow;\n    \n    // Pseudo 2.5D lighting integration\n    uniform vec4 ambient_color;\n    uniform vec4 main_light_color;\n    uniform float lighting_intensity;\n    uniform vec2 light_direction;\n    \n    // Depth and shadow effects\n    uniform bool enable_pseudo_depth;\n    uniform float depth_offset;\n    uniform vec4 shadow_color;\n    \n    uniform float time;\n    \n    // Calculate pseudo normal for depth effect\n    vec3 calculate_pseudo_normal(vec2 uv) {\n        vec2 tex_size = 1.0 / texture_pixelSize;\n        float offset = 1.0 / tex_size.x;\n        \n        float height_left = texture2D(texture_diffuseMap, uv - vec2(offset, 0.0)).r;\n        float height_right = texture2D(texture_diffuseMap, uv + vec2(offset, 0.0)).r;\n        float height_up = texture2D(texture_diffuseMap, uv - vec2(0.0, offset)).r;\n        float height_down = texture2D(texture_diffuseMap, uv + vec2(0.0, offset)).r;\n        \n        float dx = (height_right - height_left);\n        float dy = (height_down - height_up);\n        \n        return normalize(vec3(dx, dy, 1.0));\n    }\n    \n    void main() {\n        vec2 uv = vUv0;\n        vec4 tex_color = texture2D(texture_diffuseMap, uv);\n        \n        // Skip transparent pixels\n        if (tex_color.a < 0.1) {\n            gl_FragColor = tex_color;\n            return;\n        }\n        \n        vec3 final_color = tex_color.rgb;\n        \n        // Apply pseudo 2.5D lighting\n        if (enable_pseudo_depth) {\n            vec3 pseudo_normal = calculate_pseudo_normal(uv);\n            float light_factor = dot(pseudo_normal, normalize(vec3(light_direction, 1.0)));\n            light_factor = light_factor * 0.5 + 0.5;\n            \n            vec3 lit_color = mix(ambient_color.rgb, main_light_color.rgb, light_factor);\n            final_color *= lit_color * lighting_intensity;\n            \n            // Add subtle shadow\n            float shadow_factor = 1.0 - light_factor;\n            shadow_factor = smoothstep(0.3, 0.7, shadow_factor);\n            final_color = mix(final_color, shadow_color.rgb, shadow_factor * shadow_color.a * 0.2);\n        }\n        \n        // Create outline by sampling neighboring pixels\n        float outline = 0.0;\n        vec2 tex_size = 1.0 / texture_pixelSize;\n        float outline_width_uv = outline_width / tex_size.x;\n        \n        for (float i = 0.0; i < 8.0; i++) {\n            float angle = i * 0.785398; // 45 degrees in radians\n            vec2 offset = vec2(cos(angle), sin(angle)) * outline_width_uv;\n            float alpha = texture2D(texture_diffuseMap, uv + offset).a;\n            if (alpha < 0.1 && tex_color.a > 0.1) {\n                outline = 1.0;\n                break;\n            }\n        }\n        \n        // Apply outline with depth consideration\n        if (outline > 0.0) {\n            final_color = mix(final_color, outline_color.rgb, outline_color.a);\n        }\n        \n        // Create enhanced rim lighting effect\n        vec2 center = vec2(0.5, 0.5);\n        vec2 rim_dir = normalize(uv - center);\n        float rim_factor = dot(rim_dir, rim_dir);\n        rim_factor = pow(rim_factor, rim_power);\n        \n        // Add energy flow animation\n        float energy = 1.0;\n        if (enable_energy_flow) {\n            float time_offset = time * energy_flow_speed;\n            energy = sin(uv.y * energy_frequency + time_offset) * 0.5 + 0.5;\n            energy = smoothstep(0.3, 0.7, energy);\n        }\n        \n        // Apply rim lighting with energy animation\n        vec3 rim_light = rim_color.rgb * rim_intensity * rim_factor * energy;\n        final_color += rim_light;\n        \n        // Enhanced contrast for fighting game aesthetics\n        final_color = pow(final_color, vec3(0.9));\n        final_color = clamp(final_color, 0.0, 1.0);\n        \n        gl_FragColor = vec4(final_color, tex_color.a);\n    }\n  `;\n\n  public static createMaterial(device: any): any {\n    const material = new device.StandardMaterial();\n    material.chunks.VS_TRANSFORM = this.vertexShader;\n    material.chunks.PS_OUTPUT = this.fragmentShader;\n    return material;\n  }\n\n  public static setUniforms(material: any, params: {\n    outlineWidth: number;\n    outlineColor: [number, number, number, number];\n    rimPower: number;\n    rimIntensity: number;\n    rimColor: [number, number, number, number];\n    energyFlowSpeed: number;\n    energyFrequency: number;\n    enableEnergyFlow: boolean;\n    ambientColor: [number, number, number, number];\n    mainLightColor: [number, number, number, number];\n    lightingIntensity: number;\n    lightDirection: [number, number];\n    enablePseudoDepth: boolean;\n    depthOffset: number;\n    shadowColor: [number, number, number, number];\n    time: number;\n    texturePixelSize: [number, number];\n  }): void {\n    material.setParameter('outline_width', params.outlineWidth);\n    material.setParameter('outline_color', params.outlineColor);\n    material.setParameter('rim_power', params.rimPower);\n    material.setParameter('rim_intensity', params.rimIntensity);\n    material.setParameter('rim_color', params.rimColor);\n    material.setParameter('energy_flow_speed', params.energyFlowSpeed);\n    material.setParameter('energy_frequency', params.energyFrequency);\n    material.setParameter('enable_energy_flow', params.enableEnergyFlow);\n    material.setParameter('ambient_color', params.ambientColor);\n    material.setParameter('main_light_color', params.mainLightColor);\n    material.setParameter('lighting_intensity', params.lightingIntensity);\n    material.setParameter('light_direction', params.lightDirection);\n    material.setParameter('enable_pseudo_depth', params.enablePseudoDepth);\n    material.setParameter('depth_offset', params.depthOffset);\n    material.setParameter('shadow_color', params.shadowColor);\n    material.setParameter('time', params.time);\n    material.setParameter('texture_pixelSize', params.texturePixelSize);\n  }\n}\n\nexport interface CharacterHighlightParams {\n  outlineWidth: number;\n  outlineColor: [number, number, number, number];\n  rimPower: number;\n  rimIntensity: number;\n  rimColor: [number, number, number, number];\n  energyFlowSpeed: number;\n  energyFrequency: number;\n  enableEnergyFlow: boolean;\n  ambientColor: [number, number, number, number];\n  mainLightColor: [number, number, number, number];\n  lightingIntensity: number;\n  lightDirection: [number, number];\n  enablePseudoDepth: boolean;\n  depthOffset: number;\n  shadowColor: [number, number, number, number];\n}\n\nexport class CharacterHighlightManager {\n  private materials: Map<string, any> = new Map();\n  private startTime: number = Date.now();\n\n  createHighlightMaterial(device: any, characterId: string, params: CharacterHighlightParams): any {\n    const material = CharacterHighlightShader.createMaterial(device);\n    this.materials.set(characterId, { material, params });\n    return material;\n  }\n\n  updateHighlight(characterId: string, deltaTime: number): void {\n    const data = this.materials.get(characterId);\n    if (!data) return;\n\n    const currentTime = (Date.now() - this.startTime) / 1000.0;\n    CharacterHighlightShader.setUniforms(data.material, {\n      ...data.params,\n      time: currentTime,\n      texturePixelSize: [1.0 / 256, 1.0 / 256] // Default sprite size\n    });\n  }\n\n  setHighlightParams(characterId: string, params: Partial<CharacterHighlightParams>): void {\n    const data = this.materials.get(characterId);\n    if (!data) return;\n\n    Object.assign(data.params, params);\n  }\n\n  removeHighlight(characterId: string): void {\n    this.materials.delete(characterId);\n  }\n\n  updateAll(deltaTime: number): void {\n    for (const characterId of this.materials.keys()) {\n      this.updateHighlight(characterId, deltaTime);\n    }\n  }\n}\n", "\n/**\n * Rim Lighting Shader for HD-2D Character Depth\n * Provides Octopath Traveler-style rim lighting on 2D sprites\n * Converted from GLSL to TypeScript\n */\n\nexport class RimLightingShader {\n  static readonly vertexShader = `\n    // ========== VERTEX SHADER ==========\n    attribute vec3 vertex_position;\n    attribute vec2 vertex_texCoord0;\n    attribute vec3 vertex_normal;\n\n    uniform mat4 matrix_model;\n    uniform mat4 matrix_view;\n    uniform mat4 matrix_projection;\n    uniform mat4 matrix_normal;\n\n    // Camera and lighting uniforms\n    uniform vec3 view_position;\n    uniform vec3 light_globalAmbient;\n\n    // Rim lighting parameters\n    uniform float rimPower;\n    uniform float rimIntensity;\n    uniform vec3 rimColor;\n\n    // Output to fragment shader\n    varying vec2 vUv0;\n    varying vec3 vWorldPosition;\n    varying vec3 vWorldNormal;\n    varying vec3 vViewDirection;\n    varying float vRimFactor;\n\n    void main(void) {\n        // Transform vertex position\n        vec4 worldPosition = matrix_model * vec4(vertex_position, 1.0);\n        vWorldPosition = worldPosition.xyz;\n        \n        // Transform normal to world space\n        vWorldNormal = normalize((matrix_normal * vec4(vertex_normal, 0.0)).xyz);\n        \n        // Calculate view direction\n        vViewDirection = normalize(view_position - vWorldPosition);\n        \n        // Calculate rim lighting factor in vertex shader for smooth interpolation\n        float rimDot = 1.0 - dot(vViewDirection, vWorldNormal);\n        vRimFactor = pow(smoothstep(0.0, 1.0, rimDot), rimPower);\n        \n        // Pass texture coordinates\n        vUv0 = vertex_texCoord0;\n        \n        // Final vertex position\n        gl_Position = matrix_projection * matrix_view * worldPosition;\n    }\n  `;\n\n  static readonly fragmentShader = `\n    // ========== FRAGMENT SHADER ==========\n    #ifdef GL_ES\n    precision highp float;\n    #endif\n\n    // Input from vertex shader\n    varying vec2 vUv0;\n    varying vec3 vWorldPosition;\n    varying vec3 vWorldNormal;\n    varying vec3 vViewDirection;\n    varying float vRimFactor;\n\n    // Texture uniforms\n    uniform sampler2D texture_diffuseMap;\n    uniform sampler2D texture_normalMap;\n\n    // Material properties\n    uniform vec3 material_diffuse;\n    uniform vec3 material_emissive;\n    uniform float material_opacity;\n\n    // Lighting uniforms\n    uniform vec3 light_globalAmbient;\n    uniform vec3 light_color;\n    uniform vec3 light_direction;\n    uniform float light_intensity;\n\n    // Rim lighting parameters\n    uniform float rimPower;\n    uniform float rimIntensity;\n    uniform vec3 rimColor;\n    uniform float rimBlend;\n\n    // HD-2D specific parameters\n    uniform float depthBlur;\n    uniform float pixelSize;\n    uniform vec2 screenResolution;\n\n    // Fighting game specific\n    uniform float hitFlash;\n    uniform vec3 hitFlashColor;\n    uniform float characterHighlight;\n\n    // Utility functions\n    vec3 getNormalFromMap(vec2 uv, vec3 worldPos, vec3 worldNormal) {\n        vec3 tangentNormal = texture2D(texture_normalMap, uv).xyz * 2.0 - 1.0;\n        \n        vec3 Q1 = dFdx(worldPos);\n        vec3 Q2 = dFdy(worldPos);\n        vec2 st1 = dFdx(uv);\n        vec2 st2 = dFdy(uv);\n        \n        vec3 N = normalize(worldNormal);\n        vec3 T = normalize(Q1 * st2.t - Q2 * st1.t);\n        vec3 B = -normalize(cross(N, T));\n        mat3 TBN = mat3(T, B, N);\n        \n        return normalize(TBN * tangentNormal);\n    }\n\n    vec3 pixelateColor(vec3 color, float pixelSize) {\n        if (pixelSize <= 0.0) return color;\n        \n        // Quantize color for pixel art effect\n        return floor(color * pixelSize) / pixelSize;\n    }\n\n    void main(void) {\n        // Sample base diffuse texture\n        vec4 baseColor = texture2D(texture_diffuseMap, vUv0);\n        vec3 diffuse = baseColor.rgb * material_diffuse;\n        \n        // Get normal (use normal map if available)\n        vec3 normal = vWorldNormal;\n        #ifdef NORMALMAP\n            normal = getNormalFromMap(vUv0, vWorldPosition, vWorldNormal);\n        #endif\n        \n        // Calculate basic lighting\n        float lightDot = max(dot(normal, -light_direction), 0.0);\n        vec3 lightColor = light_color * light_intensity * lightDot;\n        \n        // Calculate rim lighting\n        float rimFactor = vRimFactor;\n        \n        // Enhanced rim calculation for HD-2D effect\n        float fresnel = pow(1.0 - dot(vViewDirection, normal), rimPower);\n        fresnel = smoothstep(0.0, 1.0, fresnel);\n        \n        // Combine rim factors\n        rimFactor = max(rimFactor, fresnel) * rimIntensity;\n        \n        // Apply rim color\n        vec3 rimContribution = rimColor * rimFactor;\n        \n        // Combine lighting\n        vec3 ambient = light_globalAmbient * diffuse;\n        vec3 finalColor = ambient + diffuse * lightColor + rimContribution;\n        \n        // Apply emissive\n        finalColor += material_emissive;\n        \n        // Character highlight effect (for special moves, selection, etc.)\n        if (characterHighlight > 0.0) {\n            vec3 highlightColor = vec3(1.2, 1.1, 1.0);\n            finalColor = mix(finalColor, finalColor * highlightColor, characterHighlight);\n        }\n        \n        // Hit flash effect (for impact feedback)\n        if (hitFlash > 0.0) {\n            finalColor = mix(finalColor, hitFlashColor, hitFlash);\n        }\n        \n        // Depth-based blur simulation (simple desaturation)\n        if (depthBlur > 0.0) {\n            float luminance = dot(finalColor, vec3(0.299, 0.587, 0.114));\n            finalColor = mix(finalColor, vec3(luminance), depthBlur * 0.5);\n        }\n        \n        // Pixel art preservation\n        if (pixelSize > 0.0) {\n            finalColor = pixelateColor(finalColor, pixelSize);\n        }\n        \n        // Apply opacity with alpha testing for sprite edges\n        float alpha = baseColor.a * material_opacity;\n        if (alpha < 0.1) discard;\n        \n        gl_FragColor = vec4(finalColor, alpha);\n    }\n  `;\n\n  public static createMaterial(device: any): any {\n    const material = new device.StandardMaterial();\n    material.chunks.VS_TRANSFORM = this.vertexShader;\n    material.chunks.PS_OUTPUT = this.fragmentShader;\n    return material;\n  }\n\n  public static setUniforms(material: any, params: {\n    viewPosition: [number, number, number];\n    globalAmbient: [number, number, number];\n    rimPower: number;\n    rimIntensity: number;\n    rimColor: [number, number, number];\n    lightColor: [number, number, number];\n    lightDirection: [number, number, number];\n    lightIntensity: number;\n    materialDiffuse: [number, number, number];\n    materialEmissive: [number, number, number];\n    materialOpacity: number;\n    depthBlur: number;\n    pixelSize: number;\n    screenResolution: [number, number];\n    hitFlash: number;\n    hitFlashColor: [number, number, number];\n    characterHighlight: number;\n  }): void {\n    material.setParameter('view_position', params.viewPosition);\n    material.setParameter('light_globalAmbient', params.globalAmbient);\n    material.setParameter('rimPower', params.rimPower);\n    material.setParameter('rimIntensity', params.rimIntensity);\n    material.setParameter('rimColor', params.rimColor);\n    material.setParameter('light_color', params.lightColor);\n    material.setParameter('light_direction', params.lightDirection);\n    material.setParameter('light_intensity', params.lightIntensity);\n    material.setParameter('material_diffuse', params.materialDiffuse);\n    material.setParameter('material_emissive', params.materialEmissive);\n    material.setParameter('material_opacity', params.materialOpacity);\n    material.setParameter('depthBlur', params.depthBlur);\n    material.setParameter('pixelSize', params.pixelSize);\n    material.setParameter('screenResolution', params.screenResolution);\n    material.setParameter('hitFlash', params.hitFlash);\n    material.setParameter('hitFlashColor', params.hitFlashColor);\n    material.setParameter('characterHighlight', params.characterHighlight);\n  }\n}\n", "\n/**\n * Sprite Normal Mapping Shader for HD-2D 2D Sprites\n * Adds depth and lighting to flat 2D character sprites using normal maps\n * Converted from GLSL to TypeScript\n */\n\nexport class SpriteNormalMappingShader {\n  static readonly vertexShader = `\n    // ========== VERTEX SHADER ==========\n    attribute vec3 vertex_position;\n    attribute vec2 vertex_texCoord0;\n    attribute vec3 vertex_normal;\n    attribute vec3 vertex_tangent;\n\n    uniform mat4 matrix_model;\n    uniform mat4 matrix_view;\n    uniform mat4 matrix_projection;\n    uniform mat4 matrix_normal;\n\n    // Camera position\n    uniform vec3 view_position;\n\n    // Light positions (multiple lights for HD-2D)\n    uniform vec3 light_position_0;\n    uniform vec3 light_position_1;\n    uniform vec3 light_position_2;\n\n    // Output to fragment shader\n    varying vec2 vUv0;\n    varying vec3 vWorldPosition;\n    varying vec3 vWorldNormal;\n    varying vec3 vWorldTangent;\n    varying vec3 vWorldBitangent;\n    varying vec3 vViewDirection;\n\n    // Light directions in tangent space\n    varying vec3 vLightDirection0_TS;\n    varying vec3 vLightDirection1_TS;\n    varying vec3 vLightDirection2_TS;\n    varying vec3 vViewDirection_TS;\n\n    void main(void) {\n        // Transform vertex to world space\n        vec4 worldPosition = matrix_model * vec4(vertex_position, 1.0);\n        vWorldPosition = worldPosition.xyz;\n        \n        // Transform normal and tangent to world space\n        vWorldNormal = normalize((matrix_normal * vec4(vertex_normal, 0.0)).xyz);\n        vWorldTangent = normalize((matrix_normal * vec4(vertex_tangent, 0.0)).xyz);\n        vWorldBitangent = cross(vWorldNormal, vWorldTangent);\n        \n        // Create tangent-to-world matrix\n        mat3 TBN = mat3(vWorldTangent, vWorldBitangent, vWorldNormal);\n        mat3 worldToTangent = transpose(TBN);\n        \n        // Calculate view direction\n        vViewDirection = normalize(view_position - vWorldPosition);\n        vViewDirection_TS = worldToTangent * vViewDirection;\n        \n        // Calculate light directions in tangent space\n        vec3 lightDir0 = normalize(light_position_0 - vWorldPosition);\n        vec3 lightDir1 = normalize(light_position_1 - vWorldPosition);\n        vec3 lightDir2 = normalize(light_position_2 - vWorldPosition);\n        \n        vLightDirection0_TS = worldToTangent * lightDir0;\n        vLightDirection1_TS = worldToTangent * lightDir1;\n        vLightDirection2_TS = worldToTangent * lightDir2;\n        \n        // Pass texture coordinates\n        vUv0 = vertex_texCoord0;\n        \n        // Final vertex position\n        gl_Position = matrix_projection * matrix_view * worldPosition;\n    }\n  `;\n\n  static readonly fragmentShader = `\n    // ========== FRAGMENT SHADER ==========\n    #ifdef GL_ES\n    precision highp float;\n    #endif\n\n    // Input from vertex shader\n    varying vec2 vUv0;\n    varying vec3 vWorldPosition;\n    varying vec3 vWorldNormal;\n    varying vec3 vWorldTangent;\n    varying vec3 vWorldBitangent;\n    varying vec3 vViewDirection;\n\n    varying vec3 vLightDirection0_TS;\n    varying vec3 vLightDirection1_TS;\n    varying vec3 vLightDirection2_TS;\n    varying vec3 vViewDirection_TS;\n\n    // Texture uniforms\n    uniform sampler2D texture_diffuseMap;\n    uniform sampler2D texture_normalMap;\n    uniform sampler2D texture_specularMap;\n\n    // Material properties\n    uniform vec3 material_diffuse;\n    uniform vec3 material_specular;\n    uniform float material_shininess;\n    uniform float material_opacity;\n\n    // Light properties\n    uniform vec3 light_color_0;\n    uniform vec3 light_color_1;\n    uniform vec3 light_color_2;\n    uniform float light_intensity_0;\n    uniform float light_intensity_1;\n    uniform float light_intensity_2;\n\n    // HD-2D specific parameters\n    uniform float normalMapStrength;\n    uniform float spriteDepth;\n    uniform vec2 spritePixelSize;\n    uniform float pixelPerfect;\n\n    // Fighting game effects\n    uniform float hitFlash;\n    uniform vec3 hitFlashColor;\n    uniform float stunEffect;\n    uniform float counterHitGlow;\n    uniform vec3 playerTint; // P1/P2 color tinting\n\n    // Animation parameters\n    uniform float animationFrame;\n    uniform vec2 spriteSheetSize;\n    uniform vec2 frameSize;\n\n    vec2 getSpriteUV(vec2 baseUV) {\n        if (animationFrame <= 0.0) return baseUV;\n        \n        // Calculate sprite sheet coordinates\n        float frameX = mod(animationFrame, spriteSheetSize.x);\n        float frameY = floor(animationFrame / spriteSheetSize.x);\n        \n        vec2 frameOffset = vec2(frameX, frameY) * frameSize;\n        return frameOffset + baseUV * frameSize;\n    }\n\n    vec3 sampleNormalMap(vec2 uv) {\n        vec3 normal = texture2D(texture_normalMap, uv).rgb;\n        normal = normal * 2.0 - 1.0; // Convert from [0,1] to [-1,1]\n        \n        // Adjust normal map strength for HD-2D effect\n        normal.xy *= normalMapStrength;\n        normal = normalize(normal);\n        \n        return normal;\n    }\n\n    vec3 calculateLighting(vec3 normal, vec3 lightDir, vec3 lightColor, float lightIntensity, vec3 viewDir) {\n        // Diffuse lighting\n        float NdotL = max(dot(normal, lightDir), 0.0);\n        vec3 diffuse = lightColor * lightIntensity * NdotL;\n        \n        // Specular lighting (Blinn-Phong)\n        vec3 halfVector = normalize(lightDir + viewDir);\n        float NdotH = max(dot(normal, halfVector), 0.0);\n        float specularPower = pow(NdotH, material_shininess);\n        vec3 specular = material_specular * lightColor * specularPower * lightIntensity;\n        \n        return diffuse + specular;\n    }\n\n    vec3 applyPixelPerfectFiltering(vec3 color, vec2 uv) {\n        if (pixelPerfect <= 0.0) return color;\n        \n        // Snap UV coordinates to pixel boundaries\n        vec2 pixelUV = floor(uv * spritePixelSize) / spritePixelSize;\n        \n        // Sample with nearest neighbor filtering\n        return texture2D(texture_diffuseMap, pixelUV).rgb * material_diffuse;\n    }\n\n    void main(void) {\n        // Get sprite sheet UV coordinates\n        vec2 spriteUV = getSpriteUV(vUv0);\n        \n        // Sample base diffuse texture\n        vec4 baseColor = texture2D(texture_diffuseMap, spriteUV);\n        vec3 diffuse = baseColor.rgb * material_diffuse;\n        \n        // Early discard for transparent pixels (important for sprites)\n        if (baseColor.a < 0.1) discard;\n        \n        // Sample normal map and convert to tangent space\n        vec3 normalTS = sampleNormalMap(spriteUV);\n        \n        // Sample specular map if available\n        vec3 specularMask = texture2D(texture_specularMap, spriteUV).rgb;\n        \n        // Calculate lighting for each light source\n        vec3 totalLighting = vec3(0.0);\n        \n        // Light 0 (Key light)\n        totalLighting += calculateLighting(\n            normalTS, \n            normalize(vLightDirection0_TS), \n            light_color_0, \n            light_intensity_0,\n            normalize(vViewDirection_TS)\n        );\n        \n        // Light 1 (Fill light)\n        totalLighting += calculateLighting(\n            normalTS, \n            normalize(vLightDirection1_TS), \n            light_color_1, \n            light_intensity_1,\n            normalize(vViewDirection_TS)\n        );\n        \n        // Light 2 (Rim light)\n        totalLighting += calculateLighting(\n            normalTS, \n            normalize(vLightDirection2_TS), \n            light_color_2, \n            light_intensity_2,\n            normalize(vViewDirection_TS)\n        );\n        \n        // Apply specular mask\n        totalLighting *= (1.0 + specularMask * 0.5);\n        \n        // Combine diffuse and lighting\n        vec3 finalColor = diffuse * totalLighting;\n        \n        // Apply player tinting (P1 warm, P2 cool)\n        finalColor = mix(finalColor, finalColor * playerTint, 0.1);\n        \n        // Apply depth-based darkening for sprite layering\n        if (spriteDepth > 0.0) {\n            float depthFactor = 1.0 - spriteDepth * 0.2;\n            finalColor *= depthFactor;\n        }\n        \n        // Fighting game specific effects\n        \n        // Hit flash effect\n        if (hitFlash > 0.0) {\n            finalColor = mix(finalColor, hitFlashColor, hitFlash);\n        }\n        \n        // Stun effect (desaturation + blur simulation)\n        if (stunEffect > 0.0) {\n            float luminance = dot(finalColor, vec3(0.299, 0.587, 0.114));\n            finalColor = mix(finalColor, vec3(luminance), stunEffect * 0.7);\n            \n            // Add slight blue tint for stun\n            finalColor += vec3(0.0, 0.1, 0.2) * stunEffect * 0.3;\n        }\n        \n        // Counter hit glow effect\n        if (counterHitGlow > 0.0) {\n            vec3 glowColor = vec3(1.0, 0.4, 0.4); // Red glow\n            finalColor += glowColor * counterHitGlow * 0.5;\n        }\n        \n        // Pixel perfect rendering option\n        if (pixelPerfect > 0.0) {\n            diffuse = applyPixelPerfectFiltering(diffuse, spriteUV);\n            finalColor = mix(finalColor, diffuse * totalLighting, pixelPerfect);\n        }\n        \n        // Apply opacity\n        float alpha = baseColor.a * material_opacity;\n        \n        gl_FragColor = vec4(finalColor, alpha);\n    }\n  `;\n\n  public static createMaterial(device: any): any {\n    const material = new device.StandardMaterial();\n    material.chunks.VS_TRANSFORM = this.vertexShader;\n    material.chunks.PS_OUTPUT = this.fragmentShader;\n    return material;\n  }\n\n  public static setUniforms(material: any, params: {\n    viewPosition: [number, number, number];\n    lightPosition0: [number, number, number];\n    lightPosition1: [number, number, number];\n    lightPosition2: [number, number, number];\n    lightColor0: [number, number, number];\n    lightColor1: [number, number, number];\n    lightColor2: [number, number, number];\n    lightIntensity0: number;\n    lightIntensity1: number;\n    lightIntensity2: number;\n    materialDiffuse: [number, number, number];\n    materialSpecular: [number, number, number];\n    materialShininess: number;\n    materialOpacity: number;\n    normalMapStrength: number;\n    spriteDepth: number;\n    spritePixelSize: [number, number];\n    pixelPerfect: number;\n    hitFlash: number;\n    hitFlashColor: [number, number, number];\n    stunEffect: number;\n    counterHitGlow: number;\n    playerTint: [number, number, number];\n    animationFrame: number;\n    spriteSheetSize: [number, number];\n    frameSize: [number, number];\n  }): void {\n    material.setParameter('view_position', params.viewPosition);\n    material.setParameter('light_position_0', params.lightPosition0);\n    material.setParameter('light_position_1', params.lightPosition1);\n    material.setParameter('light_position_2', params.lightPosition2);\n    material.setParameter('light_color_0', params.lightColor0);\n    material.setParameter('light_color_1', params.lightColor1);\n    material.setParameter('light_color_2', params.lightColor2);\n    material.setParameter('light_intensity_0', params.lightIntensity0);\n    material.setParameter('light_intensity_1', params.lightIntensity1);\n    material.setParameter('light_intensity_2', params.lightIntensity2);\n    material.setParameter('material_diffuse', params.materialDiffuse);\n    material.setParameter('material_specular', params.materialSpecular);\n    material.setParameter('material_shininess', params.materialShininess);\n    material.setParameter('material_opacity', params.materialOpacity);\n    material.setParameter('normalMapStrength', params.normalMapStrength);\n    material.setParameter('spriteDepth', params.spriteDepth);\n    material.setParameter('spritePixelSize', params.spritePixelSize);\n    material.setParameter('pixelPerfect', params.pixelPerfect);\n    material.setParameter('hitFlash', params.hitFlash);\n    material.setParameter('hitFlashColor', params.hitFlashColor);\n    material.setParameter('stunEffect', params.stunEffect);\n    material.setParameter('counterHitGlow', params.counterHitGlow);\n    material.setParameter('playerTint', params.playerTint);\n    material.setParameter('animationFrame', params.animationFrame);\n    material.setParameter('spriteSheetSize', params.spriteSheetSize);\n    material.setParameter('frameSize', params.frameSize);\n  }\n}\n", "\n/**\n * Depth-Based Post-Processing Shader for HD-2D Effects\n * Implements depth-of-field, volumetric fog, and atmospheric effects\n * Converted from GLSL to TypeScript\n */\n\nexport class DepthPostProcessShader {\n  static readonly vertexShader = `\n    // ========== VERTEX SHADER ==========\n    attribute vec3 vertex_position;\n    attribute vec2 vertex_texCoord0;\n\n    uniform mat4 matrix_model;\n    uniform mat4 matrix_view;\n    uniform mat4 matrix_projection;\n\n    varying vec2 vUv0;\n\n    void main(void) {\n        vUv0 = vertex_texCoord0;\n        gl_Position = matrix_projection * matrix_view * matrix_model * vec4(vertex_position, 1.0);\n    }\n  `;\n\n  static readonly fragmentShader = `\n    // ========== FRAGMENT SHADER ==========\n    #ifdef GL_ES\n    precision highp float;\n    #endif\n\n    varying vec2 vUv0;\n\n    // Input textures\n    uniform sampler2D texture_colorBuffer;\n    uniform sampler2D texture_depthBuffer;\n\n    // Screen resolution\n    uniform vec2 uScreenSize;\n    uniform vec2 uInvScreenSize;\n\n    // Camera parameters\n    uniform float uNearClip;\n    uniform float uFarClip;\n    uniform vec3 uCameraPosition;\n    uniform mat4 uViewMatrix;\n    uniform mat4 uProjectionMatrix;\n\n    // Depth-of-field parameters\n    uniform float uFocusDistance;\n    uniform float uFocusRange;\n    uniform float uBokehRadius;\n    uniform float uBokehIntensity;\n    uniform int uDofSamples;\n\n    // Volumetric fog parameters\n    uniform vec3 uFogColor;\n    uniform float uFogDensity;\n    uniform float uFogStart;\n    uniform float uFogEnd;\n    uniform vec3 uLightPosition;\n    uniform vec3 uLightColor;\n    uniform float uLightScattering;\n\n    // HD-2D atmospheric effects\n    uniform float uAtmosphericPerspective;\n    uniform vec3 uAtmosphereColor;\n    uniform float uHeatHaze;\n    uniform float uColorSeparation;\n\n    // Fighting game specific\n    uniform float uScreenShake;\n    uniform vec2 uScreenShakeOffset;\n    uniform float uTimeScale;\n    uniform float uTime;\n\n    // Utility functions\n    float linearizeDepth(float depth) {\n        float z = depth * 2.0 - 1.0; // Convert from [0,1] to [-1,1]\n        return (2.0 * uNearClip * uFarClip) / (uFarClip + uNearClip - z * (uFarClip - uNearClip));\n    }\n\n    float getDepth(vec2 uv) {\n        return linearizeDepth(texture2D(texture_depthBuffer, uv).r);\n    }\n\n    vec3 getWorldPositionFromDepth(vec2 uv, float depth) {\n        vec4 clipSpacePosition = vec4(uv * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);\n        vec4 viewSpacePosition = inverse(uProjectionMatrix) * clipSpacePosition;\n        viewSpacePosition /= viewSpacePosition.w;\n        vec4 worldSpacePosition = inverse(uViewMatrix) * viewSpacePosition;\n        return worldSpacePosition.xyz;\n    }\n\n    // Gaussian blur for depth-of-field\n    vec3 gaussianBlur(sampler2D tex, vec2 uv, vec2 direction, float radius, int samples) {\n        vec3 color = vec3(0.0);\n        float totalWeight = 0.0;\n        \n        float step = radius / float(samples);\n        \n        for (int i = -samples; i <= samples; i++) {\n            vec2 offset = direction * step * float(i);\n            vec2 sampleUV = uv + offset * uInvScreenSize;\n            \n            // Check bounds\n            if (sampleUV.x >= 0.0 && sampleUV.x <= 1.0 && sampleUV.y >= 0.0 && sampleUV.y <= 1.0) {\n                float weight = exp(-0.5 * pow(float(i) / float(samples), 2.0));\n                color += texture2D(tex, sampleUV).rgb * weight;\n                totalWeight += weight;\n            }\n        }\n        \n        return color / totalWeight;\n    }\n\n    // Bokeh blur for depth-of-field\n    vec3 bokehBlur(sampler2D tex, vec2 uv, float radius) {\n        vec3 color = vec3(0.0);\n        float totalWeight = 0.0;\n        \n        // Hexagonal bokeh pattern\n        const int samples = 19;\n        const vec2 offsets[19] = vec2[](\n            vec2(0.0, 0.0),\n            vec2(0.0, 1.0), vec2(0.866, 0.5), vec2(0.866, -0.5), \n            vec2(0.0, -1.0), vec2(-0.866, -0.5), vec2(-0.866, 0.5),\n            vec2(0.0, 2.0), vec2(1.732, 1.0), vec2(1.732, -1.0),\n            vec2(0.0, -2.0), vec2(-1.732, -1.0), vec2(-1.732, 1.0),\n            vec2(1.5, 0.866), vec2(1.5, -0.866), vec2(-1.5, -0.866), vec2(-1.5, 0.866),\n            vec2(0.866, 1.5), vec2(-0.866, 1.5)\n        );\n        \n        for (int i = 0; i < samples; i++) {\n            vec2 offset = offsets[i] * radius * uInvScreenSize;\n            vec2 sampleUV = uv + offset;\n            \n            if (sampleUV.x >= 0.0 && sampleUV.x <= 1.0 && sampleUV.y >= 0.0 && sampleUV.y <= 1.0) {\n                float weight = 1.0;\n                if (i > 0) weight = 0.7; // Reduce weight for outer samples\n                \n                color += texture2D(tex, sampleUV).rgb * weight;\n                totalWeight += weight;\n            }\n        }\n        \n        return color / totalWeight;\n    }\n\n    // Calculate depth-of-field blur amount\n    float calculateDofBlur(float depth) {\n        float distance = abs(depth - uFocusDistance);\n        float blur = smoothstep(0.0, uFocusRange, distance);\n        return blur * uBokehRadius;\n    }\n\n    // Volumetric fog calculation\n    vec3 calculateVolumetricFog(vec2 uv, float depth, vec3 worldPos) {\n        // Calculate fog factor based on distance\n        float fogFactor = smoothstep(uFogStart, uFogEnd, depth);\n        fogFactor *= uFogDensity;\n        \n        // Calculate light scattering\n        vec3 lightDir = normalize(uLightPosition - worldPos);\n        vec3 viewDir = normalize(uCameraPosition - worldPos);\n        float scattering = pow(max(dot(lightDir, viewDir), 0.0), 8.0);\n        \n        // Combine fog color with light scattering\n        vec3 fogColorWithLight = mix(uFogColor, uLightColor, scattering * uLightScattering);\n        \n        return fogColorWithLight * fogFactor;\n    }\n\n    // Atmospheric perspective\n    vec3 applyAtmosphericPerspective(vec3 color, float depth) {\n        float atmosphereFactor = smoothstep(10.0, 50.0, depth) * uAtmosphericPerspective;\n        return mix(color, uAtmosphereColor, atmosphereFactor);\n    }\n\n    // Heat haze effect\n    vec2 applyHeatHaze(vec2 uv, float time) {\n        if (uHeatHaze <= 0.0) return uv;\n        \n        float wave1 = sin(uv.y * 30.0 + time * 5.0) * 0.003;\n        float wave2 = sin(uv.y * 45.0 + time * 3.0) * 0.002;\n        \n        return uv + vec2(wave1 + wave2, 0.0) * uHeatHaze;\n    }\n\n    // Chromatic aberration for impact effects\n    vec3 applyChromaticAberration(sampler2D tex, vec2 uv, float amount) {\n        if (amount <= 0.0) return texture2D(tex, uv).rgb;\n        \n        vec2 offset = (uv - 0.5) * amount * 0.01;\n        \n        float r = texture2D(tex, uv + offset).r;\n        float g = texture2D(tex, uv).g;\n        float b = texture2D(tex, uv - offset).b;\n        \n        return vec3(r, g, b);\n    }\n\n    // Screen shake effect\n    vec2 applyScreenShake(vec2 uv) {\n        if (uScreenShake <= 0.0) return uv;\n        \n        vec2 shake = uScreenShakeOffset * uScreenShake * 0.01;\n        return uv + shake;\n    }\n\n    void main(void) {\n        // Apply screen shake\n        vec2 finalUV = applyScreenShake(vUv0);\n        \n        // Apply heat haze\n        finalUV = applyHeatHaze(finalUV, uTime);\n        \n        // Get depth at current pixel\n        float depth = getDepth(finalUV);\n        vec3 worldPos = getWorldPositionFromDepth(finalUV, depth);\n        \n        // Sample base color\n        vec3 color = texture2D(texture_colorBuffer, finalUV).rgb;\n        \n        // Apply chromatic aberration for impact effects\n        if (uColorSeparation > 0.0) {\n            color = applyChromaticAberration(texture_colorBuffer, finalUV, uColorSeparation);\n        }\n        \n        // Calculate depth-of-field\n        float dofBlur = calculateDofBlur(depth);\n        \n        if (dofBlur > 0.1) {\n            // Apply bokeh blur for out-of-focus areas\n            vec3 blurredColor = bokehBlur(texture_colorBuffer, finalUV, dofBlur);\n            color = mix(color, blurredColor, min(dofBlur * uBokehIntensity, 1.0));\n        }\n        \n        // Apply volumetric fog\n        if (uFogDensity > 0.0) {\n            vec3 fogColor = calculateVolumetricFog(finalUV, depth, worldPos);\n            color = mix(color, fogColor, min(uFogDensity, 0.9));\n        }\n        \n        // Apply atmospheric perspective\n        if (uAtmosphericPerspective > 0.0) {\n            color = applyAtmosphericPerspective(color, depth);\n        }\n        \n        // Time-based effects for fighting games\n        if (uTimeScale != 1.0) {\n            // Slow motion effect - enhance clarity\n            color = mix(color, color * 1.1, (1.0 - uTimeScale) * 0.3);\n        }\n        \n        gl_FragColor = vec4(color, 1.0);\n    }\n  `;\n\n  public static createMaterial(device: any): any {\n    const material = new device.StandardMaterial();\n    material.chunks.VS_TRANSFORM = this.vertexShader;\n    material.chunks.PS_OUTPUT = this.fragmentShader;\n    return material;\n  }\n\n  public static setUniforms(material: any, params: {\n    screenSize: [number, number];\n    nearClip: number;\n    farClip: number;\n    focusDistance: number;\n    focusRange: number;\n    bokehRadius: number;\n    bokehIntensity: number;\n    fogColor: [number, number, number];\n    fogDensity: number;\n    fogStart: number;\n    fogEnd: number;\n    atmosphericPerspective: number;\n    atmosphereColor: [number, number, number];\n    heatHaze: number;\n    colorSeparation: number;\n    screenShake: number;\n    screenShakeOffset: [number, number];\n    timeScale: number;\n    time: number;\n  }): void {\n    material.setParameter('uScreenSize', params.screenSize);\n    material.setParameter('uInvScreenSize', [1.0 / params.screenSize[0], 1.0 / params.screenSize[1]]);\n    material.setParameter('uNearClip', params.nearClip);\n    material.setParameter('uFarClip', params.farClip);\n    material.setParameter('uFocusDistance', params.focusDistance);\n    material.setParameter('uFocusRange', params.focusRange);\n    material.setParameter('uBokehRadius', params.bokehRadius);\n    material.setParameter('uBokehIntensity', params.bokehIntensity);\n    material.setParameter('uFogColor', params.fogColor);\n    material.setParameter('uFogDensity', params.fogDensity);\n    material.setParameter('uFogStart', params.fogStart);\n    material.setParameter('uFogEnd', params.fogEnd);\n    material.setParameter('uAtmosphericPerspective', params.atmosphericPerspective);\n    material.setParameter('uAtmosphereColor', params.atmosphereColor);\n    material.setParameter('uHeatHaze', params.heatHaze);\n    material.setParameter('uColorSeparation', params.colorSeparation);\n    material.setParameter('uScreenShake', params.screenShake);\n    material.setParameter('uScreenShakeOffset', params.screenShakeOffset);\n    material.setParameter('uTimeScale', params.timeScale);\n    material.setParameter('uTime', params.time);\n  }\n}\n", "export class StageStormySkyShader {\n\tstatic readonly vertexShader = `\n\t\tattribute vec3 vertex_position;\n\t\tattribute vec2 vertex_texCoord0;\n\t\tuniform mat4 matrix_model;\n\t\tuniform mat4 matrix_view;\n\t\tuniform mat4 matrix_projection;\n\t\tvarying vec2 vUv0;\n\t\tvoid main(){\n\t\t\tvUv0 = vertex_texCoord0;\n\t\t\tgl_Position = matrix_projection * matrix_view * matrix_model * vec4(vertex_position,1.0);\n\t\t}\n\t`;\n\n\tstatic readonly fragmentShader = `\n\t\t#ifdef GL_ES\n\t\tprecision mediump float;\n\t\t#endif\n\t\tvarying vec2 vUv0;\n\t\tuniform sampler2D texture_diffuseMap;\n\t\tuniform vec2 uScrollSpeed;\n\t\tuniform float uTime;\n\t\tuniform vec4 uTint;\n\t\tvoid main(){\n\t\t\tvec2 uv = vUv0 + uScrollSpeed * uTime * 0.001;\n\t\t\tvec4 col = texture2D(texture_diffuseMap, uv);\n\t\t\tgl_FragColor = vec4(col.rgb * uTint.rgb, col.a * uTint.a);\n\t\t}\n\t`;\n}", "export interface ProcStageOptions {\n\tseed?: number;\n\ttheme?: 'training' | 'gothic' | 'urban';\n}\n\nexport class ProceduralStageGenerator {\n\tprivate rng: () => number;\n\n\tconstructor(seed: number = Date.now()) {\n\t\tthis.rng = mulberry32(seed >>> 0);\n\t}\n\n\tgenerate(opts: ProcStageOptions = {}): any {\n\t\tconst theme = opts.theme || 'training';\n\t\tswitch (theme) {\n\t\t\tcase 'urban':\n\t\t\t\treturn this.urban();\n\t\t\tcase 'gothic':\n\t\t\t\treturn this.gothic();\n\t\t\tdefault:\n\t\t\t\treturn this.training();\n\t\t}\n\t}\n\n\tprivate training(): any {\n\t\treturn {\n\t\t\tname: 'Training (Procedural)',\n\t\t\tlayers: {\n\t\t\t\tskybox: { type: 'gradient', elements: [] },\n\t\t\t\tfarBackground: { type: 'mountains', elements: this.mountains(3) },\n\t\t\t\tmidBackground: { type: 'buildings', elements: this.buildings(4) },\n\t\t\t\tnearBackground: { type: 'trees', elements: this.trees(3) },\n\t\t\t\tplayground: { type: 'stage_floor', elements: [{ type: 'platform', x: 0, y: -5, width: 40, height: 2 }] }\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate gothic(): any {\n\t\treturn {\n\t\t\tname: 'Gothic (Procedural)',\n\t\t\tlayers: {\n\t\t\t\tskybox: { type: 'stormy_sky', elements: [{ type: 'plane', name: 'stormy_sky' }] },\n\t\t\t\tfarBackground: { type: 'mountains', elements: this.mountains(2) },\n\t\t\t\tmidBackground: { type: 'castle', elements: this.buildings(3) },\n\t\t\t\tnearBackground: { type: 'gargoyles', elements: this.trees(2) },\n\t\t\t\tplayground: { type: 'cobblestone', elements: [{ type: 'platform', x: 0, y: -5, width: 40, height: 2 }] }\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate urban(): any {\n\t\treturn {\n\t\t\tname: 'Urban (Procedural)',\n\t\t\tlayers: {\n\t\t\t\tskybox: { type: 'cityscape', elements: [] },\n\t\t\t\tfarBackground: { type: 'cityscape', elements: this.buildings(5) },\n\t\t\t\tmidBackground: { type: 'street', elements: this.buildings(3) },\n\t\t\t\tnearBackground: { type: 'crowd', elements: this.buildings(2) },\n\t\t\t\tplayground: { type: 'street_stage', elements: [{ type: 'asphalt', x: 0, y: -5, width: 50, height: 3 }] }\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate mountains(n: number) {\n\t\tconst arr = [] as any[];\n\t\tfor (let i = 0; i < n; i++) arr.push({ type: 'mountain', x: (i - n/2) * 100, y: -20 + this.rand(-5,5), width: this.rand(30,50), height: this.rand(20,30), color: '#4A5568' });\n\t\treturn arr;\n\t}\n\tprivate buildings(n: number) {\n\t\tconst arr = [] as any[];\n\t\tfor (let i = 0; i < n; i++) arr.push({ type: 'building', x: (i - n/2) * 80, y: -10, width: this.rand(20,60), height: this.rand(40,120), color: '#6B7280' });\n\t\treturn arr;\n\t}\n\tprivate trees(n: number) {\n\t\tconst arr = [] as any[];\n\t\tfor (let i = 0; i < n; i++) arr.push({ type: 'tree', x: (i - n/2) * 60, y: -6, scale: this.rand(1.0, 2.0), sway: true });\n\t\treturn arr;\n\t}\n\tprivate rand(min: number, max: number) { return min + (max - min) * this.rng(); }\n}\n\nfunction mulberry32(a: number) {\n\treturn function() {\n\t\ta |= 0; a = a + 0x6D2B79F5 | 0; let t = Math.imul(a ^ a >>> 15, 1 | a);\n\t\tt = t + Math.imul(t ^ t >>> 7, 61 | t) ^ t; return ((t ^ t >>> 14) >>> 0) / 4294967296;\n\t};\n}", "\nimport * as pc from 'playcanvas';\n\nexport interface PlayerInputs {\n  up: boolean;\n  down: boolean;\n  left: boolean;\n  right: boolean;\n  lightPunch: boolean;\n  mediumPunch: boolean;\n  heavyPunch: boolean;\n  lightKick: boolean;\n  mediumKick: boolean;\n  heavyKick: boolean;\n  hadoken: boolean;\n  shoryuken: boolean;\n  tatsumaki: boolean;\n}\n\nexport class InputManager {\n  private app: pc.Application;\n  private player1Inputs: PlayerInputs;\n  private player2Inputs: PlayerInputs;\n  private keyboard: pc.Keyboard;\n  private gamepads: pc.GamePads;\n\n  constructor(app: pc.Application) {\n    this.app = app;\n    this.keyboard = app.keyboard;\n    this.gamepads = app.gamepads;\n    \n    this.player1Inputs = this.createEmptyInputs();\n    this.player2Inputs = this.createEmptyInputs();\n    \n    this.setupKeyboardBindings();\n  }\n\n  private createEmptyInputs(): PlayerInputs {\n    return {\n      up: false,\n      down: false,\n      left: false,\n      right: false,\n      lightPunch: false,\n      mediumPunch: false,\n      heavyPunch: false,\n      lightKick: false,\n      mediumKick: false,\n      heavyKick: false,\n      hadoken: false,\n      shoryuken: false,\n      tatsumaki: false\n    };\n  }\n\n  private setupKeyboardBindings(): void {\n    // Player 1 controls using PlayCanvas keycodes to ensure compatibility\n    this.keyboard.on(pc.EVENT_KEYDOWN as any, (e: any) => {\n      switch (e.key) {\n        case pc.KEY_W: this.player1Inputs.up = true; break;\n        case pc.KEY_S: this.player1Inputs.down = true; break;\n        case pc.KEY_A: this.player1Inputs.left = true; break;\n        case pc.KEY_D: this.player1Inputs.right = true; break;\n        case pc.KEY_U: this.player1Inputs.lightPunch = true; break;\n        case pc.KEY_I: this.player1Inputs.mediumPunch = true; break;\n        case pc.KEY_O: this.player1Inputs.heavyPunch = true; break;\n        case pc.KEY_J: this.player1Inputs.lightKick = true; break;\n        case pc.KEY_K: this.player1Inputs.mediumKick = true; break;\n        case pc.KEY_L: this.player1Inputs.heavyKick = true; break;\n      }\n    });\n\n    this.keyboard.on(pc.EVENT_KEYUP as any, (e: any) => {\n      switch (e.key) {\n        case pc.KEY_W: this.player1Inputs.up = false; break;\n        case pc.KEY_S: this.player1Inputs.down = false; break;\n        case pc.KEY_A: this.player1Inputs.left = false; break;\n        case pc.KEY_D: this.player1Inputs.right = false; break;\n        case pc.KEY_U: this.player1Inputs.lightPunch = false; break;\n        case pc.KEY_I: this.player1Inputs.mediumPunch = false; break;\n        case pc.KEY_O: this.player1Inputs.heavyPunch = false; break;\n        case pc.KEY_J: this.player1Inputs.lightKick = false; break;\n        case pc.KEY_K: this.player1Inputs.mediumKick = false; break;\n        case pc.KEY_L: this.player1Inputs.heavyKick = false; break;\n      }\n    });\n  }\n\n  public getPlayerInputs(playerIndex: number): PlayerInputs {\n    return playerIndex === 0 ? this.player1Inputs : this.player2Inputs;\n  }\n\n  public update(): void {\n    // Update gamepad inputs if connected\n    this.updateGamepadInputs();\n    \n    // Update special move detection\n    this.updateSpecialMoves();\n  }\n\n  private updateGamepadInputs(): void {\n    const pads = this.gamepads.poll();\n    const gamepad = pads[0];\n    if (gamepad) {\n      // Map gamepad inputs to player 1\n      this.player1Inputs.left = gamepad.isPressed(pc.PAD_L_STICK_BUTTON) || gamepad.isPressed(pc.PAD_LEFT);\n      this.player1Inputs.right = gamepad.isPressed(pc.PAD_RIGHT);\n      this.player1Inputs.up = gamepad.isPressed(pc.PAD_UP);\n      this.player1Inputs.down = gamepad.isPressed(pc.PAD_DOWN);\n\n      this.player1Inputs.lightPunch = gamepad.isPressed(pc.PAD_FACE_1);\n      this.player1Inputs.mediumPunch = gamepad.isPressed(pc.PAD_FACE_2);\n      this.player1Inputs.heavyPunch = gamepad.isPressed(pc.PAD_R_SHOULDER_1);\n      this.player1Inputs.lightKick = gamepad.isPressed(pc.PAD_FACE_3);\n      this.player1Inputs.mediumKick = gamepad.isPressed(pc.PAD_FACE_4);\n      this.player1Inputs.heavyKick = gamepad.isPressed(pc.PAD_R_SHOULDER_2);\n    }\n  }\n\n  private updateSpecialMoves(): void {\n    // Simple special move detection (should be expanded with proper motion buffer)\n    this.player1Inputs.hadoken = this.detectHadoken(this.player1Inputs);\n    this.player2Inputs.hadoken = this.detectHadoken(this.player2Inputs);\n  }\n\n  private detectHadoken(inputs: PlayerInputs): boolean {\n    // Simplified hadoken detection (down -> forward + punch)\n    return inputs.down && inputs.right && inputs.lightPunch;\n  }\n}\n", "import * as pc from 'playcanvas';\n\nexport class UIManager {\n\tprivate app: pc.Application;\n\tprivate root: pc.Entity | null = null;\n\tprivate menu: pc.Entity | null = null;\n\tprivate hud: pc.Entity | null = null;\n\n\tconstructor(app: pc.Application) {\n\t\tthis.app = app;\n\t}\n\n\tpublic async initialize(): Promise<void> {\n\t\tthis.root = new pc.Entity('UIRoot');\n\t\tthis.root.addComponent('screen', {\n\t\t\treferenceResolution: new pc.Vec2(1920, 1080),\n\t\t\tscaleMode: pc.SCALEMODE_BLEND,\n\t\t\tscaleBlend: 0.5,\n\t\t\tscreenSpace: true\n\t\t});\n\t\tthis.app.root.addChild(this.root);\n\t}\n\n\tpublic showMenu(): void {\n\t\tthis.hideHUD();\n\t\tif (this.menu) { this.menu.enabled = true; return; }\n\t\tthis.menu = new pc.Entity('MenuUI');\n\t\tthis.menu.addComponent('element', { type: pc.ELEMENTTYPE_GROUP, anchor: new pc.Vec4(0,0,1,1) });\n\t\tconst label = new pc.Entity('MenuLabel');\n\t\tlabel.addComponent('element', { type: pc.ELEMENTTYPE_TEXT, text: 'Press Enter to Start', fontSize: 48, pivot: new pc.Vec2(0.5,0.5), anchor: new pc.Vec4(0.5,0.5,0.5,0.5) });\n\t\tthis.menu.addChild(label);\n\t\tthis.root?.addChild(this.menu);\n\t}\n\n\tpublic hideMenu(): void {\n\t\tif (this.menu) this.menu.enabled = false;\n\t}\n\n\tpublic showHUD(): void {\n\t\tthis.hideMenu();\n\t\tif (this.hud) { this.hud.enabled = true; return; }\n\t\tthis.hud = new pc.Entity('MatchHUD');\n\t\tthis.hud.addComponent('element', { type: pc.ELEMENTTYPE_GROUP, anchor: new pc.Vec4(0,0,1,1) });\n\t\tconst p1 = new pc.Entity('P1');\n\t\tp1.addComponent('element', { type: pc.ELEMENTTYPE_TEXT, text: 'P1: 1000', fontSize: 32, anchor: new pc.Vec4(0,1,0,1), pivot: new pc.Vec2(0,1) });\n\t\tconst p2 = new pc.Entity('P2');\n\t\tp2.addComponent('element', { type: pc.ELEMENTTYPE_TEXT, text: 'P2: 1000', fontSize: 32, anchor: new pc.Vec4(1,1,1,1), pivot: new pc.Vec2(1,1) });\n\t\tthis.hud.addChild(p1);\n\t\tthis.hud.addChild(p2);\n\t\tthis.root?.addChild(this.hud);\n\t}\n\n\tpublic hideHUD(): void {\n\t\tif (this.hud) this.hud.enabled = false;\n\t}\n\n\tpublic updateHUD(p1Health: number, p2Health: number): void {\n\t\tif (!this.hud) return;\n\t\tconst p1 = this.hud.findByName('P1');\n\t\tconst p2 = this.hud.findByName('P2');\n\t\tif (p1 && p1.element) {\n\t\t\tp1.element.text = `P1: ${Math.max(0, Math.floor(p1Health))}`;\n\t\t}\n\t\tif (p2 && p2.element) {\n\t\t\tp2.element.text = `P2: ${Math.max(0, Math.floor(p2Health))}`;\n\t\t}\n\t}\n}\n\n", "/**\n * PostProcessingManager - HD-2D Post-Processing Effects\n * Implements Octopath Traveler style post-processing: depth-of-field, bloom, color grading\n * Features: Real-time DOF, volumetric lighting, cinematic color grading\n */\n\nimport * as pc from 'playcanvas';\nimport { ShaderUtils } from '../../core/graphics/ShaderUtils';\nimport { ISystem } from '../../../types/core';\nimport { PostProcessEffect, PostProcessingState, ScreenShake, HitFlash, SlowMotion } from '../../../types/graphics';\n\ninterface DepthOfFieldSettings {\n    enabled: boolean;\n    focusDistance: number;\n    focusRange: number;\n    blurRadius: number;\n    maxBlur: number;\n    bokehIntensity: number;\n    adaptiveFocus: boolean;\n}\n\ninterface BloomSettings {\n    enabled: boolean;\n    threshold: number;\n    intensity: number;\n    radius: number;\n    passes: number;\n    quality: string;\n}\n\ninterface ColorGradingSettings {\n    enabled: boolean;\n    contrast: number;\n    saturation: number;\n    brightness: number;\n    warmth: number;\n    vignette: number;\n    filmGrain: number;\n}\n\ninterface LightingEffectsSettings {\n    enabled: boolean;\n    volumetricFog: boolean;\n    lightShafts: boolean;\n    screenSpaceReflections: boolean;\n    ambientOcclusion: boolean;\n}\n\ninterface FightingGameEffects {\n    enabled: boolean;\n    hitPause: boolean;\n    screenShake: ScreenShake;\n    flashEffect: HitFlash;\n    slowMotion: SlowMotion;\n    dramaTicLighting: boolean;\n}\n\ninterface PostProcessingEffects {\n    depthOfField: DepthOfFieldSettings;\n    bloom: BloomSettings;\n    colorGrading: ColorGradingSettings;\n    lightingEffects: LightingEffectsSettings;\n    fightingGameEffects: FightingGameEffects;\n}\n\ninterface RenderTargets {\n    sceneColor: pc.RenderTarget | null;\n    sceneDepth: pc.RenderTarget | null;\n    blurHorizontal: pc.RenderTarget | null;\n    blurVertical: pc.RenderTarget | null;\n    bloom: pc.RenderTarget | null;\n    final: pc.RenderTarget | null;\n}\n\ninterface PostProcessingMaterials {\n    depthOfField: pc.StandardMaterial | null;\n    bloom: pc.StandardMaterial | null;\n    colorGrading: pc.StandardMaterial | null;\n    combine: pc.StandardMaterial | null;\n    blur: pc.StandardMaterial | null;\n}\n\ninterface PostProcessingCameras {\n    postProcess: pc.Entity | null;\n    depth: pc.Entity | null;\n}\n\ninterface QualitySettings {\n    scale: number;\n    minScale: number;\n    maxScale: number;\n}\n\nclass PostProcessingManager implements ISystem {\n    private app: pc.Application;\n    private initialized: boolean = false;\n    \n    // Post-processing configuration\n    private effects: PostProcessingEffects = {\n        depthOfField: {\n            enabled: true,\n            focusDistance: 15.0,\n            focusRange: 5.0,\n            blurRadius: 1.5,\n            maxBlur: 2.0,\n            bokehIntensity: 0.8,\n            adaptiveFocus: true\n        },\n        \n        bloom: {\n            enabled: true,\n            threshold: 0.7,\n            intensity: 0.9,\n            radius: 0.8,\n            passes: 3,\n            quality: 'high'\n        },\n        \n        colorGrading: {\n            enabled: true,\n            contrast: 1.1,\n            saturation: 1.15,\n            brightness: 0.05,\n            warmth: 0.1,\n            vignette: 0.3,\n            filmGrain: 0.15\n        },\n        \n        lightingEffects: {\n            enabled: true,\n            volumetricFog: true,\n            lightShafts: true,\n            screenSpaceReflections: false,\n            ambientOcclusion: true\n        },\n        \n        fightingGameEffects: {\n            enabled: true,\n            hitPause: false,\n            screenShake: { intensity: 0, duration: 0, decay: 0, frequency: 0, active: false },\n            flashEffect: { color: new pc.Color(1, 1, 1), intensity: 0, duration: 0, active: false },\n            slowMotion: { factor: 1.0, duration: 0, active: false },\n            dramaTicLighting: false\n        }\n    };\n    \n    // Render targets for multi-pass rendering\n    private renderTargets: RenderTargets = {\n        sceneColor: null,\n        sceneDepth: null,\n        blurHorizontal: null,\n        blurVertical: null,\n        bloom: null,\n        final: null\n    };\n    \n    // Post-processing materials/shaders\n    private materials: PostProcessingMaterials = {\n        depthOfField: null,\n        bloom: null,\n        colorGrading: null,\n        combine: null,\n        blur: null\n    };\n    \n    // Effect cameras for multi-pass rendering\n    private cameras: PostProcessingCameras = {\n        postProcess: null,\n        depth: null\n    };\n    \n    // Performance settings\n    private quality: string = 'ultra'; // ultra, high, medium, low\n    private resolution: QualitySettings = {\n        scale: 1.0,\n        minScale: 0.5,\n        maxScale: 1.0\n    };\n    \n    // Entities\n    private fullScreenQuad: pc.Entity | null = null;\n\n    constructor(app: pc.Application) {\n        this.app = app;\n    }\n\n    public async initialize(): Promise<void> {\n        console.log('Initializing Post-Processing Manager...');\n        \n        try {\n            // Only enable advanced post-processing when WebGL2 is available\n            const deviceAny = this.app.graphicsDevice as any;\n            const hasWebGL2 = !!(deviceAny && deviceAny.webgl2);\n            if (!hasWebGL2) {\n                console.warn('[PostProcessingManager] WebGL2 not available; disabling post-processing');\n                this.initialized = false;\n                return;\n            }\n            // Create render targets\n            this.createRenderTargets();\n            \n            // Create post-processing materials\n            await this.createPostProcessingMaterials();\n            \n            // Setup post-processing cameras\n            this.setupPostProcessingCameras();\n            \n            // Create effect entities\n            this.createEffectEntities();\n            \n            // Setup render pipeline\n            this.setupRenderPipeline();\n            \n            this.initialized = true;\n            console.log('Post-Processing Manager initialized successfully');\n            \n        } catch (error) {\n            console.error('Failed to initialize Post-Processing Manager:', error);\n            // Avoid failing engine initialization if post-processing init fails\n            this.initialized = false;\n            return;\n        }\n    }\n\n    private createRenderTargets(): void {\n        const device = this.app.graphicsDevice;\n        const width = Math.floor(device.width * this.resolution.scale);\n        const height = Math.floor(device.height * this.resolution.scale);\n        \n        // Main scene color buffer\n        this.renderTargets.sceneColor = new pc.RenderTarget({\n            colorBuffer: new pc.Texture(device, {\n                width: width,\n                height: height,\n                format: pc.PIXELFORMAT_R8_G8_B8_A8,\n                mipmaps: false,\n                addressU: pc.ADDRESS_CLAMP_TO_EDGE,\n                addressV: pc.ADDRESS_CLAMP_TO_EDGE,\n                magFilter: pc.FILTER_LINEAR,\n                minFilter: pc.FILTER_LINEAR\n            }),\n            depthBuffer: true,\n            samples: this.quality === 'ultra' ? 4 : 1\n        });\n        \n        // Depth buffer for DOF\n        this.renderTargets.sceneDepth = new pc.RenderTarget({\n            colorBuffer: new pc.Texture(device, {\n                width: width,\n                height: height,\n                format: pc.PIXELFORMAT_R8_G8_B8_A8,\n                mipmaps: false,\n                addressU: pc.ADDRESS_CLAMP_TO_EDGE,\n                addressV: pc.ADDRESS_CLAMP_TO_EDGE,\n                magFilter: pc.FILTER_LINEAR,\n                minFilter: pc.FILTER_LINEAR\n            }),\n            depthBuffer: false\n        });\n        \n        // Blur targets (half resolution for performance)\n        const blurWidth = Math.floor(width * 0.5);\n        const blurHeight = Math.floor(height * 0.5);\n        \n        this.renderTargets.blurHorizontal = new pc.RenderTarget({\n            colorBuffer: new pc.Texture(device, {\n                width: blurWidth,\n                height: blurHeight,\n                format: pc.PIXELFORMAT_R8_G8_B8_A8,\n                mipmaps: false,\n                addressU: pc.ADDRESS_CLAMP_TO_EDGE,\n                addressV: pc.ADDRESS_CLAMP_TO_EDGE,\n                magFilter: pc.FILTER_LINEAR,\n                minFilter: pc.FILTER_LINEAR\n            }),\n            depthBuffer: false\n        });\n        \n        this.renderTargets.blurVertical = new pc.RenderTarget({\n            colorBuffer: new pc.Texture(device, {\n                width: blurWidth,\n                height: blurHeight,\n                format: pc.PIXELFORMAT_R8_G8_B8_A8,\n                mipmaps: false,\n                addressU: pc.ADDRESS_CLAMP_TO_EDGE,\n                addressV: pc.ADDRESS_CLAMP_TO_EDGE,\n                magFilter: pc.FILTER_LINEAR,\n                minFilter: pc.FILTER_LINEAR\n            }),\n            depthBuffer: false\n        });\n        \n        // Bloom target\n        this.renderTargets.bloom = new pc.RenderTarget({\n            colorBuffer: new pc.Texture(device, {\n                width: blurWidth,\n                height: blurHeight,\n                format: pc.PIXELFORMAT_R8_G8_B8_A8,\n                mipmaps: false,\n                addressU: pc.ADDRESS_CLAMP_TO_EDGE,\n                addressV: pc.ADDRESS_CLAMP_TO_EDGE,\n                magFilter: pc.FILTER_LINEAR,\n                minFilter: pc.FILTER_LINEAR\n            }),\n            depthBuffer: false\n        });\n        \n        console.log('Post-processing render targets created');\n    }\n\n    private async createPostProcessingMaterials(): Promise<void> {\n        // Depth material driven by our TS shader\n        const depthMat = ShaderUtils.createDepthPostProcessMaterial(this.app) as unknown as pc.StandardMaterial;\n        depthMat.blendType = pc.BLEND_NONE;\n        depthMat.depthTest = false;\n        depthMat.depthWrite = false;\n        this.materials.depthOfField = depthMat;\n        \n        // Bloom material (placeholder simple additive pass)\n        this.materials.bloom = new pc.StandardMaterial();\n        this.materials.bloom.chunks.PS_LIGHTING = this.getBloomFragmentShader();\n        this.materials.bloom.blendType = pc.BLEND_ADDITIVE;\n        this.materials.bloom.depthTest = false;\n        this.materials.bloom.depthWrite = false;\n        \n        // Blur material (placeholder)\n        this.materials.blur = new pc.StandardMaterial();\n        this.materials.blur.chunks.PS_LIGHTING = this.getBlurFragmentShader();\n        this.materials.blur.blendType = pc.BLEND_NONE;\n        this.materials.blur.depthTest = false;\n        this.materials.blur.depthWrite = false;\n        \n        // Color grading material (placeholder)\n        this.materials.colorGrading = new pc.StandardMaterial();\n        this.materials.colorGrading.chunks.PS_LIGHTING = this.getColorGradingFragmentShader();\n        this.materials.colorGrading.blendType = pc.BLEND_NONE;\n        this.materials.colorGrading.depthTest = false;\n        this.materials.colorGrading.depthWrite = false;\n        \n        // Final combine material (placeholder)\n        this.materials.combine = new pc.StandardMaterial();\n        this.materials.combine.chunks.PS_LIGHTING = this.getCombineFragmentShader();\n        this.materials.combine.blendType = pc.BLEND_NONE;\n        this.materials.combine.depthTest = false;\n        this.materials.combine.depthWrite = false;\n        \n        console.log('Post-processing materials created');\n    }\n\n    private getDOFFragmentShader(): string {\n        return `\n        uniform sampler2D texture_sceneColor;\n        uniform sampler2D texture_sceneDepth;\n        uniform vec2 uScreenSize;\n        uniform float uFocusDistance;\n        uniform float uFocusRange;\n        uniform float uMaxBlur;\n        \n        varying vec2 vUv0;\n        \n        void main() {\n            vec2 uv = vUv0;\n            vec4 sceneColor = texture2D(texture_sceneColor, uv);\n            float depth = texture2D(texture_sceneDepth, uv).r;\n            \n            // Calculate blur amount based on distance from focus\n            float focusBlur = abs(depth - uFocusDistance) / uFocusRange;\n            focusBlur = clamp(focusBlur, 0.0, 1.0) * uMaxBlur;\n            \n            // Simple box blur (would be replaced with proper DOF in production)\n            vec3 color = sceneColor.rgb;\n            if (focusBlur > 0.1) {\n                vec3 blurColor = vec3(0.0);\n                float samples = 0.0;\n                \n                for (int x = -2; x <= 2; x++) {\n                    for (int y = -2; y <= 2; y++) {\n                        vec2 offset = vec2(float(x), float(y)) * focusBlur / uScreenSize;\n                        blurColor += texture2D(texture_sceneColor, uv + offset).rgb;\n                        samples += 1.0;\n                    }\n                }\n                \n                color = mix(color, blurColor / samples, focusBlur);\n            }\n            \n            gl_FragColor = vec4(color, sceneColor.a);\n        }`;\n    }\n\n    private getBloomFragmentShader(): string {\n        return `\n        uniform sampler2D texture_sceneColor;\n        uniform float uBloomThreshold;\n        uniform float uBloomIntensity;\n        \n        varying vec2 vUv0;\n        \n        void main() {\n            vec4 color = texture2D(texture_sceneColor, vUv0);\n            \n            // Extract bright areas\n            float luminance = dot(color.rgb, vec3(0.299, 0.587, 0.114));\n            float bloomAmount = max(luminance - uBloomThreshold, 0.0);\n            bloomAmount *= uBloomIntensity;\n            \n            gl_FragColor = vec4(color.rgb * bloomAmount, color.a);\n        }`;\n    }\n\n    private getBlurFragmentShader(): string {\n        return `\n        uniform sampler2D texture_source;\n        uniform vec2 uBlurDirection;\n        uniform vec2 uScreenSize;\n        \n        varying vec2 vUv0;\n        \n        void main() {\n            vec2 texelSize = 1.0 / uScreenSize;\n            vec3 color = vec3(0.0);\n            \n            // 9-tap Gaussian blur\n            color += texture2D(texture_source, vUv0 - 4.0 * uBlurDirection * texelSize).rgb * 0.05;\n            color += texture2D(texture_source, vUv0 - 3.0 * uBlurDirection * texelSize).rgb * 0.09;\n            color += texture2D(texture_source, vUv0 - 2.0 * uBlurDirection * texelSize).rgb * 0.12;\n            color += texture2D(texture_source, vUv0 - 1.0 * uBlurDirection * texelSize).rgb * 0.15;\n            color += texture2D(texture_source, vUv0).rgb * 0.18;\n            color += texture2D(texture_source, vUv0 + 1.0 * uBlurDirection * texelSize).rgb * 0.15;\n            color += texture2D(texture_source, vUv0 + 2.0 * uBlurDirection * texelSize).rgb * 0.12;\n            color += texture2D(texture_source, vUv0 + 3.0 * uBlurDirection * texelSize).rgb * 0.09;\n            color += texture2D(texture_source, vUv0 + 4.0 * uBlurDirection * texelSize).rgb * 0.05;\n            \n            gl_FragColor = vec4(color, 1.0);\n        }`;\n    }\n\n    private getColorGradingFragmentShader(): string {\n        return `\n        uniform sampler2D texture_sceneColor;\n        uniform float uContrast;\n        uniform float uSaturation;\n        uniform float uBrightness;\n        uniform float uWarmth;\n        uniform float uVignette;\n        uniform float uFilmGrain;\n        uniform float uTime;\n        \n        varying vec2 vUv0;\n        \n        float random(vec2 st) {\n            return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n        }\n        \n        void main() {\n            vec2 uv = vUv0;\n            vec4 color = texture2D(texture_sceneColor, uv);\n            \n            // Brightness\n            color.rgb += uBrightness;\n            \n            // Contrast\n            color.rgb = (color.rgb - 0.5) * uContrast + 0.5;\n            \n            // Saturation\n            float luminance = dot(color.rgb, vec3(0.299, 0.587, 0.114));\n            color.rgb = mix(vec3(luminance), color.rgb, uSaturation);\n            \n            // Warmth (blue/orange tint)\n            color.rgb = mix(color.rgb, color.rgb * vec3(1.0 + uWarmth, 1.0, 1.0 - uWarmth), abs(uWarmth));\n            \n            // Vignette\n            if (uVignette > 0.0) {\n                float dist = distance(uv, vec2(0.5));\n                float vignetteFactor = 1.0 - smoothstep(0.3, 0.8, dist * uVignette);\n                color.rgb *= vignetteFactor;\n            }\n            \n            // Film grain\n            if (uFilmGrain > 0.0) {\n                float noise = random(uv + uTime) * 2.0 - 1.0;\n                color.rgb += noise * uFilmGrain * 0.1;\n            }\n            \n            gl_FragColor = vec4(color.rgb, color.a);\n        }`;\n    }\n\n    private getCombineFragmentShader(): string {\n        return `\n        uniform sampler2D texture_sceneColor;\n        uniform sampler2D texture_bloom;\n        uniform float uBloomIntensity;\n        uniform vec3 uFlashColor;\n        uniform float uFlashIntensity;\n        \n        varying vec2 vUv0;\n        \n        void main() {\n            vec4 sceneColor = texture2D(texture_sceneColor, vUv0);\n            vec4 bloomColor = texture2D(texture_bloom, vUv0);\n            \n            // Combine scene and bloom\n            vec3 finalColor = sceneColor.rgb + bloomColor.rgb * uBloomIntensity;\n            \n            // Apply flash effect (for hit effects)\n            if (uFlashIntensity > 0.0) {\n                finalColor = mix(finalColor, uFlashColor, uFlashIntensity);\n            }\n            \n            gl_FragColor = vec4(finalColor, sceneColor.a);\n        }`;\n    }\n\n    private setupPostProcessingCameras(): void {\n        // Post-processing camera (orthographic, full screen)\n        this.cameras.postProcess = new pc.Entity('PostProcessCamera');\n        this.cameras.postProcess.addComponent('camera', {\n            clearColor: new pc.Color(0, 0, 0, 0),\n            projection: pc.PROJECTION_ORTHOGRAPHIC,\n            orthoHeight: 1,\n            nearClip: 0,\n            farClip: 1,\n            priority: 100,\n            enabled: true\n        });\n        \n        this.app.root.addChild(this.cameras.postProcess);\n    }\n\n    private createEffectEntities(): void {\n        // Full-screen quad for post-processing\n        this.fullScreenQuad = new pc.Entity('FullScreenQuad');\n        this.fullScreenQuad.addComponent('render', {\n            type: 'plane'\n        });\n        this.fullScreenQuad.setLocalScale(2, 2, 1);\n        // Place slightly in front of the post-process camera (which looks down -Z)\n        this.fullScreenQuad.setPosition(0, 0, -0.5);\n        // Ensure the quad faces the camera\n        this.fullScreenQuad.setEulerAngles(0, 180, 0);\n        \n        this.app.root.addChild(this.fullScreenQuad);\n    }\n\n    private setupRenderPipeline(): void {\n        // Hook into the main camera's render pipeline\n        const mainCamera = this.app.root.findByName('MainCamera');\n        if (mainCamera && mainCamera.camera) {\n            // Set main camera to render to our scene color target\n            mainCamera.camera.renderTarget = this.renderTargets.sceneColor;\n        }\n        \n        console.log('Post-processing render pipeline configured');\n    }\n\n    // Public API methods\n    public setDepthOfField(focusDistance: number, focusRange: number, blurRadius: number): void {\n        this.effects.depthOfField.focusDistance = focusDistance;\n        this.effects.depthOfField.focusRange = focusRange;\n        this.effects.depthOfField.blurRadius = blurRadius;\n    }\n\n    public setBloom(threshold: number, intensity: number, radius: number): void {\n        this.effects.bloom.threshold = threshold;\n        this.effects.bloom.intensity = intensity;\n        this.effects.bloom.radius = radius;\n    }\n\n    public setColorGrading(contrast: number, saturation: number, brightness: number, warmth: number): void {\n        this.effects.colorGrading.contrast = contrast;\n        this.effects.colorGrading.saturation = saturation;\n        this.effects.colorGrading.brightness = brightness;\n        this.effects.colorGrading.warmth = warmth;\n    }\n\n    // Fighting game specific effects\n    public triggerHitFlash(color: [number, number, number] = [1, 1, 1], intensity: number = 0.8, duration: number = 100): void {\n        this.effects.fightingGameEffects.flashEffect.color = new pc.Color(color[0], color[1], color[2]);\n        this.effects.fightingGameEffects.flashEffect.intensity = intensity;\n        this.effects.fightingGameEffects.flashEffect.duration = duration;\n        this.effects.fightingGameEffects.flashEffect.active = true;\n        \n        // Fade out flash over duration\n        const startTime = Date.now();\n        const fadeFlash = () => {\n            const elapsed = Date.now() - startTime;\n            const progress = elapsed / duration;\n            \n            if (progress < 1) {\n                this.effects.fightingGameEffects.flashEffect.intensity = intensity * (1 - progress);\n                requestAnimationFrame(fadeFlash);\n            } else {\n                this.effects.fightingGameEffects.flashEffect.intensity = 0;\n                this.effects.fightingGameEffects.flashEffect.active = false;\n            }\n        };\n        \n        fadeFlash();\n    }\n\n    public triggerScreenShake(intensity: number = 1.0, duration: number = 300): void {\n        this.effects.fightingGameEffects.screenShake.intensity = intensity;\n        this.effects.fightingGameEffects.screenShake.duration = duration;\n        this.effects.fightingGameEffects.screenShake.active = true;\n        \n        const startTime = Date.now();\n        const mainCamera = this.app.root.findByName('MainCamera');\n        const originalPos = mainCamera.getPosition().clone();\n        \n        const shakeCamera = () => {\n            const elapsed = Date.now() - startTime;\n            const progress = elapsed / duration;\n            \n            if (progress < 1) {\n                const currentIntensity = intensity * (1 - progress);\n                const shakeX = (Math.random() - 0.5) * currentIntensity * 0.5;\n                const shakeY = (Math.random() - 0.5) * currentIntensity * 0.3;\n                \n                mainCamera.setPosition(originalPos.x + shakeX, originalPos.y + shakeY, originalPos.z);\n                requestAnimationFrame(shakeCamera);\n            } else {\n                mainCamera.setPosition(originalPos);\n                this.effects.fightingGameEffects.screenShake.intensity = 0;\n                this.effects.fightingGameEffects.screenShake.active = false;\n            }\n        };\n        \n        shakeCamera();\n    }\n\n    public triggerSlowMotion(factor: number = 0.3, duration: number = 1000): void {\n        this.effects.fightingGameEffects.slowMotion.factor = factor;\n        this.effects.fightingGameEffects.slowMotion.duration = duration;\n        this.effects.fightingGameEffects.slowMotion.active = true;\n        this.app.timeScale = factor;\n        \n        setTimeout(() => {\n            this.effects.fightingGameEffects.slowMotion.factor = 1.0;\n            this.effects.fightingGameEffects.slowMotion.active = false;\n            this.app.timeScale = 1.0;\n        }, duration);\n    }\n\n    public setDramaticLighting(enabled: boolean): void {\n        this.effects.fightingGameEffects.dramaTicLighting = enabled;\n        \n        // Adjust post-processing for dramatic effect\n        if (enabled) {\n            this.setColorGrading(1.3, 1.4, 0.1, 0.2);\n            this.setBloom(0.5, 1.2, 1.0);\n        } else {\n            // Reset to normal values\n            this.setColorGrading(1.1, 1.15, 0.05, 0.1);\n            this.setBloom(0.7, 0.9, 0.8);\n        }\n    }\n\n    // Update loop\n    public update(dt: number): void {\n        if (!this.initialized) return;\n        \n        this.updateEffectParameters(dt);\n        this.renderPostProcessing(dt);\n    }\n\n    private updateEffectParameters(dt: number): void {\n        // Update material parameters\n        if (this.materials.depthOfField) {\n            this.materials.depthOfField.setParameter('uFocusDistance', this.effects.depthOfField.focusDistance);\n            this.materials.depthOfField.setParameter('uFocusRange', this.effects.depthOfField.focusRange);\n            this.materials.depthOfField.setParameter('uMaxBlur', this.effects.depthOfField.maxBlur);\n        }\n        \n        if (this.materials.bloom) {\n            this.materials.bloom.setParameter('uBloomThreshold', this.effects.bloom.threshold);\n            this.materials.bloom.setParameter('uBloomIntensity', this.effects.bloom.intensity);\n        }\n        \n        if (this.materials.colorGrading) {\n            this.materials.colorGrading.setParameter('uContrast', this.effects.colorGrading.contrast);\n            this.materials.colorGrading.setParameter('uSaturation', this.effects.colorGrading.saturation);\n            this.materials.colorGrading.setParameter('uBrightness', this.effects.colorGrading.brightness);\n            this.materials.colorGrading.setParameter('uWarmth', this.effects.colorGrading.warmth);\n            this.materials.colorGrading.setParameter('uVignette', this.effects.colorGrading.vignette);\n            this.materials.colorGrading.setParameter('uFilmGrain', this.effects.colorGrading.filmGrain);\n            this.materials.colorGrading.setParameter('uTime', Date.now() * 0.001);\n        }\n        \n        if (this.materials.combine) {\n            this.materials.combine.setParameter('uBloomIntensity', this.effects.bloom.intensity);\n            this.materials.combine.setParameter('uFlashColor', [\n                this.effects.fightingGameEffects.flashEffect.color.r,\n                this.effects.fightingGameEffects.flashEffect.color.g,\n                this.effects.fightingGameEffects.flashEffect.color.b\n            ]);\n            this.materials.combine.setParameter('uFlashIntensity', this.effects.fightingGameEffects.flashEffect.intensity);\n        }\n    }\n\n    private renderPostProcessing(dt: number): void {\n        if (!this.fullScreenQuad || !this.materials.depthOfField || !this.renderTargets.sceneColor) return;\n        const device = this.app.graphicsDevice;\n\n        // Update dynamic uniforms\n        const timeSec = Date.now() * 0.001;\n        (this.materials.depthOfField as pc.Material).setParameter('uTime', timeSec);\n        (this.materials.depthOfField as pc.Material).setParameter('uScreenSize', new Float32Array([device.width, device.height]));\n        (this.materials.depthOfField as pc.Material).setParameter('uInvScreenSize', new Float32Array([1 / Math.max(1, device.width), 1 / Math.max(1, device.height)]));\n\n        // Bind input textures (scene color as both color and depth placeholder if no depth RT)\n        (this.materials.depthOfField as pc.Material).setParameter('texture_colorBuffer', this.renderTargets.sceneColor.colorBuffer);\n        const depthBufferTex = this.renderTargets.sceneDepth ? this.renderTargets.sceneDepth.colorBuffer : this.renderTargets.sceneColor.colorBuffer;\n        (this.materials.depthOfField as pc.Material).setParameter('texture_depthBuffer', depthBufferTex);\n\n        // Render fullscreen quad with DOF shader\n        this.fullScreenQuad.render.material = this.materials.depthOfField;\n    }\n\n    // Quality management\n    public setQuality(quality: string): void {\n        this.quality = quality;\n        \n        const qualitySettings: Record<string, any> = {\n            low: { scale: 0.5, bloom: false, dof: false },\n            medium: { scale: 0.75, bloom: true, dof: false },\n            high: { scale: 1.0, bloom: true, dof: true },\n            ultra: { scale: 1.0, bloom: true, dof: true }\n        };\n        \n        const settings = qualitySettings[quality];\n        this.resolution.scale = settings.scale;\n        this.effects.bloom.enabled = settings.bloom;\n        this.effects.depthOfField.enabled = settings.dof;\n        \n        // Recreate render targets with new resolution\n        this.createRenderTargets();\n        \n        console.log(`Post-processing quality set to: ${quality}`);\n    }\n\n    public destroy(): void {\n        // Clean up resources\n        if (this.fullScreenQuad) {\n            this.fullScreenQuad.destroy();\n        }\n        \n        // Clean up render targets\n        Object.values(this.renderTargets).forEach(target => {\n            if (target) {\n                target.destroy();\n            }\n        });\n        \n        // Clean up cameras\n        Object.values(this.cameras).forEach(camera => {\n            if (camera) {\n                camera.destroy();\n            }\n        });\n        \n        console.log('PostProcessingManager destroyed');\n    }\n}\n\nexport default PostProcessingManager;", "export type EventHandler<T = any> = (payload: T) => void;\n\nexport class EventBus {\n\tprivate handlers: Map<string, Set<EventHandler>> = new Map();\n\n\ton<T = any>(event: string, handler: EventHandler<T>): void {\n\t\tif (!this.handlers.has(event)) this.handlers.set(event, new Set());\n\t\tthis.handlers.get(event)!.add(handler as EventHandler);\n\t}\n\n\toff<T = any>(event: string, handler: EventHandler<T>): void {\n\t\tthis.handlers.get(event)?.delete(handler as EventHandler);\n\t}\n\n\temit<T = any>(event: string, payload: T): void {\n\t\tthis.handlers.get(event)?.forEach(h => h(payload));\n\t}\n\n\tclear(): void {\n\t\tthis.handlers.clear();\n\t}\n}", "export class ServiceContainer {\n\tprivate services = new Map<string, unknown>();\n\n\tregister<T>(key: string, instance: T): void {\n\t\tthis.services.set(key, instance as unknown);\n\t}\n\n\tresolve<T>(key: string): T {\n\t\tif (!this.services.has(key)) {\n\t\t\tthrow new Error(`Service not registered: ${key}`);\n\t\t}\n\t\treturn this.services.get(key) as T;\n\t}\n\n\thas(key: string): boolean {\n\t\treturn this.services.has(key);\n\t}\n\n\tclear(): void {\n\t\tthis.services.clear();\n\t}\n}", "export class FeatureFlags {\n\tprivate flags = new Map<string, boolean>();\n\n\tenable(key: string): void { this.flags.set(key, true); }\n\tdisable(key: string): void { this.flags.set(key, false); }\n\tset(key: string, value: boolean): void { this.flags.set(key, value); }\n\tisEnabled(key: string, defaultValue = false): boolean {\n\t\treturn this.flags.has(key) ? !!this.flags.get(key) : defaultValue;\n\t}\n}", "export interface UpdatableSystem {\n\tpriority: number;\n\tupdate(deltaTime: number): void;\n\tname?: string;\n}\n\nexport class UpdatePipeline {\n\tprivate systems: UpdatableSystem[] = [];\n\tprivate samples: { name: string; ms: number }[] = [];\n\n\tadd(system: UpdatableSystem): void {\n\t\tthis.systems.push(system);\n\t\tthis.systems.sort((a, b) => a.priority - b.priority);\n\t}\n\n\tremove(system: UpdatableSystem): void {\n\t\tthis.systems = this.systems.filter(s => s !== system);\n\t}\n\n\tupdate(deltaTime: number): void {\n\t\tthis.samples.length = 0;\n\t\tfor (const sys of this.systems) {\n\t\t\tconst start = performance.now();\n\t\t\tsys.update(deltaTime);\n\t\t\tconst end = performance.now();\n\t\t\tthis.samples.push({ name: sys.name || 'system', ms: end - start });\n\t\t}\n\t}\n\n\tgetTimings(): { name: string; ms: number }[] {\n\t\treturn this.samples.slice();\n\t}\n\n\tclear(): void {\n\t\tthis.systems.length = 0;\n\t}\n}", "export interface GameState {\n\tname: string;\n\tenter(prev?: GameState): Promise<void> | void;\n\texit(next?: GameState): Promise<void> | void;\n\tupdate(dt: number): void;\n}\n\nexport class GameStateStack {\n\tprivate stack: GameState[] = [];\n\n\tget current(): GameState | undefined { return this.stack[this.stack.length - 1]; }\n\n\tasync push(state: GameState): Promise<void> {\n\t\tconst prev = this.current;\n\t\tthis.stack.push(state);\n\t\tawait state.enter(prev);\n\t}\n\n\tasync pop(): Promise<void> {\n\t\tconst state = this.stack.pop();\n\t\tif (state) await state.exit(this.current);\n\t}\n\n\tasync replace(state: GameState): Promise<void> {\n\t\tconst prev = this.stack.pop();\n\t\tif (prev) await prev.exit(state);\n\t\tthis.stack.push(state);\n\t\tawait state.enter(prev);\n\t}\n\n\tupdate(dt: number): void {\n\t\tthis.current?.update(dt);\n\t}\n}", "import * as pc from 'playcanvas';\nimport { GameState } from './GameStateStack';\nimport { ConfigService } from '../utils/ConfigService';\nimport { MonetizationService } from '../monetization/MonetizationService';\n\nexport class BootState implements GameState {\n\tpublic name = 'boot';\n\tprivate app: pc.Application;\n\tprivate services: any;\n\tprivate events: any;\n\n\tconstructor(app: pc.Application, services: any, events: any) {\n\t\tthis.app = app;\n\t\tthis.services = services;\n\t\tthis.events = events;\n\t}\n\n\tasync enter(): Promise<void> {\n\t\ttry {\n\t\t\t// Load initial configs; extend as needed\n\t\t\tconst config = this.services.resolve<ConfigService>('config');\n            const monetization = this.services.resolve<MonetizationService>('monetization');\n            const entitlement = this.services.resolve<any>('entitlement');\n            const security = this.services.resolve<any>('security');\n            const sync = this.services.resolve<any>('sync');\n            const remote = this.services.resolve<any>('configRemote');\n            const liveops = this.services.resolve<any>('liveops');\n            const netcode = this.services.resolve<any>('netcode');\n\t\t\tawait Promise.all([\n\t\t\t\tconfig.loadJson('/data/balance/live_balance.json').catch(() => ({})),\n                monetization.initialize().catch(() => undefined),\n                entitlement.initialize?.().catch(() => undefined),\n                remote.load().catch(() => undefined),\n                liveops.load().catch(() => undefined)\n\t\t\t]);\n            security.start?.();\n            sync.start?.();\n\t\t\tconst cfg = remote.get('netcode', { enabled: false });\n\t\t\tif (cfg?.enabled && cfg.mode === 'local') {\n\t\t\t\tnetcode.enableLocalP2();\n\t\t\t}\n\t\t\tthis.events.emit('state:goto', { state: 'login' });\n\t\t} catch (e) {\n\t\t\tconsole.error('BootState failed:', e);\n\t\t\tthis.events.emit('state:goto', { state: 'login' });\n\t\t}\n\t}\n\n\texit(): void {}\n\n\tupdate(dt: number): void {}\n}\n\n", "import * as pc from 'playcanvas';\nimport { GameState } from './GameStateStack';\nimport { UIManager } from '../ui/UIManager';\n\nexport class MenuState implements GameState {\n\tpublic name = 'menu';\n\tprivate app: pc.Application;\n\tprivate events: any;\n\tprivate menuEntity: pc.Entity | null = null;\n\n\tconstructor(app: pc.Application, events: any) {\n\t\tthis.app = app;\n\t\tthis.events = events;\n\t}\n\n\tenter(): void {\n\t\t// Show UI-managed menu\n\t\tconst ui = (this.app as any)._ui as UIManager | undefined;\n\t\tui?.showMenu();\n\t\ttry {\n\t\t\tconst services = (this.app as any)._services as any;\n\t\t\tconst monetization = services?.resolve?.('monetization');\n\t\t\tmonetization?.storefront?.startStoreImpression?.('featured');\n\t\t} catch {}\n\t\twindow.addEventListener('keydown', this.onKey);\n\t}\n\n\texit(): void {\n\t\twindow.removeEventListener('keydown', this.onKey);\n\t\tconst ui = (this.app as any)._ui as UIManager | undefined;\n\t\tui?.hideMenu();\n\t\ttry {\n\t\t\tconst services = (this.app as any)._services as any;\n\t\t\tconst monetization = services?.resolve?.('monetization');\n\t\t\tmonetization?.storefront?.endStoreImpression?.();\n\t\t} catch {}\n\t}\n\n\tupdate(dt: number): void {}\n\n\tprivate onKey = (e: KeyboardEvent) => {\n\t\tif (e.key === 'Enter') {\n\t\t\tthis.events.emit('state:goto', { state: 'login' });\n\t\t}\n\t}\n}\n\n", "import * as pc from 'playcanvas';\nimport { GameState } from './GameStateStack';\nimport { UIManager } from '../ui/UIManager';\nimport { CharacterManager } from '../characters/CharacterManager';\n\nexport class MatchState implements GameState {\n\tpublic name = 'match';\n\tprivate app: pc.Application;\n\tprivate events: any;\n\tprivate spawned = false;\n\n\tconstructor(app: pc.Application, events: any) {\n\t\tthis.app = app;\n\t\tthis.events = events;\n\t}\n\n\tenter(): void {\n\t\tconst ui = (this.app as any)._ui as UIManager | undefined;\n\t\tui?.showHUD();\n\t\tthis.spawnCharactersFromSelection();\n\t}\n\n\texit(): void {}\n\n\tupdate(dt: number): void {}\n\n\tprivate spawnCharactersFromSelection(): void {\n\t\tif (this.spawned) return;\n\t\tthis.spawned = true;\n\t\ttry {\n\t\t\tconst services = (this.app as any)._services as any;\n\t\t\tconst characterManager: CharacterManager = services.resolve('characters');\n\t\t\tlet selections: any = null;\n\t\t\ttry { selections = services.resolve('selections'); } catch {}\n\t\t\tif (!selections) {\n\t\t\t\ttry { const raw = localStorage.getItem('sf3_selections'); if (raw) selections = JSON.parse(raw); } catch {}\n\t\t\t}\n\t\t\tconst p1Id = selections?.player1?.characterId || 'ryu';\n\t\t\tconst p2Id = selections?.player2?.characterId || 'ken';\n\t\t\tconst p1 = characterManager.createCharacter(p1Id, new pc.Vec3(-2, 0, 0));\n\t\t\tconst p2 = characterManager.createCharacter(p2Id, new pc.Vec3(2, 0, 0));\n\t\t\tif (p1 && p2) {\n\t\t\t\tcharacterManager.setActiveCharacters(p1Id, p2Id);\n\t\t\t}\n\t\t} catch {}\n\t}\n}\n\n", "import * as pc from 'playcanvas';\nimport { GameState } from './GameStateStack';\n\nexport class LoginState implements GameState {\n\tpublic name = 'login';\n\tprivate app: pc.Application;\n\tprivate events: any;\n\tprivate uiRoot: pc.Entity | null = null;\n\tprivate inputGroup: pc.Entity | null = null;\n\tprivate usernameText: pc.Entity | null = null;\n\tprivate promptText: pc.Entity | null = null;\n\tprivate username: string = '';\n\tprivate busy: boolean = false;\n\tprivate keyHandler: ((e: any) => void) | null = null;\n\n\tconstructor(app: pc.Application, events: any) {\n\t\tthis.app = app;\n\t\tthis.events = events;\n\t}\n\n\tasync enter(): Promise<void> {\n\t\tthis.createUI();\n\t\tthis.attachInput();\n\t}\n\n\texit(): void {\n\t\tthis.detachInput();\n\t\tif (this.uiRoot && this.uiRoot.parent) {\n\t\t\tthis.uiRoot.destroy();\n\t\t}\n\t\tthis.uiRoot = null;\n\t}\n\n\tupdate(dt: number): void {}\n\n\tprivate createUI(): void {\n\t\tthis.uiRoot = new pc.Entity('LoginUI');\n\t\tthis.uiRoot.addComponent('screen', {\n\t\t\treferenceResolution: new pc.Vec2(1920, 1080),\n\t\t\tscaleMode: pc.SCALEMODE_BLEND,\n\t\t\tscaleBlend: 0.5,\n\t\t\tscreenSpace: true\n\t\t});\n\t\tthis.app.root.addChild(this.uiRoot);\n\n\t\t// Background panel\n\t\tconst panel = new pc.Entity('LoginPanel');\n\t\tpanel.addComponent('element', {\n\t\t\ttype: pc.ELEMENTTYPE_IMAGE,\n\t\t\tanchor: [0.25, 0.25, 0.75, 0.75],\n\t\t\tcolor: new pc.Color(0.08, 0.08, 0.1, 0.95)\n\t\t});\n\t\tthis.uiRoot.addChild(panel);\n\n\t\t// Title\n\t\tconst title = new pc.Entity('Title');\n\t\ttitle.addComponent('element', {\n\t\t\ttype: pc.ELEMENTTYPE_TEXT,\n\t\t\tanchor: [0.1, 0.75, 0.9, 0.92],\n\t\t\ttext: 'Sign In',\n\t\t\tfontSize: 48,\n\t\t\tcolor: new pc.Color(1, 1, 1),\n\t\t\talignment: new pc.Vec2(0.5, 0.5)\n\t\t});\n\t\tpanel.addChild(title);\n\n\t\t// Username group\n\t\tthis.inputGroup = new pc.Entity('UsernameGroup');\n\t\tthis.inputGroup.addComponent('element', {\n\t\t\ttype: pc.ELEMENTTYPE_GROUP,\n\t\t\tanchor: [0.1, 0.45, 0.9, 0.65]\n\t\t});\n\t\tpanel.addChild(this.inputGroup);\n\n\t\tconst inputBg = new pc.Entity('InputBg');\n\t\tinputBg.addComponent('element', {\n\t\t\ttype: pc.ELEMENTTYPE_IMAGE,\n\t\t\tanchor: [0, 0.25, 1, 0.75],\n\t\t\tcolor: new pc.Color(0.15, 0.15, 0.2, 1)\n\t\t});\n\t\tthis.inputGroup.addChild(inputBg);\n\n\t\tconst inputLabel = new pc.Entity('InputLabel');\n\t\tinputLabel.addComponent('element', {\n\t\t\ttype: pc.ELEMENTTYPE_TEXT,\n\t\t\tanchor: [0, 0.75, 0.3, 1],\n\t\t\ttext: 'Username',\n\t\t\tfontSize: 24,\n\t\t\tcolor: new pc.Color(0.8, 0.8, 0.9),\n\t\t\talignment: new pc.Vec2(0, 0.5)\n\t\t});\n\t\tthis.inputGroup.addChild(inputLabel);\n\n\t\tthis.usernameText = new pc.Entity('UsernameText');\n\t\tthis.usernameText.addComponent('element', {\n\t\t\ttype: pc.ELEMENTTYPE_TEXT,\n\t\t\tanchor: [0.02, 0.25, 0.98, 0.75],\n\t\t\ttext: '',\n\t\t\tfontSize: 28,\n\t\t\tcolor: new pc.Color(1, 1, 1),\n\t\t\talignment: new pc.Vec2(0, 0.5)\n\t\t});\n\t\tthis.inputGroup.addChild(this.usernameText);\n\n\t\t// Prompt / button\n\t\tthis.promptText = new pc.Entity('Prompt');\n\t\tthis.promptText.addComponent('element', {\n\t\t\ttype: pc.ELEMENTTYPE_TEXT,\n\t\t\tanchor: [0.1, 0.25, 0.9, 0.38],\n\t\t\ttext: 'Press Enter to continue',\n\t\t\tfontSize: 22,\n\t\t\tcolor: new pc.Color(0.9, 0.9, 1),\n\t\t\talignment: new pc.Vec2(0.5, 0.5)\n\t\t});\n\t\tpanel.addChild(this.promptText);\n\n\t\t// Clickable login button (optional)\n\t\tconst loginBtn = new pc.Entity('LoginButton');\n\t\tloginBtn.addComponent('element', {\n\t\t\ttype: pc.ELEMENTTYPE_IMAGE,\n\t\t\tanchor: [0.4, 0.08, 0.6, 0.18],\n\t\t\tcolor: new pc.Color(0.25, 0.35, 0.6, 1)\n\t\t});\n\t\tconst loginText = new pc.Entity('LoginButtonText');\n\t\tloginText.addComponent('element', {\n\t\t\ttype: pc.ELEMENTTYPE_TEXT,\n\t\t\tanchor: [0, 0, 1, 1],\n\t\t\ttext: 'Login',\n\t\t\tfontSize: 24,\n\t\t\tcolor: new pc.Color(1, 1, 1),\n\t\t\talignment: new pc.Vec2(0.5, 0.5)\n\t\t});\n\t\tloginBtn.addChild(loginText);\n\t\tloginBtn.addComponent('button', { imageEntity: loginBtn });\n\t\tloginBtn.button!.on('click', () => this.submit());\n\t\tpanel.addChild(loginBtn);\n\t}\n\n\tprivate attachInput(): void {\n\t\tconst keyboard = this.app.keyboard!;\n\t\tthis.keyHandler = (e: any) => {\n\t\t\tif (this.busy) return;\n\t\t\tif (e.key === pc.KEY_RETURN || e.key === pc.KEY_NUMPAD_ENTER) {\n\t\t\t\tthis.submit();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (e.key === pc.KEY_BACKSPACE) {\n\t\t\t\tthis.username = this.username.slice(0, -1);\n\t\t\t\tthis.refreshText();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Basic character input filtering\n\t\t\tconst ch = (e.event as KeyboardEvent).key;\n\t\t\tif (typeof ch === 'string' && ch.length === 1) {\n\t\t\t\tif (/^[a-zA-Z0-9_\\- ]$/.test(ch) && this.username.length < 20) {\n\t\t\t\t\tthis.username += ch;\n\t\t\t\t\tthis.refreshText();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tkeyboard.on(pc.EVENT_KEYDOWN, this.keyHandler, this);\n\t}\n\n\tprivate detachInput(): void {\n\t\tif (this.keyHandler) {\n\t\t\tthis.app.keyboard!.off(pc.EVENT_KEYDOWN, this.keyHandler, this);\n\t\t\tthis.keyHandler = null;\n\t\t}\n\t}\n\n\tprivate refreshText(): void {\n\t\tif (this.usernameText && this.usernameText.element) {\n\t\t\tthis.usernameText.element.text = this.username || '<enter a username>';\n\t\t}\n\t}\n\n\tprivate async submit(): Promise<void> {\n\t\tif (this.busy) return;\n\t\tthis.busy = true;\n\t\tif (this.promptText?.element) {\n\t\t\tthis.promptText.element.text = 'Signing in...';\n\t\t}\n\t\ttry {\n\t\t\tconst r = await fetch('/api/session');\n\t\t\tlet token = '';\n\t\t\tlet userId = 'guest';\n\t\t\tif (r.ok) {\n\t\t\t\tconst data = await r.json();\n\t\t\t\ttoken = data.token;\n\t\t\t\tuserId = data.userId || 'guest';\n\t\t\t}\n\t\t\tconst services = (this.app as any)._services as any;\n\t\t\tservices.register('session', { token, userId, username: this.username || 'Player' });\n\t\t\ttry { localStorage.setItem('sf3_session', JSON.stringify({ token, userId, username: this.username || 'Player' })); } catch {}\n\t\t\tthis.events.emit('state:goto', { state: 'characterselect' });\n\t\t} catch (e) {\n\t\t\tif (this.promptText?.element) {\n\t\t\t\tthis.promptText.element.text = 'Sign in failed, press Enter to retry';\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.busy = false;\n\t\t}\n\t}\n}\n\n", "// @ts-nocheck\nimport * as pc from 'playcanvas';\n/**\n * RotationService.ts - LoL-like fighter rotation system for PlayCanvas\n * \n * Manages character availability pools, rotation cadence, and entitlements.\n * Supports hot-swapping, regional overrides, and event-based rotations.\n * \n * Usage:\n *   const rotation = new RotationService(app);\n *   await rotation.initialize();\n *   const available = rotation.isCharacterAvailable('vanguard', 'ranked');\n */\n\nimport { CharacterManager } from './characters/CharacterManager';\nimport { EntitlementBridge } from './EntitlementBridge';\n\ninterface RotationConfig {\n  schemaVersion: string;\n  cadenceDays: number;\n  rolloverUtc: string;\n  regions: Record<string, RegionConfig>;\n  pools: RotationPools;\n  flags: RotationFlags;\n  analytics: AnalyticsConfig;\n  entitlements: EntitlementConfig;\n  ui: UIConfig;\n}\n\ninterface RegionConfig {\n  cadenceDays: number;\n  rolloverUtc: string;\n}\n\ninterface RotationPools {\n  freeRotation: string[];\n  starter: string[];\n  owned: string[];\n  eventOverrides: Record<string, EventOverride>;\n}\n\ninterface EventOverride {\n  add: string[];\n  remove: string[];\n  description?: string;\n}\n\ninterface RotationFlags {\n  trainingAlwaysUnlocked: boolean;\n  allowHotSwap: boolean;\n  enableEventRotations: boolean;\n  enableRegionalOverrides: boolean;\n  debugMode: boolean;\n}\n\ninterface AnalyticsConfig {\n  trackPickRate: boolean;\n  trackWinRate: boolean;\n  trackVariationUsage: boolean;\n  trackRegionalDifferences: boolean;\n}\n\ninterface EntitlementConfig {\n  devUnlocks: {\n    enabled: boolean;\n    characters: string[];\n  };\n  qaFlags: {\n    unlockAll: boolean;\n    forceRotation: string[] | null;\n  };\n  platformSKUs: Record<string, {\n    characters: string[];\n    enabled: boolean;\n  }>;\n}\n\ninterface UIConfig {\n  showCountdown: boolean;\n  showFeatured: boolean;\n  featuredCharacters: string[];\n  lockIconStyle: string;\n  rotationNotification: boolean;\n}\n\ninterface RotationState {\n  currentWeek: number;\n  nextRotation: Date;\n  activePool: string[];\n  region: string;\n  eventActive: boolean;\n  eventDescription?: string;\n}\n\nexport type GameMode = 'training' | 'casual' | 'ranked' | 'tournament' | 'story';\n\nexport class RotationService {\n  private app: pc.Application;\n  private characterManager: CharacterManager;\n  private entitlementBridge: EntitlementBridge;\n  private config: RotationConfig | null = null;\n  private state: RotationState | null = null;\n  private configUrl: string = '/data/rotation.config.json';\n  private region: string = 'default';\n  private updateTimer: number | null = null;\n  private eventEmitter: pc.EventHandler;\n\n  constructor(app: pc.Application, characterManager: CharacterManager, region: string = 'default') {\n    this.app = app;\n    this.characterManager = characterManager;\n    this.region = region;\n    this.entitlementBridge = new EntitlementBridge();\n    this.eventEmitter = new pc.EventHandler();\n  }\n\n  /**\n   * Initialize the rotation service\n   */\n  async initialize(): Promise<void> {\n    console.log('RotationService: Initializing...');\n    \n    try {\n      // Load rotation configuration\n      await this.loadConfiguration();\n      \n      // Initialize entitlement bridge\n      await this.entitlementBridge.initialize();\n      \n      // Calculate current rotation state\n      this.updateRotationState();\n      \n      // Setup automatic updates\n      this.setupRotationTimer();\n      \n      // Listen for external events\n      this.setupEventListeners();\n      \n      console.log('RotationService: Initialized successfully');\n      this.emitStateChange();\n      \n    } catch (error) {\n      console.error('RotationService: Failed to initialize:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Load rotation configuration from JSON\n   */\n  private async loadConfiguration(): Promise<void> {\n    try {\n      const response = await fetch(this.configUrl);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      this.config = await response.json();\n      \n      // Validate schema version\n      if (this.config!.schemaVersion !== '2.0') {\n        console.warn(`RotationService: Schema version mismatch. Expected 2.0, got ${this.config!.schemaVersion}`);\n      }\n\n      // Validate region exists\n      if (this.region !== 'default' && !this.config!.regions[this.region]) {\n        console.warn(`RotationService: Region '${this.region}' not found, using default`);\n        this.region = 'default';\n      }\n\n      console.log(`RotationService: Configuration loaded for region '${this.region}'`);\n      \n    } catch (error) {\n      throw new Error(`Failed to load rotation configuration: ${error.message}`);\n    }\n  }\n\n  /**\n   * Update the current rotation state based on time and configuration\n   */\n  private updateRotationState(): void {\n    if (!this.config) {\n      throw new Error('Configuration not loaded');\n    }\n\n    const now = new Date();\n    const regionConfig = this.config.regions[this.region] || this.config.regions.default;\n    \n    // Calculate current week number\n    const currentWeek = this.calculateCurrentWeek(now, regionConfig);\n    \n    // Calculate next rotation time\n    const nextRotation = this.calculateNextRotation(now, regionConfig);\n    \n    // Determine active pool\n    const activePool = this.calculateActivePool(now);\n    \n    // Check for active events\n    const eventInfo = this.checkActiveEvent(now);\n    \n    this.state = {\n      currentWeek,\n      nextRotation,\n      activePool,\n      region: this.region,\n      eventActive: eventInfo.active,\n      eventDescription: eventInfo.description\n    };\n\n    console.log('RotationService: State updated', {\n      week: currentWeek,\n      nextRotation: nextRotation.toISOString(),\n      poolSize: activePool.length,\n      eventActive: eventInfo.active\n    });\n  }\n\n  /**\n   * Calculate current week number based on rollover schedule\n   */\n  private calculateCurrentWeek(now: Date, regionConfig: RegionConfig): number {\n    // Parse rollover time (e.g., \"Monday 09:00\")\n    const [dayName, timeStr] = regionConfig.rolloverUtc.split(' ');\n    const [hours, minutes] = timeStr.split(':').map(Number);\n    \n    const dayOfWeek = this.getDayOfWeekNumber(dayName);\n    \n    // Calculate milliseconds since epoch\n    const epochStart = new Date('1970-01-01T00:00:00Z');\n    const msSinceEpoch = now.getTime() - epochStart.getTime();\n    \n    // Calculate milliseconds since last rollover\n    const msPerWeek = 7 * 24 * 60 * 60 * 1000;\n    const currentWeekStart = this.getWeekStart(now, dayOfWeek, hours, minutes);\n    const msSinceWeekStart = now.getTime() - currentWeekStart.getTime();\n    \n    // Calculate week number\n    return Math.floor(msSinceEpoch / msPerWeek);\n  }\n\n  /**\n   * Calculate next rotation time\n   */\n  private calculateNextRotation(now: Date, regionConfig: RegionConfig): Date {\n    const [dayName, timeStr] = regionConfig.rolloverUtc.split(' ');\n    const [hours, minutes] = timeStr.split(':').map(Number);\n    const dayOfWeek = this.getDayOfWeekNumber(dayName);\n    \n    const nextRotation = new Date(now);\n    \n    // Find next occurrence of rollover day/time\n    const daysUntilRollover = (dayOfWeek - now.getUTCDay() + 7) % 7;\n    nextRotation.setUTCDate(now.getUTCDate() + daysUntilRollover);\n    nextRotation.setUTCHours(hours, minutes, 0, 0);\n    \n    // If we've already passed this week's rollover, move to next week\n    if (nextRotation <= now) {\n      nextRotation.setUTCDate(nextRotation.getUTCDate() + 7);\n    }\n    \n    return nextRotation;\n  }\n\n  /**\n   * Calculate currently active character pool\n   */\n  private calculateActivePool(now: Date): string[] {\n    if (!this.config) return [];\n\n    let pool = [...this.config.pools.freeRotation];\n    \n    // Add starter characters (always available)\n    pool.push(...this.config.pools.starter);\n    \n    // Add owned characters from entitlements\n    const ownedCharacters = this.entitlementBridge.getOwnedCharacters();\n    pool.push(...ownedCharacters);\n    \n    // Apply event overrides\n    if (this.config.flags.enableEventRotations) {\n      const eventOverride = this.getActiveEventOverride(now);\n      if (eventOverride) {\n        // Add event characters\n        pool.push(...eventOverride.add);\n        \n        // Remove specified characters\n        pool = pool.filter(char => !eventOverride.remove.includes(char));\n      }\n    }\n\n    // Apply dev/QA overrides\n    if (this.config.entitlements.devUnlocks.enabled) {\n      if (this.config.entitlements.devUnlocks.characters.includes('all')) {\n        pool.push(...this.characterManager.getAvailableCharacters());\n      } else {\n        pool.push(...this.config.entitlements.devUnlocks.characters);\n      }\n    }\n\n    if (this.config.entitlements.qaFlags.unlockAll) {\n      pool.push(...this.characterManager.getAvailableCharacters());\n    }\n\n    if (this.config.entitlements.qaFlags.forceRotation) {\n      pool = [...this.config.entitlements.qaFlags.forceRotation];\n    }\n\n    // Remove duplicates and return\n    return [...new Set(pool)];\n  }\n\n  /**\n   * Check for active event overrides\n   */\n  private checkActiveEvent(now: Date): { active: boolean; description?: string } {\n    if (!this.config?.flags.enableEventRotations) {\n      return { active: false };\n    }\n\n    const todayKey = now.toISOString().split('T')[0]; // YYYY-MM-DD format\n    const eventOverride = this.config.pools.eventOverrides[todayKey];\n    \n    if (eventOverride) {\n      return {\n        active: true,\n        description: eventOverride.description\n      };\n    }\n\n    return { active: false };\n  }\n\n  /**\n   * Get active event override for a given date\n   */\n  private getActiveEventOverride(now: Date): EventOverride | null {\n    if (!this.config?.flags.enableEventRotations) {\n      return null;\n    }\n\n    const todayKey = now.toISOString().split('T')[0];\n    return this.config.pools.eventOverrides[todayKey] || null;\n  }\n\n  /**\n   * Get day of week number (0 = Sunday, 1 = Monday, etc.)\n   */\n  private getDayOfWeekNumber(dayName: string): number {\n    const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n    return days.indexOf(dayName.toLowerCase());\n  }\n\n  /**\n   * Get start of week for rollover calculations\n   */\n  private getWeekStart(date: Date, rolloverDay: number, rolloverHour: number, rolloverMinute: number): Date {\n    const weekStart = new Date(date);\n    const currentDay = date.getUTCDay();\n    \n    // Calculate days back to rollover day\n    let daysBack = (currentDay - rolloverDay + 7) % 7;\n    \n    weekStart.setUTCDate(date.getUTCDate() - daysBack);\n    weekStart.setUTCHours(rolloverHour, rolloverMinute, 0, 0);\n    \n    // If the calculated start is in the future, go back one week\n    if (weekStart > date) {\n      weekStart.setUTCDate(weekStart.getUTCDate() - 7);\n    }\n    \n    return weekStart;\n  }\n\n  /**\n   * Setup automatic rotation updates\n   */\n  private setupRotationTimer(): void {\n    if (!this.config || !this.state) return;\n\n    const checkInterval = 60000; // Check every minute\n    \n    this.updateTimer = window.setInterval(() => {\n      const oldState = { ...this.state! };\n      this.updateRotationState();\n      \n      // Check if rotation changed\n      if (this.hasRotationChanged(oldState, this.state!)) {\n        console.log('RotationService: Rotation changed, emitting update');\n        this.emitStateChange();\n        \n        if (this.config!.ui.rotationNotification) {\n          this.emitRotationNotification();\n        }\n      }\n    }, checkInterval);\n  }\n\n  /**\n   * Setup event listeners for external triggers\n   */\n  private setupEventListeners(): void {\n    // Listen for hot-swap configuration updates\n    this.app.on('rotation:hotswap', async (newConfigUrl?: string) => {\n      if (this.config?.flags.allowHotSwap) {\n        try {\n          if (newConfigUrl) {\n            this.configUrl = newConfigUrl;\n          }\n          await this.loadConfiguration();\n          this.updateRotationState();\n          this.emitStateChange();\n          console.log('RotationService: Hot-swapped configuration');\n        } catch (error) {\n          console.error('RotationService: Hot-swap failed:', error);\n        }\n      }\n    });\n\n    // Listen for entitlement changes\n    this.entitlementBridge.on('entitlements:changed', () => {\n      this.updateRotationState();\n      this.emitStateChange();\n    });\n  }\n\n  /**\n   * Check if rotation state has meaningfully changed\n   */\n  private hasRotationChanged(oldState: RotationState, newState: RotationState): boolean {\n    return (\n      oldState.currentWeek !== newState.currentWeek ||\n      oldState.activePool.length !== newState.activePool.length ||\n      !this.arraysEqual(oldState.activePool, newState.activePool) ||\n      oldState.eventActive !== newState.eventActive\n    );\n  }\n\n  /**\n   * Check if two arrays are equal\n   */\n  private arraysEqual(a: string[], b: string[]): boolean {\n    return a.length === b.length && a.every((val, i) => val === b[i]);\n  }\n\n  /**\n   * Emit state change event\n   */\n  private emitStateChange(): void {\n    this.app.fire('rotation:statechange', {\n      state: this.state,\n      config: this.config\n    });\n    \n    this.eventEmitter.fire('statechange', this.state);\n  }\n\n  /**\n   * Emit rotation notification\n   */\n  private emitRotationNotification(): void {\n    this.app.fire('rotation:notification', {\n      type: 'rotation_changed',\n      newCharacters: this.state?.activePool || [],\n      nextRotation: this.state?.nextRotation\n    });\n  }\n\n  // Public API\n\n  /**\n   * Check if a character is available for a specific game mode\n   */\n  isCharacterAvailable(characterId: string, mode: GameMode = 'casual'): boolean {\n    if (!this.state || !this.config) {\n      console.warn('RotationService: Not initialized');\n      return false;\n    }\n\n    // Training mode special case\n    if (mode === 'training' && this.config.flags.trainingAlwaysUnlocked) {\n      return true;\n    }\n\n    // Check if character is in active pool\n    if (this.state.activePool.includes(characterId)) {\n      return true;\n    }\n\n    // Check entitlements\n    return this.entitlementBridge.hasCharacterAccess(characterId, mode);\n  }\n\n  /**\n   * Get all available characters for a game mode\n   */\n  getAvailableCharacters(mode: GameMode = 'casual'): string[] {\n    if (!this.state || !this.config) {\n      return [];\n    }\n\n    if (mode === 'training' && this.config.flags.trainingAlwaysUnlocked) {\n      return this.characterManager.getAvailableCharacters();\n    }\n\n    // Filter active pool by entitlements\n    return this.state.activePool.filter(characterId =>\n      this.entitlementBridge.hasCharacterAccess(characterId, mode)\n    );\n  }\n\n  /**\n   * Get current rotation state\n   */\n  getCurrentState(): RotationState | null {\n    return this.state;\n  }\n\n  /**\n   * Get time until next rotation\n   */\n  getTimeUntilRotation(): number {\n    if (!this.state) return 0;\n    return Math.max(0, this.state.nextRotation.getTime() - Date.now());\n  }\n\n  /**\n   * Get featured characters for UI\n   */\n  getFeaturedCharacters(): string[] {\n    if (!this.config?.ui.showFeatured) {\n      return [];\n    }\n    \n    return this.config.ui.featuredCharacters.filter(characterId =>\n      this.isCharacterAvailable(characterId)\n    );\n  }\n\n  /**\n   * Force refresh rotation state (useful for testing)\n   */\n  async forceRefresh(): Promise<void> {\n    if (this.config?.flags.debugMode) {\n      await this.loadConfiguration();\n      this.updateRotationState();\n      this.emitStateChange();\n      console.log('RotationService: Force refreshed');\n    }\n  }\n\n  /**\n   * Subscribe to rotation events\n   */\n  on(event: string, callback: Function): void {\n    this.eventEmitter.on(event, callback);\n  }\n\n  /**\n   * Unsubscribe from rotation events\n   */\n  off(event: string, callback: Function): void {\n    this.eventEmitter.off(event, callback);\n  }\n\n  /**\n   * Get analytics data for current rotation\n   */\n  getAnalyticsData(): any {\n    if (!this.config?.analytics) {\n      return null;\n    }\n\n    return {\n      currentWeek: this.state?.currentWeek,\n      activePoolSize: this.state?.activePool.length || 0,\n      region: this.region,\n      eventActive: this.state?.eventActive || false,\n      timeUntilRotation: this.getTimeUntilRotation()\n    };\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    if (this.updateTimer) {\n      clearInterval(this.updateTimer);\n      this.updateTimer = null;\n    }\n\n    this.eventEmitter.destroy();\n    this.entitlementBridge.destroy();\n    \n    console.log('RotationService: Destroyed');\n  }\n}\n\n/**\n * How to extend this system:\n * \n * 1. Adding new game modes: Update GameMode type and entitlement logic\n * 2. Adding new event types: Extend EventOverride interface and processing logic\n * 3. Adding new regions: Add region configs and timezone handling\n * 4. Adding complex rotation patterns: Extend calculateActivePool with new logic\n * 5. Adding analytics: Extend getAnalyticsData and add tracking calls\n */", "import * as pc from 'playcanvas';\n// @ts-nocheck\n/**\n * EntitlementBridge.ts - Entitlement management for character ownership\n * \n * Single interface to ownership (dev unlocks, QA flags, platform entitlements).\n * Stubbed for now but designed for dependency injection to support platform SKUs later.\n * \n * Usage:\n *   const bridge = new EntitlementBridge();\n *   await bridge.initialize();\n *   const hasAccess = bridge.hasCharacterAccess('vanguard', 'ranked');\n */\n\nexport type GameMode = 'training' | 'casual' | 'ranked' | 'tournament' | 'story';\n\ninterface EntitlementData {\n  ownedCharacters: string[];\n  platformSKUs: string[];\n  devUnlocks: string[];\n  qaFlags: {\n    unlockAll: boolean;\n    temporaryUnlocks: string[];\n  };\n  subscription: {\n    active: boolean;\n    tier: string;\n    benefits: string[];\n  };\n}\n\ninterface PlatformProvider {\n  name: string;\n  isAvailable(): boolean;\n  getOwnedContent(): Promise<string[]>;\n  hasSubscription(): Promise<boolean>;\n  validatePurchase(itemId: string): Promise<boolean>;\n}\n\nexport class EntitlementBridge {\n  private entitlements: EntitlementData;\n  private platformProviders: Map<string, PlatformProvider> = new Map();\n  private eventEmitter: pc.EventHandler;\n  private updateInterval: number | null = null;\n  private isInitialized: boolean = false;\n\n  constructor() {\n    this.entitlements = {\n      ownedCharacters: [],\n      platformSKUs: [],\n      devUnlocks: [],\n      qaFlags: {\n        unlockAll: false,\n        temporaryUnlocks: []\n      },\n      subscription: {\n        active: false,\n        tier: 'free',\n        benefits: []\n      }\n    };\n\n    this.eventEmitter = new pc.EventHandler();\n  }\n\n  /**\n   * Initialize the entitlement system\n   */\n  async initialize(): Promise<void> {\n    console.log('EntitlementBridge: Initializing...');\n\n    try {\n      // Register platform providers\n      this.registerPlatformProviders();\n\n      // Load local entitlements (dev/QA overrides)\n      await this.loadLocalEntitlements();\n\n      // Query platform entitlements\n      await this.queryPlatformEntitlements();\n\n      // Setup periodic refresh\n      this.setupPeriodicRefresh();\n\n      this.isInitialized = true;\n      console.log('EntitlementBridge: Initialized successfully');\n\n      // Emit initial state\n      this.emitEntitlementsChanged();\n\n    } catch (error) {\n      console.error('EntitlementBridge: Failed to initialize:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Register available platform providers\n   */\n  private registerPlatformProviders(): void {\n    // Steam provider (stubbed)\n    this.platformProviders.set('steam', {\n      name: 'Steam',\n      isAvailable: () => typeof window !== 'undefined' && 'steamworks' in window,\n      getOwnedContent: async () => {\n        // Stub: In real implementation, query Steam API\n        return [];\n      },\n      hasSubscription: async () => false,\n      validatePurchase: async (itemId: string) => false\n    });\n\n    // PlayStation provider (stubbed)\n    this.platformProviders.set('playstation', {\n      name: 'PlayStation',\n      isAvailable: () => typeof window !== 'undefined' && 'PlayStation' in window,\n      getOwnedContent: async () => {\n        // Stub: In real implementation, query PlayStation Store API\n        return [];\n      },\n      hasSubscription: async () => false,\n      validatePurchase: async (itemId: string) => false\n    });\n\n    // Xbox provider (stubbed)\n    this.platformProviders.set('xbox', {\n      name: 'Xbox',\n      isAvailable: () => typeof window !== 'undefined' && 'Xbox' in window,\n      getOwnedContent: async () => {\n        // Stub: In real implementation, query Xbox Live API\n        return [];\n      },\n      hasSubscription: async () => false,\n      validatePurchase: async (itemId: string) => false\n    });\n\n    // Generic web provider (stubbed)\n    this.platformProviders.set('web', {\n      name: 'Web',\n      isAvailable: () => true,\n      getOwnedContent: async () => {\n        // Stub: In real implementation, query web store API\n        const stored = localStorage.getItem('owned_characters');\n        return stored ? JSON.parse(stored) : [];\n      },\n      hasSubscription: async () => {\n        const subscription = localStorage.getItem('subscription_active');\n        return subscription === 'true';\n      },\n      validatePurchase: async (itemId: string) => {\n        // Stub: In real implementation, validate with backend\n        return false;\n      }\n    });\n\n    console.log(`EntitlementBridge: Registered ${this.platformProviders.size} platform providers`);\n  }\n\n  /**\n   * Load local entitlements (dev/QA overrides)\n   */\n  private async loadLocalEntitlements(): Promise<void> {\n    try {\n      // Check for dev environment\n      const isDev = process.env.NODE_ENV === 'development' || window.location.hostname === 'localhost';\n      \n      if (isDev) {\n        // Dev unlocks from localStorage\n        const devUnlocks = localStorage.getItem('dev_unlocks');\n        if (devUnlocks) {\n          this.entitlements.devUnlocks = JSON.parse(devUnlocks);\n          console.log('EntitlementBridge: Loaded dev unlocks:', this.entitlements.devUnlocks);\n        }\n      }\n\n      // Check for QA flags\n      const qaFlags = localStorage.getItem('qa_flags');\n      if (qaFlags) {\n        const flags = JSON.parse(qaFlags);\n        this.entitlements.qaFlags = { ...this.entitlements.qaFlags, ...flags };\n        console.log('EntitlementBridge: Loaded QA flags:', this.entitlements.qaFlags);\n      }\n\n      // Check for URL parameters (for testing)\n      const urlParams = new URLSearchParams(window.location.search);\n      if (urlParams.get('unlock_all') === 'true') {\n        this.entitlements.qaFlags.unlockAll = true;\n        console.log('EntitlementBridge: URL override - unlock all characters');\n      }\n\n      if (urlParams.get('dev_mode') === 'true') {\n        this.entitlements.devUnlocks.push('all');\n        console.log('EntitlementBridge: URL override - dev mode enabled');\n      }\n\n    } catch (error) {\n      console.warn('EntitlementBridge: Failed to load local entitlements:', error);\n    }\n  }\n\n  /**\n   * Query platform entitlements from all available providers\n   */\n  private async queryPlatformEntitlements(): Promise<void> {\n    const ownedContent: string[] = [];\n    const platformSKUs: string[] = [];\n\n    for (const [platformName, provider] of this.platformProviders) {\n      try {\n        if (provider.isAvailable()) {\n          console.log(`EntitlementBridge: Querying ${platformName} entitlements...`);\n          \n          const content = await provider.getOwnedContent();\n          ownedContent.push(...content);\n          \n          const hasSubscription = await provider.hasSubscription();\n          if (hasSubscription) {\n            this.entitlements.subscription = {\n              active: true,\n              tier: 'premium',\n              benefits: ['all_characters', 'early_access', 'exclusive_skins']\n            };\n          }\n\n          platformSKUs.push(platformName);\n          console.log(`EntitlementBridge: ${platformName} - ${content.length} items, subscription: ${hasSubscription}`);\n        }\n      } catch (error) {\n        console.warn(`EntitlementBridge: Failed to query ${platformName}:`, error);\n      }\n    }\n\n    // Update entitlements\n    this.entitlements.ownedCharacters = [...new Set(ownedContent)];\n    this.entitlements.platformSKUs = platformSKUs;\n\n    console.log(`EntitlementBridge: Total owned characters: ${this.entitlements.ownedCharacters.length}`);\n  }\n\n  /**\n   * Setup periodic refresh of entitlements\n   */\n  private setupPeriodicRefresh(): void {\n    // Refresh every 5 minutes\n    this.updateInterval = window.setInterval(async () => {\n      try {\n        const oldEntitlements = JSON.stringify(this.entitlements);\n        await this.queryPlatformEntitlements();\n        \n        // Check if entitlements changed\n        const newEntitlements = JSON.stringify(this.entitlements);\n        if (oldEntitlements !== newEntitlements) {\n          console.log('EntitlementBridge: Entitlements updated');\n          this.emitEntitlementsChanged();\n        }\n      } catch (error) {\n        console.warn('EntitlementBridge: Periodic refresh failed:', error);\n      }\n    }, 5 * 60 * 1000);\n  }\n\n  /**\n   * Check if player has access to a specific character\n   */\n  hasCharacterAccess(characterId: string, mode: GameMode = 'casual'): boolean {\n    if (!this.isInitialized) {\n      console.warn('EntitlementBridge: Not initialized, denying access');\n      return false;\n    }\n\n    // QA unlock all override\n    if (this.entitlements.qaFlags.unlockAll) {\n      return true;\n    }\n\n    // Dev unlocks\n    if (this.entitlements.devUnlocks.includes('all') || this.entitlements.devUnlocks.includes(characterId)) {\n      return true;\n    }\n\n    // QA temporary unlocks\n    if (this.entitlements.qaFlags.temporaryUnlocks.includes(characterId)) {\n      return true;\n    }\n\n    // Subscription benefits\n    if (this.entitlements.subscription.active && this.entitlements.subscription.benefits.includes('all_characters')) {\n      return true;\n    }\n\n    // Owned characters\n    if (this.entitlements.ownedCharacters.includes(characterId)) {\n      return true;\n    }\n\n    // Mode-specific checks\n    switch (mode) {\n      case 'training':\n        // Training mode might have different rules\n        return this.hasTrainingAccess(characterId);\n      \n      case 'story':\n        // Story mode might unlock characters progressively\n        return this.hasStoryAccess(characterId);\n      \n      case 'tournament':\n        // Tournament mode might require ownership\n        return this.entitlements.ownedCharacters.includes(characterId);\n      \n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Check training mode access (often more permissive)\n   */\n  private hasTrainingAccess(characterId: string): boolean {\n    // Training mode typically allows access to more characters\n    // This could be configured per character or globally\n    return true; // For now, allow all characters in training\n  }\n\n  /**\n   * Check story mode access (progression-based)\n   */\n  private hasStoryAccess(characterId: string): boolean {\n    // Story mode access based on progression\n    // This would typically query save game data\n    const storyProgress = localStorage.getItem('story_progress');\n    if (storyProgress) {\n      const progress = JSON.parse(storyProgress);\n      return progress.unlockedCharacters?.includes(characterId) || false;\n    }\n    \n    // Default to first character for story mode\n    return characterId === 'vanguard';\n  }\n\n  /**\n   * Get all owned characters\n   */\n  getOwnedCharacters(): string[] {\n    const owned = [\n      ...this.entitlements.ownedCharacters,\n      ...this.entitlements.devUnlocks.filter(unlock => unlock !== 'all'),\n      ...this.entitlements.qaFlags.temporaryUnlocks\n    ];\n\n    // Add subscription benefits\n    if (this.entitlements.subscription.active && this.entitlements.subscription.benefits.includes('all_characters')) {\n      // This would be populated from character registry\n      owned.push('all_subscription_characters'); // Placeholder\n    }\n\n    return [...new Set(owned)];\n  }\n\n  /**\n   * Purchase a character (initiates platform purchase flow)\n   */\n  async purchaseCharacter(characterId: string, platform: string = 'web'): Promise<boolean> {\n    const provider = this.platformProviders.get(platform);\n    if (!provider) {\n      throw new Error(`Platform '${platform}' not available`);\n    }\n\n    try {\n      console.log(`EntitlementBridge: Initiating purchase of '${characterId}' on ${platform}`);\n      \n      // Validate purchase with platform\n      const success = await provider.validatePurchase(characterId);\n      \n      if (success) {\n        // Add to owned characters\n        if (!this.entitlements.ownedCharacters.includes(characterId)) {\n          this.entitlements.ownedCharacters.push(characterId);\n          \n          // Persist to local storage (web platform)\n          if (platform === 'web') {\n            localStorage.setItem('owned_characters', JSON.stringify(this.entitlements.ownedCharacters));\n          }\n          \n          console.log(`EntitlementBridge: Successfully purchased '${characterId}'`);\n          this.emitEntitlementsChanged();\n        }\n      }\n\n      return success;\n\n    } catch (error) {\n      console.error(`EntitlementBridge: Purchase failed for '${characterId}':`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Grant temporary access (for events, trials, etc.)\n   */\n  grantTemporaryAccess(characterId: string, durationMs: number = 24 * 60 * 60 * 1000): void {\n    if (!this.entitlements.qaFlags.temporaryUnlocks.includes(characterId)) {\n      this.entitlements.qaFlags.temporaryUnlocks.push(characterId);\n      \n      // Auto-remove after duration\n      setTimeout(() => {\n        const index = this.entitlements.qaFlags.temporaryUnlocks.indexOf(characterId);\n        if (index > -1) {\n          this.entitlements.qaFlags.temporaryUnlocks.splice(index, 1);\n          console.log(`EntitlementBridge: Temporary access expired for '${characterId}'`);\n          this.emitEntitlementsChanged();\n        }\n      }, durationMs);\n\n      console.log(`EntitlementBridge: Granted temporary access to '${characterId}' for ${durationMs}ms`);\n      this.emitEntitlementsChanged();\n    }\n  }\n\n  /**\n   * Get subscription status\n   */\n  getSubscriptionStatus(): { active: boolean; tier: string; benefits: string[] } {\n    return { ...this.entitlements.subscription };\n  }\n\n  /**\n   * Get entitlement summary for debugging\n   */\n  getEntitlementSummary(): any {\n    return {\n      ownedCharacters: this.entitlements.ownedCharacters.length,\n      platformSKUs: this.entitlements.platformSKUs,\n      devUnlocks: this.entitlements.devUnlocks,\n      qaFlags: this.entitlements.qaFlags,\n      subscription: this.entitlements.subscription,\n      availablePlatforms: Array.from(this.platformProviders.keys()).filter(name =>\n        this.platformProviders.get(name)!.isAvailable()\n      )\n    };\n  }\n\n  /**\n   * Force refresh entitlements\n   */\n  async refresh(): Promise<void> {\n    console.log('EntitlementBridge: Force refreshing entitlements...');\n    await this.queryPlatformEntitlements();\n    this.emitEntitlementsChanged();\n  }\n\n  /**\n   * Subscribe to entitlement change events\n   */\n  on(event: string, callback: Function): void {\n    this.eventEmitter.on(event, callback);\n  }\n\n  /**\n   * Unsubscribe from entitlement change events\n   */\n  off(event: string, callback: Function): void {\n    this.eventEmitter.off(event, callback);\n  }\n\n  /**\n   * Emit entitlements changed event\n   */\n  private emitEntitlementsChanged(): void {\n    this.eventEmitter.fire('entitlements:changed', {\n      ownedCharacters: this.getOwnedCharacters(),\n      subscription: this.entitlements.subscription\n    });\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n      this.updateInterval = null;\n    }\n\n    this.eventEmitter.destroy();\n    this.isInitialized = false;\n\n    console.log('EntitlementBridge: Destroyed');\n  }\n}\n\n/**\n * How to integrate with real platforms:\n * \n * 1. Steam: Replace Steam provider stub with actual Steamworks.js integration\n * 2. PlayStation: Use PlayStation Store API via PlayStation SDK\n * 3. Xbox: Use Xbox Live API via Xbox Game Development Kit\n * 4. Mobile: Add iOS App Store / Google Play billing APIs\n * 5. Web: Integrate with Stripe, PayPal, or other payment processors\n * 6. Backend: Add server-side validation for all purchases\n */", "/**\n * VariationOverlay.ts - Pure merge engine for MKX-style character variations\n * \n * Handles adds/mods/removes operations on character data.\n * Enforces guardrails and produces deterministic results.\n * \n * Usage:\n *   const overlay = new VariationOverlay();\n *   const modified = overlay.applyVariation(baseCharacter, variation);\n */\n\ninterface Variation {\n  id: string;\n  name: string;\n  description: string;\n  adds: Record<string, any>;\n  mods: Record<string, any>;\n  removes: string[];\n}\n\ninterface VariationDiff {\n  added: string[];\n  modified: string[];\n  removed: string[];\n  errors: string[];\n  warnings: string[];\n}\n\nexport class VariationOverlay {\n  private readonly PROTECTED_FIELDS = [\n    'id',\n    'schemaVersion',\n    'displayName',\n    'archetype',\n    'normals.lp',\n    'normals.mp', \n    'normals.hp',\n    'normals.lk',\n    'normals.mk',\n    'normals.hk'\n  ];\n\n  private readonly NUMERIC_FIELDS = [\n    'damage',\n    'startup',\n    'active', \n    'recovery',\n    'onBlock',\n    'onHit',\n    'meterCost',\n    'health',\n    'defense',\n    'meterGain',\n    'weight',\n    'stun',\n    'walkF',\n    'walkB',\n    'dashF',\n    'dashB'\n  ];\n\n  /**\n   * Apply variation to base character data\n   * @param base Base character data\n   * @param variation Variation to apply\n   * @returns Modified character data\n   */\n  applyVariation(base: any, variation: Variation): any {\n    // Deep clone base to avoid mutation\n    const result = this.deepClone(base);\n    const diff: VariationDiff = {\n      added: [],\n      modified: [],\n      removed: [],\n      errors: [],\n      warnings: []\n    };\n\n    try {\n      // Apply operations in order: removes -> mods -> adds\n      this.applyRemoves(result, variation.removes, diff);\n      this.applyMods(result, variation.mods, diff);\n      this.applyAdds(result, variation.adds, diff);\n\n      // Log the diff for debugging/analytics\n      this.logVariationDiff(variation.id, diff);\n\n      // Validate final result\n      this.validateResult(result, diff);\n\n      return result;\n\n    } catch (error) {\n      diff.errors.push(`Variation application failed: ${error.message}`);\n      throw new Error(`VariationOverlay: Failed to apply variation '${variation.id}': ${error.message}`);\n    }\n  }\n\n  /**\n   * Apply remove operations\n   */\n  private applyRemoves(target: any, removes: string[], diff: VariationDiff): void {\n    for (const path of removes) {\n      try {\n        // Check if path is protected\n        if (this.isProtectedField(path)) {\n          diff.errors.push(`Cannot remove protected field: ${path}`);\n          continue;\n        }\n\n        // Check if path exists\n        if (!this.hasPath(target, path)) {\n          diff.warnings.push(`Remove target not found: ${path}`);\n          continue;\n        }\n\n        // Remove the field\n        this.deletePath(target, path);\n        diff.removed.push(path);\n\n      } catch (error) {\n        diff.errors.push(`Failed to remove '${path}': ${error.message}`);\n      }\n    }\n  }\n\n  /**\n   * Apply modification operations\n   */\n  private applyMods(target: any, mods: Record<string, any>, diff: VariationDiff): void {\n    for (const [path, value] of Object.entries(mods)) {\n      try {\n        // Check if path is protected from modification\n        if (this.isProtectedField(path)) {\n          diff.warnings.push(`Modifying protected field: ${path}`);\n        }\n\n        // Check if target path exists\n        if (!this.hasPath(target, path)) {\n          diff.warnings.push(`Mod target not found, treating as add: ${path}`);\n        }\n\n        // Apply modification\n        this.setPath(target, path, value);\n        diff.modified.push(path);\n\n      } catch (error) {\n        diff.errors.push(`Failed to modify '${path}': ${error.message}`);\n      }\n    }\n  }\n\n  /**\n   * Apply add operations\n   */\n  private applyAdds(target: any, adds: Record<string, any>, diff: VariationDiff): void {\n    for (const [section, data] of Object.entries(adds)) {\n      try {\n        if (typeof data === 'object' && data !== null) {\n          // Ensure parent section exists\n          if (!target[section]) {\n            target[section] = {};\n          }\n\n          // Add all entries in this section\n          for (const [key, value] of Object.entries(data)) {\n            const fullPath = `${section}.${key}`;\n\n            if (this.hasPath(target, fullPath)) {\n              diff.warnings.push(`Add target already exists, overwriting: ${fullPath}`);\n            }\n\n            this.setPath(target, fullPath, value);\n            diff.added.push(fullPath);\n          }\n        } else {\n          // Direct value add\n          if (this.hasPath(target, section)) {\n            diff.warnings.push(`Add target already exists, overwriting: ${section}`);\n          }\n\n          target[section] = data;\n          diff.added.push(section);\n        }\n\n      } catch (error) {\n        diff.errors.push(`Failed to add '${section}': ${error.message}`);\n      }\n    }\n  }\n\n  /**\n   * Check if a field is protected from modification/removal\n   */\n  private isProtectedField(path: string): boolean {\n    return this.PROTECTED_FIELDS.some(protectedPath => \n      path === protectedPath || path.startsWith(protectedPath + '.')\n    );\n  }\n\n  /**\n   * Check if a path exists in the object\n   */\n  private hasPath(obj: any, path: string): boolean {\n    const keys = path.split('.');\n    let current = obj;\n\n    for (const key of keys) {\n      if (current === null || current === undefined || !(key in current)) {\n        return false;\n      }\n      current = current[key];\n    }\n\n    return true;\n  }\n\n  /**\n   * Get value at path\n   */\n  private getPath(obj: any, path: string): any {\n    const keys = path.split('.');\n    let current = obj;\n\n    for (const key of keys) {\n      if (current === null || current === undefined) {\n        return undefined;\n      }\n      current = current[key];\n    }\n\n    return current;\n  }\n\n  /**\n   * Set value at path, creating intermediate objects as needed\n   */\n  private setPath(obj: any, path: string, value: any): void {\n    const keys = path.split('.');\n    const lastKey = keys.pop()!;\n    let current = obj;\n\n    // Navigate/create path\n    for (const key of keys) {\n      if (!(key in current) || typeof current[key] !== 'object') {\n        current[key] = {};\n      }\n      current = current[key];\n    }\n\n    // Handle numeric field modifications with special logic\n    if (this.isNumericField(lastKey) && typeof value === 'object' && value !== null) {\n      current[lastKey] = this.applyNumericModification(current[lastKey], value);\n    } else {\n      current[lastKey] = value;\n    }\n  }\n\n  /**\n   * Delete value at path\n   */\n  private deletePath(obj: any, path: string): void {\n    const keys = path.split('.');\n    const lastKey = keys.pop()!;\n    let current = obj;\n\n    // Navigate to parent\n    for (const key of keys) {\n      if (current === null || current === undefined || !(key in current)) {\n        return; // Path doesn't exist\n      }\n      current = current[key];\n    }\n\n    // Delete the final key\n    delete current[lastKey];\n  }\n\n  /**\n   * Check if field accepts numeric modifications\n   */\n  private isNumericField(field: string): boolean {\n    return this.NUMERIC_FIELDS.includes(field);\n  }\n\n  /**\n   * Apply numeric modifications (supports relative changes)\n   */\n  private applyNumericModification(currentValue: number, modification: any): number {\n    if (typeof modification === 'number') {\n      return modification; // Direct replacement\n    }\n\n    if (typeof modification === 'object' && modification !== null) {\n      let result = currentValue || 0;\n\n      // Support for relative modifications\n      if ('add' in modification) {\n        result += modification.add;\n      }\n\n      if ('multiply' in modification) {\n        result *= modification.multiply;\n      }\n\n      if ('set' in modification) {\n        result = modification.set;\n      }\n\n      // Apply min/max constraints\n      if ('min' in modification && result < modification.min) {\n        result = modification.min;\n      }\n\n      if ('max' in modification && result > modification.max) {\n        result = modification.max;\n      }\n\n      return result;\n    }\n\n    return modification; // Fallback to direct assignment\n  }\n\n  /**\n   * Deep clone object to avoid mutations\n   */\n  private deepClone(obj: any): any {\n    if (obj === null || typeof obj !== 'object') {\n      return obj;\n    }\n\n    if (obj instanceof Date) {\n      return new Date(obj);\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(item => this.deepClone(item));\n    }\n\n    const cloned: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      cloned[key] = this.deepClone(value);\n    }\n\n    return cloned;\n  }\n\n  /**\n   * Validate the final result meets basic requirements\n   */\n  private validateResult(result: any, diff: VariationDiff): void {\n    // Check that required normals still exist\n    const requiredNormals = ['lp', 'mp', 'hp', 'lk', 'mk', 'hk'];\n    for (const normal of requiredNormals) {\n      if (!this.hasPath(result, `normals.${normal}`)) {\n        diff.errors.push(`Variation removed required normal: ${normal}`);\n      }\n    }\n\n    // Check that stats are still valid\n    const stats = result.stats || {};\n    if (stats.health <= 0) {\n      diff.errors.push('Character health must be greater than 0');\n    }\n\n    if (stats.defense <= 0) {\n      diff.errors.push('Character defense must be greater than 0');\n    }\n\n    // Throw if there are critical errors\n    if (diff.errors.length > 0) {\n      throw new Error(`Validation failed: ${diff.errors.join(', ')}`);\n    }\n  }\n\n  /**\n   * Log variation diff for debugging and analytics\n   */\n  private logVariationDiff(variationId: string, diff: VariationDiff): void {\n    const summary = {\n      variation: variationId,\n      changes: {\n        added: diff.added.length,\n        modified: diff.modified.length,\n        removed: diff.removed.length\n      },\n      issues: {\n        errors: diff.errors.length,\n        warnings: diff.warnings.length\n      }\n    };\n\n    console.log(`VariationOverlay: Applied ${variationId}`, summary);\n\n    // Log warnings\n    if (diff.warnings.length > 0) {\n      console.warn(`VariationOverlay: Warnings for ${variationId}:`, diff.warnings);\n    }\n\n    // Log errors (will throw after this)\n    if (diff.errors.length > 0) {\n      console.error(`VariationOverlay: Errors for ${variationId}:`, diff.errors);\n    }\n  }\n\n  /**\n   * Generate a diff report for UI/analytics consumption\n   */\n  generateDiffReport(base: any, variation: Variation): VariationDiff {\n    const testResult = this.deepClone(base);\n    const diff: VariationDiff = {\n      added: [],\n      modified: [],\n      removed: [],\n      errors: [],\n      warnings: []\n    };\n\n    try {\n      // Dry run to generate diff without applying\n      this.applyRemoves(testResult, variation.removes, diff);\n      this.applyMods(testResult, variation.mods, diff);\n      this.applyAdds(testResult, variation.adds, diff);\n\n    } catch (error) {\n      diff.errors.push(error.message);\n    }\n\n    return diff;\n  }\n\n  /**\n   * Check if two character objects are functionally equivalent\n   * Useful for testing variation idempotence\n   */\n  isEquivalent(obj1: any, obj2: any): boolean {\n    return JSON.stringify(this.sortObjectKeys(obj1)) === JSON.stringify(this.sortObjectKeys(obj2));\n  }\n\n  /**\n   * Sort object keys recursively for deterministic comparison\n   */\n  private sortObjectKeys(obj: any): any {\n    if (obj === null || typeof obj !== 'object') {\n      return obj;\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(item => this.sortObjectKeys(item));\n    }\n\n    const sorted: any = {};\n    Object.keys(obj).sort().forEach(key => {\n      sorted[key] = this.sortObjectKeys(obj[key]);\n    });\n\n    return sorted;\n  }\n\n  /**\n   * Test variation overlay idempotence\n   * Applying the same variation twice should yield identical results\n   */\n  testIdempotence(base: any, variation: Variation): boolean {\n    const first = this.applyVariation(base, variation);\n    const second = this.applyVariation(first, variation);\n    return this.isEquivalent(first, second);\n  }\n}\n\n/**\n * How to extend this system:\n * \n * 1. Adding new operation types: Extend applyAdds/applyMods/applyRemoves methods\n * 2. Adding new field types: Update NUMERIC_FIELDS and add type-specific logic\n * 3. Adding validation rules: Extend validateResult method\n * 4. Adding transformation logic: Create new apply* methods and call from applyVariation\n * 5. Adding complex merging: Extend setPath with type-specific merge strategies\n */", "import * as pc from 'playcanvas';\n\n/**\n * CharacterLoader.ts - Data-driven character loading with MKX-style variations\n * \n * Loads character.base.json and applies selected variation overlay at runtime.\n * Ensures deterministic loading for replay/netcode integrity.\n * \n * Usage:\n *   const loader = new CharacterLoader(app);\n *   const character = await loader.loadCharacter('vanguard', 'discipline');\n */\n\nimport { VariationOverlay } from './VariationOverlay';\n\ninterface CharacterBase {\n  schemaVersion: string;\n  id: string;\n  displayName: string;\n  archetype: string;\n  trait: {\n    id: string;\n    name: string;\n    description: string;\n    params: Record<string, any>;\n  };\n  normals: Record<string, MoveData>;\n  specials: Record<string, MoveData>;\n  supers: Record<string, MoveData>;\n  movement: MovementData;\n  stats: StatsData;\n}\n\ninterface MoveData {\n  name: string;\n  input?: string;\n  damage: number;\n  startup: number;\n  active?: number;\n  recovery: number;\n  onBlock: number;\n  onHit?: number;\n  invulnFrames?: [number, number];\n  tags: string[];\n  hitbox?: HitboxData;\n  projectile?: ProjectileData;\n  meterCost?: number;\n  stanceRequired?: string;\n  armor?: ArmorData;\n}\n\ninterface HitboxData {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\ninterface ProjectileData {\n  speed: number;\n  lifetime: number;\n  size: { width: number; height: number };\n}\n\ninterface ArmorData {\n  hits: number;\n  type: string;\n}\n\ninterface MovementData {\n  walkF: number;\n  walkB: number;\n  dashF: number;\n  dashB: number;\n  jumpArc: string;\n  airDash: boolean;\n  doubleJump: boolean;\n}\n\ninterface StatsData {\n  health: number;\n  defense: number;\n  meterGain: number;\n  weight: number;\n  stun: number;\n}\n\ninterface CharacterVariations {\n  schemaVersion: string;\n  characterId: string;\n  variations: Variation[];\n}\n\ninterface Variation {\n  id: string;\n  name: string;\n  description: string;\n  adds: Record<string, any>;\n  mods: Record<string, any>;\n  removes: string[];\n}\n\ninterface LoadedCharacter {\n  base: CharacterBase;\n  variation: Variation | null;\n  compiled: CharacterBase;\n  hash: string;\n  metadata: {\n    loadTime: number;\n    schemaVersion: string;\n    variationId: string | null;\n  };\n}\n\nexport class CharacterLoader {\n  private app: pc.Application;\n  private variationOverlay: VariationOverlay;\n  private cache: Map<string, CharacterBase> = new Map();\n  private variationCache: Map<string, CharacterVariations> = new Map();\n  private compiledCache: Map<string, LoadedCharacter> = new Map();\n\n  constructor(app: pc.Application) {\n    this.app = app;\n    this.variationOverlay = new VariationOverlay();\n  }\n\n  /**\n   * Load a character with optional variation\n   * @param characterId Character base ID\n   * @param variationId Optional variation ID (defaults to first variation)\n   * @returns Promise<LoadedCharacter>\n   */\n  async loadCharacter(characterId: string, variationId?: string): Promise<LoadedCharacter> {\n    const startTime = performance.now();\n    \n    try {\n      // Generate cache key\n      const cacheKey = `${characterId}:${variationId || 'base'}`;\n      \n      // Check compiled cache first\n      if (this.compiledCache.has(cacheKey)) {\n        const cached = this.compiledCache.get(cacheKey)!;\n        console.log(`CharacterLoader: Using cached character ${cacheKey}`);\n        return cached;\n      }\n\n      // Load base character data\n      const baseCharacter = await this.loadCharacterBase(characterId);\n      \n      // Load variation data if specified\n      let variation: Variation | null = null;\n      if (variationId) {\n        const variations = await this.loadCharacterVariations(characterId);\n        variation = variations.variations.find(v => v.id === variationId) || null;\n        \n        if (!variation) {\n          console.warn(`CharacterLoader: Variation '${variationId}' not found for '${characterId}', using base`);\n        }\n      }\n\n      // Compile character with variation overlay\n      const compiled = await this.compileCharacter(baseCharacter, variation);\n      \n      // Generate deterministic hash for netcode\n      const hash = await this.generateCharacterHash(compiled, variation);\n      \n      // Create loaded character object\n      const loadedCharacter: LoadedCharacter = {\n        base: baseCharacter,\n        variation,\n        compiled,\n        hash,\n        metadata: {\n          loadTime: performance.now() - startTime,\n          schemaVersion: baseCharacter.schemaVersion,\n          variationId: variation?.id || null\n        }\n      };\n\n      // Cache the result\n      this.compiledCache.set(cacheKey, loadedCharacter);\n      \n      console.log(`CharacterLoader: Loaded ${characterId}${variation ? ` (${variation.name})` : ''} in ${loadedCharacter.metadata.loadTime.toFixed(2)}ms`);\n      \n      // Emit analytics event\n      this.app.fire('character:loaded', {\n        characterId,\n        variationId: variation?.id,\n        loadTime: loadedCharacter.metadata.loadTime,\n        hash\n      });\n\n      return loadedCharacter;\n      \n    } catch (error) {\n      console.error(`CharacterLoader: Failed to load character '${characterId}'${variationId ? ` with variation '${variationId}'` : ''}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Load character base data from JSON\n   */\n  private async loadCharacterBase(characterId: string): Promise<CharacterBase> {\n    // Check cache first\n    if (this.cache.has(characterId)) {\n      return this.cache.get(characterId)!;\n    }\n\n    try {\n      const response = await fetch(`assets/data/characters/${characterId}.base.json`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data: CharacterBase = await response.json();\n      \n      // Validate schema version\n      if (!this.validateSchemaVersion(data.schemaVersion)) {\n        console.warn(`CharacterLoader: Schema version mismatch for '${characterId}'. Expected 1.0, got ${data.schemaVersion}`);\n      }\n\n      // Validate required fields\n      this.validateCharacterBase(data);\n      \n      // Cache the result\n      this.cache.set(characterId, data);\n      \n      return data;\n      \n    } catch (error) {\n      throw new Error(`Failed to load character base '${characterId}': ${error.message}`);\n    }\n  }\n\n  /**\n   * Load character variation data from JSON\n   */\n  private async loadCharacterVariations(characterId: string): Promise<CharacterVariations> {\n    // Check cache first\n    if (this.variationCache.has(characterId)) {\n      return this.variationCache.get(characterId)!;\n    }\n\n    try {\n      const response = await fetch(`assets/data/characters/${characterId}.variations.json`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data: CharacterVariations = await response.json();\n      \n      // Validate schema version\n      if (!this.validateSchemaVersion(data.schemaVersion)) {\n        console.warn(`CharacterLoader: Schema version mismatch for variations '${characterId}'. Expected 1.0, got ${data.schemaVersion}`);\n      }\n\n      // Validate character ID matches\n      if (data.characterId !== characterId) {\n        throw new Error(`Character ID mismatch: expected '${characterId}', got '${data.characterId}'`);\n      }\n\n      // Cache the result\n      this.variationCache.set(characterId, data);\n      \n      return data;\n      \n    } catch (error) {\n      throw new Error(`Failed to load character variations '${characterId}': ${error.message}`);\n    }\n  }\n\n  /**\n   * Compile character by applying variation overlay\n   */\n  private async compileCharacter(base: CharacterBase, variation: Variation | null): Promise<CharacterBase> {\n    if (!variation) {\n      // Return deep copy of base character\n      return JSON.parse(JSON.stringify(base));\n    }\n\n    try {\n      // Apply variation overlay using VariationOverlay engine\n      const compiled = this.variationOverlay.applyVariation(base, variation);\n      \n      // Validate the compiled result\n      this.validateCharacterBase(compiled);\n      \n      return compiled;\n      \n    } catch (error) {\n      throw new Error(`Failed to compile character with variation '${variation.id}': ${error.message}`);\n    }\n  }\n\n  /**\n   * Generate deterministic hash for replay/netcode integrity\n   */\n  private async generateCharacterHash(character: CharacterBase, variation: Variation | null): Promise<string> {\n    // Create deterministic object for hashing\n    const hashObject = {\n      character: {\n        id: character.id,\n        schemaVersion: character.schemaVersion,\n        normals: character.normals,\n        specials: character.specials,\n        supers: character.supers,\n        movement: character.movement,\n        stats: character.stats,\n        trait: character.trait\n      },\n      variation: variation ? {\n        id: variation.id,\n        adds: variation.adds,\n        mods: variation.mods,\n        removes: variation.removes\n      } : null\n    };\n\n    // Sort keys for deterministic output\n    const sortedData = this.sortObjectKeys(hashObject);\n    const dataString = JSON.stringify(sortedData);\n    \n    // Prefer Web Crypto API when available; fallback to FNV-1a 64-bit\n    if (this.supportsWebCrypto()) {\n      const hex = await this.sha256HexBrowser(dataString);\n      return hex.substring(0, 16);\n    }\n\n    // Fallback hash (deterministic, not cryptographic)\n    return this.fnv1a64Hex(dataString).substring(0, 16);\n  }\n\n  /**\n   * Check if Web Crypto Subtle API is available\n   */\n  private supportsWebCrypto(): boolean {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const g: any = (typeof globalThis !== 'undefined') ? globalThis : (typeof window !== 'undefined' ? window : {});\n    return !!(g.crypto && g.crypto.subtle && typeof g.crypto.subtle.digest === 'function');\n  }\n\n  /**\n   * Compute SHA-256 hex string using the Web Crypto API\n   */\n  private async sha256HexBrowser(input: string): Promise<string> {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(input);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const g: any = (typeof globalThis !== 'undefined') ? globalThis : (typeof window !== 'undefined' ? window : {});\n    const hashBuffer = await g.crypto.subtle.digest('SHA-256', data);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  }\n\n  /**\n   * FNV-1a 64-bit hash (returns 16-char hex)\n   * Deterministic fallback when Web Crypto is unavailable.\n   */\n  private fnv1a64Hex(str: string): string {\n    let hash = 0xcbf29ce484222325n; // FNV offset basis\n    const fnvPrime = 0x100000001b3n; // FNV prime\n    for (let i = 0; i < str.length; i++) {\n      hash ^= BigInt(str.charCodeAt(i));\n      hash = (hash * fnvPrime) & 0xffffffffffffffffn; // stay within 64 bits\n    }\n    const hex = hash.toString(16);\n    return hex.padStart(16, '0');\n  }\n\n  /**\n   * Recursively sort object keys for deterministic hashing\n   */\n  private sortObjectKeys(obj: any): any {\n    if (obj === null || typeof obj !== 'object') {\n      return obj;\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(item => this.sortObjectKeys(item));\n    }\n\n    const sorted: any = {};\n    Object.keys(obj).sort().forEach(key => {\n      sorted[key] = this.sortObjectKeys(obj[key]);\n    });\n\n    return sorted;\n  }\n\n  /**\n   * Validate schema version compatibility\n   */\n  private validateSchemaVersion(version: string): boolean {\n    const supportedVersions = ['1.0'];\n    return supportedVersions.includes(version);\n  }\n\n  /**\n   * Validate character base data structure\n   */\n  private validateCharacterBase(data: CharacterBase): void {\n    const required = ['id', 'displayName', 'archetype', 'normals', 'specials', 'movement', 'stats'];\n    \n    for (const field of required) {\n      if (!(field in data)) {\n        throw new Error(`Missing required field: ${field}`);\n      }\n    }\n\n    // Validate normals have required buttons\n    const requiredNormals = ['lp', 'mp', 'hp', 'lk', 'mk', 'hk'];\n    for (const normal of requiredNormals) {\n      if (!(normal in data.normals)) {\n        throw new Error(`Missing required normal: ${normal}`);\n      }\n    }\n\n    // Validate move data structure\n    for (const [moveId, moveData] of Object.entries(data.normals)) {\n      this.validateMoveData(moveId, moveData);\n    }\n\n    for (const [moveId, moveData] of Object.entries(data.specials)) {\n      this.validateMoveData(moveId, moveData);\n    }\n\n    for (const [moveId, moveData] of Object.entries(data.supers)) {\n      this.validateMoveData(moveId, moveData);\n    }\n  }\n\n  /**\n   * Validate individual move data\n   */\n  private validateMoveData(moveId: string, moveData: MoveData): void {\n    const required = ['name', 'damage', 'startup', 'recovery', 'onBlock', 'tags'];\n    \n    for (const field of required) {\n      if (!(field in moveData)) {\n        throw new Error(`Move '${moveId}' missing required field: ${field}`);\n      }\n    }\n\n    // Validate frame data is positive\n    if (moveData.startup < 1) {\n      throw new Error(`Move '${moveId}' has invalid startup frames: ${moveData.startup}`);\n    }\n\n    if (moveData.recovery < 1) {\n      throw new Error(`Move '${moveId}' has invalid recovery frames: ${moveData.recovery}`);\n    }\n\n    // Validate tags is array\n    if (!Array.isArray(moveData.tags)) {\n      throw new Error(`Move '${moveId}' tags must be an array`);\n    }\n  }\n\n  /**\n   * Get available characters from loaded cache\n   */\n  getAvailableCharacters(): string[] {\n    return Array.from(this.cache.keys());\n  }\n\n  /**\n   * Get available variations for a character\n   */\n  async getCharacterVariations(characterId: string): Promise<Variation[]> {\n    try {\n      const variations = await this.loadCharacterVariations(characterId);\n      return variations.variations;\n    } catch (error) {\n      console.warn(`CharacterLoader: No variations found for '${characterId}'`);\n      return [];\n    }\n  }\n\n  /**\n   * Clear all caches (useful for hot-reloading in development)\n   */\n  clearCache(): void {\n    this.cache.clear();\n    this.variationCache.clear();\n    this.compiledCache.clear();\n    console.log('CharacterLoader: All caches cleared');\n  }\n\n  /**\n   * Preload character data for faster access\n   */\n  async preloadCharacter(characterId: string): Promise<void> {\n    try {\n      await this.loadCharacterBase(characterId);\n      await this.loadCharacterVariations(characterId).catch(() => {\n        // Variations are optional, ignore errors\n      });\n      console.log(`CharacterLoader: Preloaded '${characterId}'`);\n    } catch (error) {\n      console.error(`CharacterLoader: Failed to preload '${characterId}':`, error);\n    }\n  }\n\n  /**\n   * Get character hash for a specific character/variation combo\n   * Useful for netcode validation\n   */\n  async getCharacterHash(characterId: string, variationId?: string): Promise<string> {\n    const loaded = await this.loadCharacter(characterId, variationId);\n    return loaded.hash;\n  }\n}\n\n/**\n * How to extend this system:\n * \n * 1. Adding new character: Create {id}.base.json and optional {id}.variations.json\n * 2. Adding new archetype: Update archetype validation and add to character base\n * 3. Adding new move properties: Update MoveData interface and validation\n * 4. Adding new variation types: Update Variation interface and VariationOverlay\n * 5. Schema evolution: Increment schemaVersion and add migration logic\n */", "// @ts-nocheck\nimport * as pc from 'playcanvas';\n\n/**\n * CharacterSelectUI.ts - Character selection interface with variation support\n * \n * Displays roster, lock states, countdown, and variation picker.\n * Integrates with RotationService and CharacterLoader for complete functionality.\n * \n * Usage:\n *   const ui = new CharacterSelectUI(app, rotationService, characterLoader);\n *   ui.initialize();\n */\n\nimport { RotationService, GameMode } from './RotationService';\nimport { CharacterLoader } from './CharacterLoader';\n\ninterface CharacterSlot {\n  id: string;\n  name: string;\n  archetype: string;\n  locked: boolean;\n  featured: boolean;\n  variations: VariationSlot[];\n  uiElement: pc.Entity;\n}\n\ninterface VariationSlot {\n  id: string;\n  name: string;\n  description: string;\n  selected: boolean;\n  uiElement: pc.Entity;\n}\n\ninterface PlayerSelection {\n  characterId: string | null;\n  variationId: string | null;\n  confirmed: boolean;\n}\n\nexport class CharacterSelectUI {\n  private app: pc.Application;\n  private rotationService: RotationService;\n  private characterLoader: CharacterLoader;\n  \n  // UI State\n  private isInitialized: boolean = false;\n  private currentMode: GameMode = 'casual';\n  private playerSelections: Map<string, PlayerSelection> = new Map();\n  private characterSlots: Map<string, CharacterSlot> = new Map();\n  private slotOrder: string[] = [];\n  private playerCursorIndex: Map<string, number> = new Map();\n  private uiRoot: pc.Entity | null = null;\n  \n  // UI Elements\n  private characterGrid: pc.Entity | null = null;\n  private variationPanel: pc.Entity | null = null;\n  private countdownDisplay: pc.Entity | null = null;\n  private lockIndicators: pc.Entity | null = null;\n  private featuredBanner: pc.Entity | null = null;\n  \n  // Input handling\n  private inputDevices: Map<string, any> = new Map();\n  private selectionTimeouts: Map<string, number> = new Map();\n  \n  // Constants\n  private readonly SELECTION_TIMEOUT = 30000; // 30 seconds\n  private readonly GRID_COLUMNS = 6;\n  private readonly VARIATION_SLOTS = 3;\n  private readonly INCLUDE_RANDOM_SLOT = true;\n\n  constructor(app: pc.Application, rotationService: RotationService, characterLoader: CharacterLoader) {\n    this.app = app;\n    this.rotationService = rotationService;\n    this.characterLoader = characterLoader;\n    \n    // Initialize player selections\n    this.playerSelections.set('player1', { characterId: null, variationId: null, confirmed: false });\n    this.playerSelections.set('player2', { characterId: null, variationId: null, confirmed: false });\n  }\n\n  /**\n   * Initialize the character select UI\n   */\n  async initialize(): Promise<void> {\n    console.log('CharacterSelectUI: Initializing...');\n    \n    try {\n      // Create UI root\n      this.createUIRoot();\n      \n      // Load available characters\n      await this.loadCharacterData();\n      \n      // Create UI elements\n      this.createCharacterGrid();\n      this.createVariationPanel();\n      this.createCountdownDisplay();\n      this.createLockIndicators();\n      this.createFeaturedBanner();\n      if (this.INCLUDE_RANDOM_SLOT) {\n        // Ensure cursor defaults\n        this.playerCursorIndex.set('player1', 0);\n        this.playerCursorIndex.set('player2', 0);\n      }\n      \n      // Setup input handling\n      this.setupInputHandling();\n      \n      // Setup event listeners\n      this.setupEventListeners();\n      \n      // Initial update\n      this.updateUI();\n      \n      this.isInitialized = true;\n      console.log('CharacterSelectUI: Initialized successfully');\n      \n    } catch (error) {\n      console.error('CharacterSelectUI: Failed to initialize:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create the root UI entity\n   */\n  private createUIRoot(): void {\n    this.uiRoot = new pc.Entity('CharacterSelectUI');\n    \n    // Add screen component for 2D UI\n    this.uiRoot.addComponent('screen', {\n      referenceResolution: new pc.Vec2(1920, 1080),\n      scaleBlend: 0.5,\n      scaleMode: pc.SCALEMODE_BLEND,\n      screenSpace: true\n    });\n    \n    this.app.root.addChild(this.uiRoot);\n  }\n\n  /**\n   * Load character data from CharacterLoader\n   */\n  private async loadCharacterData(): Promise<void> {\n    const availableCharacters = this.rotationService.getAvailableCharacters(this.currentMode);\n    \n    for (const characterId of availableCharacters) {\n      try {\n        // Load base character data\n        const character = await this.characterLoader.loadCharacter(characterId);\n        \n        // Load variations\n        const variations = await this.characterLoader.getCharacterVariations(characterId);\n        \n        // Create character slot\n        const slot: CharacterSlot = {\n          id: characterId,\n          name: character.base.displayName,\n          archetype: character.base.archetype,\n          locked: !this.rotationService.isCharacterAvailable(characterId, this.currentMode),\n          featured: this.rotationService.getFeaturedCharacters().includes(characterId),\n          variations: variations.map(v => ({\n            id: v.id,\n            name: v.name,\n            description: v.description,\n            selected: false,\n            uiElement: null!\n          })),\n          uiElement: null!\n        };\n        \n        this.characterSlots.set(characterId, slot);\n        \n      } catch (error) {\n        console.warn(`CharacterSelectUI: Failed to load character '${characterId}':`, error);\n      }\n    }\n    \n    console.log(`CharacterSelectUI: Loaded ${this.characterSlots.size} characters`);\n  }\n\n  /**\n   * Create the main character grid\n   */\n  private createCharacterGrid(): void {\n    this.characterGrid = new pc.Entity('CharacterGrid');\n    this.characterGrid.addComponent('element', {\n      type: pc.ELEMENTTYPE_GROUP,\n      anchor: [0.1, 0.2, 0.9, 0.8],\n      pivot: [0, 1],\n      margin: [0, 0, 0, 0]\n    });\n    \n    // Add layout group for automatic positioning\n    this.characterGrid.addComponent('layoutgroup', {\n      orientation: pc.ORIENTATION_HORIZONTAL,\n      spacing: new pc.Vec2(20, 20),\n      widthFitting: pc.FITTING_NONE,\n      heightFitting: pc.FITTING_NONE,\n      wrap: true\n    });\n    \n    // Create character slots\n    let index = 0;\n    this.slotOrder = [];\n    for (const [characterId, slot] of this.characterSlots) {\n      slot.uiElement = this.createCharacterSlot(slot, index);\n      this.characterGrid.addChild(slot.uiElement);\n      this.slotOrder.push(characterId);\n      index++;\n    }\n    // Append Random Select slot\n    if (this.INCLUDE_RANDOM_SLOT) {\n      const randomId = '__random__';\n      const randomSlot = this.createRandomSlot(index);\n      this.characterGrid.addChild(randomSlot);\n      this.slotOrder.push(randomId);\n    }\n    \n    this.uiRoot!.addChild(this.characterGrid);\n  }\n\n  /**\n   * Create a single character slot UI element\n   */\n  private createCharacterSlot(slot: CharacterSlot, index: number): pc.Entity {\n    const slotElement = new pc.Entity(`Character_${slot.id}`);\n    \n    // Main slot background\n    slotElement.addComponent('element', {\n      type: pc.ELEMENTTYPE_IMAGE,\n      anchor: [0, 0, 1, 1],\n      color: slot.locked ? new pc.Color(0.3, 0.3, 0.3) : new pc.Color(0.8, 0.8, 0.8),\n      opacity: slot.locked ? 0.5 : 1.0\n    });\n    \n    // Character portrait\n    const portrait = new pc.Entity('Portrait');\n    portrait.addComponent('element', {\n      type: pc.ELEMENTTYPE_IMAGE,\n      anchor: [0.1, 0.3, 0.9, 0.9],\n      textureAsset: this.getCharacterPortrait(slot.id) // Would load actual portrait\n    });\n    slotElement.addChild(portrait);\n    \n    // Character name\n    const nameLabel = new pc.Entity('NameLabel');\n    nameLabel.addComponent('element', {\n      type: pc.ELEMENTTYPE_TEXT,\n      anchor: [0, 0, 1, 0.25],\n      fontSize: 24,\n      color: new pc.Color(1, 1, 1),\n      text: slot.name,\n      alignment: new pc.Vec2(0.5, 0.5)\n    });\n    slotElement.addChild(nameLabel);\n    \n    // Archetype badge\n    const archetypeBadge = new pc.Entity('ArchetypeBadge');\n    archetypeBadge.addComponent('element', {\n      type: pc.ELEMENTTYPE_TEXT,\n      anchor: [0.7, 0.7, 1, 0.9],\n      fontSize: 14,\n      color: this.getArchetypeColor(slot.archetype),\n      text: slot.archetype.toUpperCase(),\n      alignment: new pc.Vec2(0.5, 0.5)\n    });\n    slotElement.addChild(archetypeBadge);\n    \n    // Lock indicator\n    if (slot.locked) {\n      const lockIcon = new pc.Entity('LockIcon');\n      lockIcon.addComponent('element', {\n        type: pc.ELEMENTTYPE_IMAGE,\n        anchor: [0.75, 0.75, 0.95, 0.95],\n        color: new pc.Color(1, 0.2, 0.2),\n        opacity: 0.8\n      });\n      slotElement.addChild(lockIcon);\n    }\n    \n    // Featured indicator\n    if (slot.featured) {\n      const featuredIcon = new pc.Entity('FeaturedIcon');\n      featuredIcon.addComponent('element', {\n        type: pc.ELEMENTTYPE_IMAGE,\n        anchor: [0.05, 0.75, 0.25, 0.95],\n        color: new pc.Color(1, 0.8, 0),\n        opacity: 0.9\n      });\n      slotElement.addChild(featuredIcon);\n    }\n    \n    // Add button component for interaction\n    if (!slot.locked) {\n      slotElement.addComponent('button', {\n        imageEntity: slotElement\n      });\n      \n      // Setup click handler\n      slotElement.button!.on('click', () => {\n        this.selectCharacter('player1', slot.id); // Default to player 1, would be determined by input device\n      });\n      \n      slotElement.button!.on('hoverstart', () => {\n        this.applyFocusVisual(slotElement, true);\n      });\n      \n      slotElement.button!.on('hoverend', () => {\n        this.applyFocusVisual(slotElement, false);\n      });\n    }\n    \n    return slotElement;\n  }\n\n  /**\n   * Create a Random Select slot\n   */\n  private createRandomSlot(index: number): pc.Entity {\n    const slotElement = new pc.Entity('Character_RANDOM');\n    slotElement.addComponent('element', {\n      type: pc.ELEMENTTYPE_IMAGE,\n      anchor: [0, 0, 1, 1],\n      color: new pc.Color(0.2, 0.25, 0.3),\n      opacity: 1.0\n    });\n    const question = new pc.Entity('Question');\n    question.addComponent('element', {\n      type: pc.ELEMENTTYPE_TEXT,\n      anchor: [0, 0.25, 1, 0.85],\n      fontSize: 64,\n      color: new pc.Color(1, 1, 1),\n      text: '?',\n      alignment: new pc.Vec2(0.5, 0.5)\n    });\n    slotElement.addChild(question);\n    const label = new pc.Entity('Label');\n    label.addComponent('element', {\n      type: pc.ELEMENTTYPE_TEXT,\n      anchor: [0, 0, 1, 0.25],\n      fontSize: 20,\n      color: new pc.Color(0.9, 0.9, 1),\n      text: 'RANDOM',\n      alignment: new pc.Vec2(0.5, 0.5)\n    });\n    slotElement.addChild(label);\n\n    slotElement.addComponent('button', { imageEntity: slotElement });\n    slotElement.button!.on('click', () => {\n      // Pick a random available, unlocked character id\n      const candidates = [...this.characterSlots.values()].filter(s => !s.locked).map(s => s.id);\n      if (candidates.length === 0) return;\n      const chosen = candidates[Math.floor(Math.random() * candidates.length)];\n      this.selectCharacter('player1', chosen);\n    });\n    slotElement.button!.on('hoverstart', () => this.applyFocusVisual(slotElement, true));\n    slotElement.button!.on('hoverend', () => this.applyFocusVisual(slotElement, false));\n    return slotElement;\n  }\n\n  /**\n   * Subtle focus visuals to aid navigation (historic fighting game UX cue)\n   */\n  private applyFocusVisual(slotEntity: pc.Entity, focused: boolean): void {\n    if (!slotEntity.element) return;\n    slotEntity.element.color = focused ? new pc.Color(1, 1, 0.9) : slotEntity.element.color;\n  }\n\n  /**\n   * Create variation selection panel\n   */\n  private createVariationPanel(): void {\n    this.variationPanel = new pc.Entity('VariationPanel');\n    this.variationPanel.addComponent('element', {\n      type: pc.ELEMENTTYPE_GROUP,\n      anchor: [0.1, 0.02, 0.9, 0.18],\n      color: new pc.Color(0.1, 0.1, 0.2, 0.9)\n    });\n    \n    // Panel background\n    const background = new pc.Entity('Background');\n    background.addComponent('element', {\n      type: pc.ELEMENTTYPE_IMAGE,\n      anchor: [0, 0, 1, 1],\n      color: new pc.Color(0.1, 0.1, 0.2, 0.9)\n    });\n    this.variationPanel.addChild(background);\n    \n    // Title\n    const title = new pc.Entity('Title');\n    title.addComponent('element', {\n      type: pc.ELEMENTTYPE_TEXT,\n      anchor: [0, 0.7, 1, 1],\n      fontSize: 28,\n      color: new pc.Color(1, 1, 1),\n      text: 'SELECT VARIATION',\n      alignment: new pc.Vec2(0.5, 0.5)\n    });\n    this.variationPanel.addChild(title);\n    \n    // Variation slots (will be populated dynamically)\n    this.createVariationSlots();\n    \n    // Initially hidden\n    this.variationPanel.enabled = false;\n    this.uiRoot!.addChild(this.variationPanel);\n  }\n\n  /**\n   * Create variation slot elements\n   */\n  private createVariationSlots(): void {\n    for (let i = 0; i < this.VARIATION_SLOTS; i++) {\n      const slot = new pc.Entity(`VariationSlot_${i}`);\n      slot.addComponent('element', {\n        type: pc.ELEMENTTYPE_GROUP,\n        anchor: [0.1 + (i * 0.27), 0.1, 0.35 + (i * 0.27), 0.65]\n      });\n      \n      // Slot background\n      const background = new pc.Entity('Background');\n      background.addComponent('element', {\n        type: pc.ELEMENTTYPE_IMAGE,\n        anchor: [0, 0, 1, 1],\n        color: new pc.Color(0.3, 0.3, 0.3, 0.8)\n      });\n      slot.addChild(background);\n      \n      // Variation name\n      const nameLabel = new pc.Entity('Name');\n      nameLabel.addComponent('element', {\n        type: pc.ELEMENTTYPE_TEXT,\n        anchor: [0, 0.7, 1, 1],\n        fontSize: 20,\n        color: new pc.Color(1, 1, 1),\n        alignment: new pc.Vec2(0.5, 0.5)\n      });\n      slot.addChild(nameLabel);\n      \n      // Variation description\n      const descLabel = new pc.Entity('Description');\n      descLabel.addComponent('element', {\n        type: pc.ELEMENTTYPE_TEXT,\n        anchor: [0.05, 0.1, 0.95, 0.65],\n        fontSize: 14,\n        color: new pc.Color(0.8, 0.8, 0.8),\n        alignment: new pc.Vec2(0.5, 0.5),\n        wrapLines: true\n      });\n      slot.addChild(descLabel);\n      \n      // Add button for interaction\n      slot.addComponent('button', {\n        imageEntity: background\n      });\n      \n      this.variationPanel!.addChild(slot);\n    }\n  }\n\n  /**\n   * Create countdown display for rotation timer\n   */\n  private createCountdownDisplay(): void {\n    this.countdownDisplay = new pc.Entity('CountdownDisplay');\n    this.countdownDisplay.addComponent('element', {\n      type: pc.ELEMENTTYPE_GROUP,\n      anchor: [0.7, 0.85, 1, 1]\n    });\n    \n    // Background\n    const background = new pc.Entity('Background');\n    background.addComponent('element', {\n      type: pc.ELEMENTTYPE_IMAGE,\n      anchor: [0, 0, 1, 1],\n      color: new pc.Color(0.2, 0.2, 0.3, 0.8)\n    });\n    this.countdownDisplay.addChild(background);\n    \n    // Title\n    const title = new pc.Entity('Title');\n    title.addComponent('element', {\n      type: pc.ELEMENTTYPE_TEXT,\n      anchor: [0, 0.6, 1, 1],\n      fontSize: 16,\n      color: new pc.Color(0.8, 0.8, 0.8),\n      text: 'NEXT ROTATION',\n      alignment: new pc.Vec2(0.5, 0.5)\n    });\n    this.countdownDisplay.addChild(title);\n    \n    // Timer\n    const timer = new pc.Entity('Timer');\n    timer.addComponent('element', {\n      type: pc.ELEMENTTYPE_TEXT,\n      anchor: [0, 0, 1, 0.6],\n      fontSize: 24,\n      color: new pc.Color(1, 1, 1),\n      text: '00:00:00',\n      alignment: new pc.Vec2(0.5, 0.5)\n    });\n    this.countdownDisplay.addChild(timer);\n    \n    this.uiRoot!.addChild(this.countdownDisplay);\n  }\n\n  /**\n   * Create lock indicators overlay\n   */\n  private createLockIndicators(): void {\n    this.lockIndicators = new pc.Entity('LockIndicators');\n    this.lockIndicators.addComponent('element', {\n      type: pc.ELEMENTTYPE_GROUP,\n      anchor: [0, 0, 1, 1]\n    });\n    \n    // This will be populated with dynamic lock overlays\n    this.uiRoot!.addChild(this.lockIndicators);\n  }\n\n  /**\n   * Create featured characters banner\n   */\n  private createFeaturedBanner(): void {\n    this.featuredBanner = new pc.Entity('FeaturedBanner');\n    this.featuredBanner.addComponent('element', {\n      type: pc.ELEMENTTYPE_GROUP,\n      anchor: [0, 0.85, 0.3, 1]\n    });\n    \n    // Background\n    const background = new pc.Entity('Background');\n    background.addComponent('element', {\n      type: pc.ELEMENTTYPE_IMAGE,\n      anchor: [0, 0, 1, 1],\n      color: new pc.Color(0.8, 0.6, 0, 0.8)\n    });\n    this.featuredBanner.addChild(background);\n    \n    // Text\n    const text = new pc.Entity('Text');\n    text.addComponent('element', {\n      type: pc.ELEMENTTYPE_TEXT,\n      anchor: [0.1, 0, 0.9, 1],\n      fontSize: 18,\n      color: new pc.Color(1, 1, 1),\n      text: 'FEATURED THIS WEEK',\n      alignment: new pc.Vec2(0.5, 0.5)\n    });\n    this.featuredBanner.addChild(text);\n    \n    this.uiRoot!.addChild(this.featuredBanner);\n  }\n\n  /**\n   * Setup input device handling\n   */\n  private setupInputHandling(): void {\n    // Setup keyboard input for Player 1\n    this.inputDevices.set('player1', {\n      type: 'keyboard',\n      selectKey: pc.KEY_ENTER,\n      backKey: pc.KEY_ESCAPE,\n      upKey: pc.KEY_W,\n      downKey: pc.KEY_S,\n      leftKey: pc.KEY_A,\n      rightKey: pc.KEY_D\n    });\n    \n    // Setup keyboard input for Player 2 (numpad)\n    this.inputDevices.set('player2', {\n      type: 'keyboard',\n      selectKey: pc.KEY_NUMPAD_0,\n      backKey: pc.KEY_NUMPAD_0,\n      upKey: pc.KEY_NUMPAD_8,\n      downKey: pc.KEY_NUMPAD_2,\n      leftKey: pc.KEY_NUMPAD_4,\n      rightKey: pc.KEY_NUMPAD_6\n    });\n    \n    // Listen for input events\n    this.app.keyboard!.on(pc.EVENT_KEYDOWN, this.onKeyDown.bind(this));\n  }\n\n  /**\n   * Handle keyboard input\n   */\n  private onKeyDown(event: pc.KeyboardEvent): void {\n    for (const [playerId, device] of this.inputDevices) {\n      if (event.key === device.selectKey) {\n        const selection = this.playerSelections.get(playerId);\n        if (selection && !selection.characterId) {\n          this.selectFocusedCharacter(playerId);\n        } else {\n          this.confirmSelection(playerId);\n        }\n      } else if (event.key === device.backKey) {\n        this.cancelSelection(playerId);\n      } else if (event.key === device.leftKey) {\n        this.moveCursor(playerId, -1, 0);\n      } else if (event.key === device.rightKey) {\n        this.moveCursor(playerId, 1, 0);\n      } else if (event.key === device.upKey) {\n        this.moveCursor(playerId, 0, -1);\n      } else if (event.key === device.downKey) {\n        this.moveCursor(playerId, 0, 1);\n      }\n    }\n  }\n\n  /**\n   * Select the currently focused grid item for player\n   */\n  private selectFocusedCharacter(playerId: string): void {\n    const idx = this.playerCursorIndex.get(playerId) ?? 0;\n    const id = this.slotOrder[idx];\n    if (!id) return;\n    if (id === '__random__') {\n      const candidates = [...this.characterSlots.values()].filter(s => !s.locked).map(s => s.id);\n      if (candidates.length === 0) return;\n      const chosen = candidates[Math.floor(Math.random() * candidates.length)];\n      this.selectCharacter(playerId, chosen);\n    } else {\n      this.selectCharacter(playerId, id);\n    }\n  }\n\n  /**\n   * Grid navigation for character focus\n   */\n  private moveCursor(playerId: string, dx: number, dy: number): void {\n    if (!this.characterGrid || this.slotOrder.length === 0) return;\n    const cols = this.GRID_COLUMNS;\n    const total = this.slotOrder.length;\n    const current = this.playerCursorIndex.get(playerId) ?? 0;\n    const row = Math.floor(current / cols);\n    const col = current % cols;\n    let newRow = Math.max(0, Math.min(Math.floor((current + dy * cols) / cols), Math.ceil(total / cols)));\n    let newCol = Math.max(0, Math.min(cols - 1, col + dx));\n    let next = row * cols + newCol + dy * cols;\n    if (dy !== 0) next = (row + dy) * cols + newCol;\n    // Clamp and wrap to nearest valid index\n    next = Math.max(0, Math.min(total - 1, next));\n    this.playerCursorIndex.set(playerId, next);\n    this.updateFocusHighlight(playerId);\n    const targetId = this.slotOrder[next];\n    if (targetId && targetId !== '__random__') {\n      const slot = this.characterSlots.get(targetId);\n      if (slot && !slot.locked) {\n        // Hover-like feedback\n        this.applyFocusVisual(slot.uiElement, true);\n      }\n    }\n  }\n\n  private updateFocusHighlight(playerId: string): void {\n    // Clear previous highlights by resetting colors on all slots (subtle)\n    for (const [, slot] of this.characterSlots) {\n      if (slot.uiElement?.element) {\n        slot.uiElement.element.color = slot.locked ? new pc.Color(0.3, 0.3, 0.3) : new pc.Color(0.8, 0.8, 0.8);\n      }\n    }\n    // Highlight current focus\n    const idx = this.playerCursorIndex.get(playerId) ?? 0;\n    const id = this.slotOrder[idx];\n    if (!id) return;\n    if (id === '__random__') {\n      const randomEntity = this.characterGrid!.findByName('Character_RANDOM');\n      if (randomEntity?.element) randomEntity.element.color = new pc.Color(1, 1, 0.9);\n      return;\n    }\n    const slot = this.characterSlots.get(id);\n    if (slot?.uiElement?.element) {\n      slot.uiElement.element.color = new pc.Color(1, 1, 0.9);\n    }\n  }\n\n  /**\n   * Setup event listeners for rotation service\n   */\n  private setupEventListeners(): void {\n    // Listen for rotation changes\n    this.rotationService.on('statechange', () => {\n      this.updateCharacterAvailability();\n    });\n    \n    // Listen for entitlement changes\n    this.app.on('entitlements:changed', () => {\n      this.updateCharacterAvailability();\n    });\n  }\n\n  /**\n   * Select a character for a player\n   */\n  private selectCharacter(playerId: string, characterId: string): void {\n    const selection = this.playerSelections.get(playerId);\n    if (!selection || selection.confirmed) return;\n    \n    // Check if character is available\n    if (!this.rotationService.isCharacterAvailable(characterId, this.currentMode)) {\n      console.warn(`CharacterSelectUI: Character '${characterId}' not available for ${playerId}`);\n      return;\n    }\n    \n    // Update selection\n    selection.characterId = characterId;\n    selection.variationId = null; // Reset variation\n    \n    // Show variation panel\n    this.showVariationPanel(characterId);\n    \n    // Start selection timeout\n    this.startSelectionTimeout(playerId);\n    \n    console.log(`CharacterSelectUI: ${playerId} selected ${characterId}`);\n    \n    // Emit event\n    this.app.fire('characterselect:character', {\n      playerId,\n      characterId,\n      selection: { ...selection }\n    });\n  }\n\n  /**\n   * Select a variation for the current character\n   */\n  private selectVariation(playerId: string, variationId: string): void {\n    const selection = this.playerSelections.get(playerId);\n    if (!selection || !selection.characterId) return;\n    \n    selection.variationId = variationId;\n    \n    console.log(`CharacterSelectUI: ${playerId} selected variation ${variationId}`);\n    \n    // Emit event\n    this.app.fire('characterselect:variation', {\n      playerId,\n      variationId,\n      selection: { ...selection }\n    });\n  }\n\n  /**\n   * Confirm selection for a player\n   */\n  private confirmSelection(playerId: string): void {\n    const selection = this.playerSelections.get(playerId);\n    if (!selection || !selection.characterId) return;\n    \n    selection.confirmed = true;\n    \n    // Clear timeout\n    this.clearSelectionTimeout(playerId);\n    \n    console.log(`CharacterSelectUI: ${playerId} confirmed selection`);\n    \n    // Emit event\n    this.app.fire('characterselect:confirm', {\n      playerId,\n      selection: { ...selection }\n    });\n    \n    // Check if all players ready\n    if (this.allPlayersReady()) {\n      this.onAllPlayersReady();\n    }\n  }\n\n  /**\n   * Cancel selection for a player\n   */\n  private cancelSelection(playerId: string): void {\n    const selection = this.playerSelections.get(playerId);\n    if (!selection) return;\n    \n    selection.characterId = null;\n    selection.variationId = null;\n    selection.confirmed = false;\n    \n    // Clear timeout\n    this.clearSelectionTimeout(playerId);\n    \n    // Hide variation panel\n    this.hideVariationPanel();\n    \n    console.log(`CharacterSelectUI: ${playerId} cancelled selection`);\n    \n    // Emit event\n    this.app.fire('characterselect:cancel', { playerId });\n  }\n\n  /**\n   * Show variation panel for selected character\n   */\n  private showVariationPanel(characterId: string): void {\n    const slot = this.characterSlots.get(characterId);\n    if (!slot || !this.variationPanel) return;\n    \n    // Update variation slots\n    const variationSlots = this.variationPanel.findByTag('variationslot');\n    \n    for (let i = 0; i < Math.min(slot.variations.length, this.VARIATION_SLOTS); i++) {\n      const variation = slot.variations[i];\n      const slotElement = this.variationPanel.children[i + 2]; // Skip background and title\n      \n      if (slotElement) {\n        // Update text\n        const nameLabel = slotElement.findByName('Name');\n        const descLabel = slotElement.findByName('Description');\n        \n        if (nameLabel?.element) {\n          nameLabel.element.text = variation.name;\n        }\n        \n        if (descLabel?.element) {\n          descLabel.element.text = variation.description;\n        }\n        \n        // Setup click handler\n        if (slotElement.button) {\n          slotElement.button.off('click');\n          slotElement.button.on('click', () => {\n            this.selectVariation('player1', variation.id); // Default to player 1\n          });\n        }\n        \n        slotElement.enabled = true;\n      }\n    }\n    \n    // Hide unused slots\n    for (let i = slot.variations.length; i < this.VARIATION_SLOTS; i++) {\n      const slotElement = this.variationPanel.children[i + 2];\n      if (slotElement) {\n        slotElement.enabled = false;\n      }\n    }\n    \n    this.variationPanel.enabled = true;\n  }\n\n  /**\n   * Hide variation panel\n   */\n  private hideVariationPanel(): void {\n    if (this.variationPanel) {\n      this.variationPanel.enabled = false;\n    }\n  }\n\n  /**\n   * Start selection timeout for a player\n   */\n  private startSelectionTimeout(playerId: string): void {\n    this.clearSelectionTimeout(playerId);\n    \n    const timeoutId = window.setTimeout(() => {\n      console.log(`CharacterSelectUI: Selection timeout for ${playerId}`);\n      this.cancelSelection(playerId);\n    }, this.SELECTION_TIMEOUT);\n    \n    this.selectionTimeouts.set(playerId, timeoutId);\n  }\n\n  /**\n   * Clear selection timeout for a player\n   */\n  private clearSelectionTimeout(playerId: string): void {\n    const timeoutId = this.selectionTimeouts.get(playerId);\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n      this.selectionTimeouts.delete(playerId);\n    }\n  }\n\n  /**\n   * Check if all players are ready\n   */\n  private allPlayersReady(): boolean {\n    for (const selection of this.playerSelections.values()) {\n      if (!selection.confirmed) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Handle all players ready state\n   */\n  private onAllPlayersReady(): void {\n    console.log('CharacterSelectUI: All players ready, proceeding to match');\n    \n    // Emit final selections\n    const selections = Object.fromEntries(this.playerSelections);\n    this.app.fire('characterselect:ready', { selections });\n  }\n\n  /**\n   * Update character availability based on rotation/entitlements\n   */\n  private updateCharacterAvailability(): void {\n    for (const [characterId, slot] of this.characterSlots) {\n      const wasLocked = slot.locked;\n      slot.locked = !this.rotationService.isCharacterAvailable(characterId, this.currentMode);\n      \n      // Update UI if lock status changed\n      if (wasLocked !== slot.locked && slot.uiElement) {\n        this.updateCharacterSlotLock(slot);\n      }\n    }\n  }\n\n  /**\n   * Update character slot lock visual\n   */\n  private updateCharacterSlotLock(slot: CharacterSlot): void {\n    if (!slot.uiElement) return;\n    \n    // Update opacity and color\n    slot.uiElement.element!.opacity = slot.locked ? 0.5 : 1.0;\n    slot.uiElement.element!.color = slot.locked ? new pc.Color(0.3, 0.3, 0.3) : new pc.Color(0.8, 0.8, 0.8);\n    \n    // Toggle lock icon\n    const lockIcon = slot.uiElement.findByName('LockIcon');\n    if (lockIcon) {\n      lockIcon.enabled = slot.locked;\n    }\n    \n    // Update button state\n    if (slot.uiElement.button) {\n      slot.uiElement.button.enabled = !slot.locked;\n    }\n  }\n\n  /**\n   * Update the entire UI\n   */\n  private updateUI(): void {\n    this.updateCharacterAvailability();\n    this.updateCountdown();\n    this.updateFeaturedBanner();\n  }\n\n  /**\n   * Update countdown display\n   */\n  private updateCountdown(): void {\n    if (!this.countdownDisplay) return;\n    \n    const timeUntilRotation = this.rotationService.getTimeUntilRotation();\n    const timer = this.countdownDisplay.findByName('Timer');\n    \n    if (timer?.element) {\n      const hours = Math.floor(timeUntilRotation / (1000 * 60 * 60));\n      const minutes = Math.floor((timeUntilRotation % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((timeUntilRotation % (1000 * 60)) / 1000);\n      \n      timer.element.text = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    }\n  }\n\n  /**\n   * Update featured banner\n   */\n  private updateFeaturedBanner(): void {\n    const featuredCharacters = this.rotationService.getFeaturedCharacters();\n    \n    if (this.featuredBanner && featuredCharacters.length > 0) {\n      this.featuredBanner.enabled = true;\n    } else if (this.featuredBanner) {\n      this.featuredBanner.enabled = false;\n    }\n  }\n\n  /**\n   * Get character portrait texture (placeholder)\n   */\n  private getCharacterPortrait(characterId: string): pc.Asset | null {\n    // This would load the actual portrait texture\n    return null;\n  }\n\n  /**\n   * Get color for archetype badge\n   */\n  private getArchetypeColor(archetype: string): pc.Color {\n    const colors: Record<string, pc.Color> = {\n      'shoto': new pc.Color(0.2, 0.6, 1.0),\n      'rushdown': new pc.Color(1.0, 0.2, 0.2),\n      'grappler': new pc.Color(0.6, 0.2, 1.0),\n      'zoner': new pc.Color(0.2, 1.0, 0.2),\n      'technical': new pc.Color(1.0, 0.8, 0.2)\n    };\n    \n    return colors[archetype] || new pc.Color(0.8, 0.8, 0.8);\n  }\n\n  /**\n   * Set game mode and refresh UI\n   */\n  setGameMode(mode: GameMode): void {\n    this.currentMode = mode;\n    this.updateCharacterAvailability();\n  }\n\n  /**\n   * Get current selections\n   */\n  getSelections(): Map<string, PlayerSelection> {\n    return new Map(this.playerSelections);\n  }\n\n  /**\n   * Reset all selections\n   */\n  resetSelections(): void {\n    for (const [playerId, selection] of this.playerSelections) {\n      selection.characterId = null;\n      selection.variationId = null;\n      selection.confirmed = false;\n      this.clearSelectionTimeout(playerId);\n    }\n    \n    this.hideVariationPanel();\n  }\n\n  /**\n   * Start regular updates\n   */\n  startUpdates(): void {\n    this.app.on('update', this.updateCountdown.bind(this));\n  }\n\n  /**\n   * Stop regular updates\n   */\n  stopUpdates(): void {\n    this.app.off('update', this.updateCountdown.bind(this));\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    this.stopUpdates();\n    \n    // Clear all timeouts\n    for (const timeoutId of this.selectionTimeouts.values()) {\n      clearTimeout(timeoutId);\n    }\n    this.selectionTimeouts.clear();\n    \n    // Remove UI\n    if (this.uiRoot?.parent) {\n      this.uiRoot.destroy();\n    }\n    \n    console.log('CharacterSelectUI: Destroyed');\n  }\n}\n\n/**\n * How to extend this system:\n * \n * 1. Adding gamepad support: Extend setupInputHandling with gamepad APIs\n * 2. Adding animations: Use PlayCanvas Tween for smooth transitions\n * 3. Adding audio: Integrate with audio system for selection sounds\n * 4. Adding custom UI themes: Create theme system with color/style variants\n * 5. Adding accessibility: Add screen reader support and keyboard navigation\n */", "import * as pc from 'playcanvas';\nimport { GameState } from './GameStateStack';\nimport { RotationService } from '../../scripts/RotationService';\nimport { CharacterLoader } from '../../scripts/CharacterLoader';\nimport { CharacterSelectUI } from '../../scripts/CharacterSelectUI';\n\nexport class CharacterSelectState implements GameState {\n\tpublic name = 'characterselect';\n\tprivate app: pc.Application;\n\tprivate events: any;\n\tprivate rotation!: RotationService;\n\tprivate loader!: CharacterLoader;\n\tprivate ui!: CharacterSelectUI;\n\tprivate handlersBound = false;\n\n\tconstructor(app: pc.Application, events: any) {\n\t\tthis.app = app;\n\t\tthis.events = events;\n\t}\n\n\tasync enter(): Promise<void> {\n\t\t// Initialize services for selection\n\t\tthis.rotation = new RotationService(this.app, (this.app as any)._characters ?? (this.app as any)._services?.resolve?.('characters')) as any;\n\t\ttry { await this.rotation.initialize(); } catch {}\n\t\tthis.loader = new CharacterLoader(this.app);\n\t\tthis.ui = new CharacterSelectUI(this.app, this.rotation, this.loader);\n\t\tawait this.ui.initialize();\n\t\tthis.ui.startUpdates();\n\t\tthis.bindEvents();\n\t}\n\n\texit(): void {\n\t\tthis.unbindEvents();\n\t\tthis.ui?.destroy();\n\t}\n\n\tupdate(dt: number): void {}\n\n\tprivate bindEvents(): void {\n\t\tif (this.handlersBound) return;\n\t\tthis.handlersBound = true;\n\t\tthis.app.on('characterselect:confirm', this.onConfirm, this);\n\t\tthis.app.on('characterselect:ready', this.onReady, this);\n\t}\n\n\tprivate unbindEvents(): void {\n\t\tif (!this.handlersBound) return;\n\t\tthis.handlersBound = false;\n\t\tthis.app.off('characterselect:confirm', this.onConfirm, this);\n\t\tthis.app.off('characterselect:ready', this.onReady, this);\n\t}\n\n\tprivate onConfirm(data: any): void {\n\t\t// Persist interim selections (per player)\n\t\ttry {\n\t\t\tconst services = (this.app as any)._services;\n\t\t\tconst sel = services.has('selections') ? services.resolve('selections') : {};\n\t\t\tsel[data.playerId] = data.selection;\n\t\t\tif (!services.has('selections')) services.register('selections', sel);\n\t\t\tlocalStorage.setItem('sf3_selections', JSON.stringify(sel));\n\t\t} catch {}\n\t}\n\n\tprivate onReady(evt: any): void {\n\t\ttry {\n\t\t\tconst services = (this.app as any)._services;\n\t\t\tservices.register('selections', evt.selections);\n\t\t\tlocalStorage.setItem('sf3_selections', JSON.stringify(evt.selections));\n\t\t} catch {}\n\t\tthis.events.emit('state:goto', { state: 'match' });\n\t}\n}\n\n", "export class PreloadManager {\n\tprivate manifest: { assets: { path: string; type: string; sha256?: string }[] } = { assets: [] };\n\n\tasync loadManifest(url: string = '/assets/manifest.json'): Promise<void> {\n\t\ttry {\n\t\t\tconst res = await fetch(url, { cache: 'no-store' });\n\t\t\tif (!res.ok) {\n\t\t\t\tconsole.warn(`[PreloadManager] Manifest not found (${res.status}) at ${url}. Continuing without it.`);\n\t\t\t\tthis.manifest = { assets: [] };\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.manifest = await res.json();\n\t\t} catch (err) {\n\t\t\tconsole.warn(`[PreloadManager] Manifest load error at ${url}. Using empty manifest.`, err);\n\t\t\tthis.manifest = { assets: [] };\n\t\t}\n\t}\n\n\tgetAssetsByType(type: string): string[] {\n\t\treturn this.manifest.assets.filter(a => a.type === type).map(a => a.path);\n\t}\n\n\tasync getJson<T = unknown>(path: string): Promise<T> {\n\t\tconst res = await fetch(path, { cache: 'no-store' });\n\t\tif (!res.ok) throw new Error(`JSON load failed: ${path}`);\n\t\tconst text = await res.text();\n\t\tconst decrypted = await this.tryDecrypt(text);\n\t\ttry {\n\t\t\tconst entry = this.manifest.assets.find(a => a.path === path);\n\t\t\tif (entry?.sha256 && 'crypto' in window && (window.crypto as any).subtle) {\n\t\t\t\tconst buf = new TextEncoder().encode(decrypted ?? text);\n\t\t\t\tconst hashBuf = await (window.crypto as any).subtle.digest('SHA-256', buf);\n\t\t\t\tconst hashArray = Array.from(new Uint8Array(hashBuf));\n\t\t\t\tconst hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n\t\t\t\tif (hashHex !== entry.sha256) throw new Error(`Integrity check failed for ${path}`);\n\t\t\t}\n\t\t} catch {}\n\t\treturn JSON.parse(decrypted ?? text) as T;\n\t}\n\n\tprivate async tryDecrypt(text: string): Promise<string | null> {\n\t\tif (!text.startsWith('ENC1|')) return null;\n\t\ttry {\n\t\t\tconst parts = text.split('|');\n\t\t\tconst iv = Uint8Array.from(atob(parts[1]), c => c.charCodeAt(0));\n\t\t\tconst tag = Uint8Array.from(atob(parts[2]), c => c.charCodeAt(0));\n\t\t\tconst enc = Uint8Array.from(atob(parts[3]), c => c.charCodeAt(0));\n\t\t\tconst keyStr = (window as any).__ASSET_KEY__ || 'dev-asset-key-change-me';\n\t\t\tconst keyBuf = new TextEncoder().encode(keyStr);\n\t\t\tconst key = await (window.crypto as any).subtle.importKey('raw', await (window.crypto as any).subtle.digest('SHA-256', keyBuf), { name: 'AES-GCM' }, false, ['decrypt']);\n\t\t\tconst plain = await (window.crypto as any).subtle.decrypt({ name: 'AES-GCM', iv, additionalData: undefined, tagLength: 128 }, key, concat(enc, tag));\n\t\t\treturn new TextDecoder().decode(new Uint8Array(plain));\n\t\t} catch {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nfunction concat(a: Uint8Array, b: Uint8Array): Uint8Array {\n\tconst out = new Uint8Array(a.length + b.length);\n\tout.set(a, 0);\n\tout.set(b, a.length);\n\treturn out;\n}\n\n", "import * as pc from 'playcanvas';\n\nexport type AIPolicy = (ctx: { dt: number; app: pc.Application; state: any }) => void;\n\nexport class AIManager {\n\tprivate app: pc.Application;\n\tprivate policies: Map<string, AIPolicy> = new Map();\n\tprivate active: string | null = null;\n\tprivate dda: { difficulty: number } = { difficulty: 1.0 };\n\n\tconstructor(app: pc.Application) {\n\t\tthis.app = app;\n\t}\n\n\tregisterPolicy(name: string, policy: AIPolicy): void {\n\t\tthis.policies.set(name, policy);\n\t}\n\n\tactivate(name: string): void {\n\t\tif (this.policies.has(name)) this.active = name;\n\t}\n\n\tsetDifficulty(x: number): void { this.dda.difficulty = Math.max(0.1, Math.min(3.0, x)); }\n\n\tupdate(dt: number): void {\n\t\tif (!this.active) return;\n\t\tconst policy = this.policies.get(this.active);\n\t\tpolicy?.({ dt, app: this.app, state: { difficulty: this.dda.difficulty } });\n\t}\n}", "import { CharacterData } from '../../../types/character';\n\nexport class DecompDataService {\n  public async loadGroundTruthCharacter(): Promise<CharacterData | null> {\n    try {\n      const res = await fetch('/data/characters_decomp/sf3_ground_truth_seed.json');\n      if (!res.ok) return null;\n      const data = await res.json();\n      return data as CharacterData;\n    } catch {\n      return null;\n    }\n  }\n\n  // Browser-side fallback: if json not present, attempt to fetch raw decomp table and heuristically parse\n  public async deriveFromDecompIfAvailable(): Promise<CharacterData | null> {\n    try {\n      const urlCandidates = [\n        '/sfiii-decomp/src/anniversary/bin2obj/char_table.c'\n      ];\n      let text: string | null = null;\n      for (const u of urlCandidates) {\n        try {\n          const r = await fetch(u, { cache: 'no-store' });\n          if (r.ok) { text = await r.text(); break; }\n        } catch {}\n      }\n      if (!text) return null;\n\n      const triplets = this.parseHeuristicMoveTriplets(text);\n      const moves = this.assignToMockMoveNames(triplets);\n      const characterId = 'sf3_ground_truth_seed';\n      const animations: any = {};\n      for (const k of Object.keys(moves)) {\n        const total = Math.max(1, moves[k].startup + moves[k].active + moves[k].recovery);\n        animations[`move_${k}`] = { frameCount: total, duration: Math.max(83, total * 16.6), loop: false };\n      }\n      const json: CharacterData = {\n        characterId,\n        name: characterId,\n        displayName: characterId,\n        archetype: 'technical' as any,\n        spritePath: `/assets/sprites/${characterId}.png`,\n        health: 1000,\n        walkSpeed: 150,\n        dashSpeed: 300,\n        jumpHeight: 380,\n        complexity: 'medium',\n        strengths: [],\n        weaknesses: [],\n        uniqueMechanics: [],\n        moves: moves as any,\n        animations\n      } as any;\n      return json;\n    } catch {\n      return null;\n    }\n  }\n\n  private parseHeuristicMoveTriplets(source: string): Array<{ startup: number; active: number; recovery: number }> {\n    const hexOrDec = /0x[0-9A-Fa-f]+|\\d+/g;\n    const numbers: number[] = [];\n    for (const m of source.matchAll(hexOrDec)) {\n      const t = m[0];\n      const v = t.startsWith('0x') ? parseInt(t, 16) : parseInt(t, 10);\n      if (!Number.isFinite(v)) continue;\n      numbers.push(v >>> 0);\n    }\n    const smalls = numbers.filter(n => n > 0 && n <= 120);\n    const triplets: Array<{ startup: number; active: number; recovery: number }> = [];\n    for (let i = 0; i + 2 < smalls.length; i += 3) {\n      const a = smalls[i + 0];\n      const b = smalls[i + 1];\n      const c = smalls[i + 2];\n      if (a + b + c <= 0) continue;\n      if (a > 60 || b > 60 || c > 90) continue;\n      triplets.push({ startup: a, active: b, recovery: c });\n    }\n    return triplets;\n  }\n\n  private assignToMockMoveNames(triplets: Array<{ startup: number; active: number; recovery: number }>): Record<string, any> {\n    const names = [\n      'light_punch','medium_punch','heavy_punch',\n      'light_kick','medium_kick','heavy_kick',\n      'special_1','special_2','special_3','super_1'\n    ];\n    const out: Record<string, any> = {};\n    for (let i = 0; i < names.length && i < triplets.length; i++) {\n      out[names[i]] = triplets[i];\n    }\n    return out;\n  }\n}\n\n", "/**\n * PlayCanvas RetentionClient SDK\n *\n * Drop-in SDK for tracking session starts/ends, objectives, mastery XP,\n * store impressions, and purchases. All operations are non-blocking and fail-safe.\n *\n * Usage:\n * const retention = new RetentionClient({\n *   apiEndpoint: 'https://api.yourgame.com',\n *   userId: 'u_123',\n *   apiKey: 'your-api-key'\n * });\n *\n * retention.startSession();\n * retention.trackMatchResult({ ... });\n *\n * How to extend:\n * - Add new event types by implementing IRetentionEvent interface\n * - Override event validation in validateEvent() method\n * - Extend offline storage by modifying OfflineEventQueue class\n */\n\nimport { EventEmitter } from 'eventemitter3';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface RetentionConfig {\n  apiEndpoint: string;\n  userId: string;\n  apiKey: string;\n  batchSize?: number;\n  flushIntervalMs?: number;\n  maxRetries?: number;\n  offlineStorageKey?: string;\n  enableDebugLogging?: boolean;\n}\n\nexport interface IRetentionEvent {\n  event: string;\n  v: string;\n  ts: number;\n  userId: string;\n  sessionHash: string;\n  [key: string]: any;\n}\n\nexport interface SessionStartEvent extends IRetentionEvent {\n  event: 'session_start';\n  platform?: 'web' | 'mobile' | 'desktop';\n  clientVersion?: string;\n  returningPlayer?: boolean;\n  daysSinceLastSession?: number;\n}\n\nexport interface MatchResultEvent extends IRetentionEvent {\n  event: 'match_result';\n  matchId: string;\n  ranked: boolean;\n  mmrDelta?: number;\n  characterId: string;\n  opponentId: string;\n  roundsWon: number;\n  roundsLost: number;\n  disconnect: boolean;\n  matchDurationMs?: number;\n  winStreak?: number;\n}\n\nexport interface ProgressionGrantEvent extends IRetentionEvent {\n  event: 'progression_grant';\n  grantType: 'account_xp' | 'character_xp' | 'mastery_points' | 'cosmetic_unlock' | 'title_unlock' | 'achievement';\n  amount: number;\n  reason: 'match_victory' | 'match_participation' | 'daily_objective' | 'weekly_objective' | 'lab_completion' | 'prestige' | 'mentor_activity';\n  itemId?: string;\n  characterId?: string;\n  previousLevel?: number;\n  newLevel?: number;\n  prestigeLevel?: number;\n}\n\nexport interface StoreImpressionEvent extends IRetentionEvent {\n  event: 'store_impression';\n  storeSection: 'featured' | 'cosmetics' | 'characters' | 'bundles' | 'seasonal';\n  itemsViewed?: Array<{\n    itemId: string;\n    price: number;\n    currency: string;\n    onSale?: boolean;\n    returnWindowDays?: number;\n  }>;\n  viewDurationMs?: number;\n  clickedItems?: string[];\n}\n\nexport interface PurchaseCompletedEvent extends IRetentionEvent {\n  event: 'purchase_completed';\n  transactionId: string;\n  totalAmount: number;\n  currency: string;\n  items: Array<{\n    itemId: string;\n    itemType: 'skin' | 'title' | 'banner' | 'announcer' | 'vfx_palette' | 'bundle' | 'stage_variant';\n    price: number;\n    quantity: number;\n  }>;\n  paymentMethod?: 'card' | 'paypal' | 'apple_pay' | 'google_pay';\n  bundleDiscount?: number;\n  taxAmount?: number;\n  firstPurchase?: boolean;\n}\n\n// ClubEvent interface was missing, adding a placeholder based on usage\nexport interface ClubEvent extends IRetentionEvent {\n  event: 'club_event';\n  clubId: string;\n  action: string;\n}\n\nclass OfflineEventQueue {\n  private storageKey: string;\n  private maxSize: number = 1000;\n\n  constructor(storageKey: string) {\n    this.storageKey = storageKey;\n  }\n\n  enqueue(event: IRetentionEvent): void {\n    try {\n      const queue = this.getQueue();\n      queue.push(event);\n\n      // Trim queue if too large\n      if (queue.length > this.maxSize) {\n        queue.splice(0, queue.length - this.maxSize);\n      }\n\n      localStorage.setItem(this.storageKey, JSON.stringify(queue));\n    } catch (error) {\n      // Fail silently if localStorage is unavailable\n      console.warn('RetentionClient: Unable to store offline event', error);\n    }\n  }\n\n  dequeueAll(): IRetentionEvent[] {\n    try {\n      const queue = this.getQueue();\n      localStorage.setItem(this.storageKey, JSON.stringify([]));\n      return queue;\n    } catch (error) {\n      console.warn('RetentionClient: Unable to retrieve offline events', error);\n      return [];\n    }\n  }\n\n  private getQueue(): IRetentionEvent[] {\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      return [];\n    }\n  }\n}\n\nexport class RetentionClient extends EventEmitter {\n  private config: Required<RetentionConfig>;\n  private sessionHash: string;\n  private eventQueue: IRetentionEvent[] = [];\n  private offlineQueue: OfflineEventQueue;\n  private eventEndpoints: Record<string, string> = {\n    session_start: '/analytics/events',\n    match_result: '/analytics/events',\n    progression_grant: '/progression/events',\n    store_impression: '/commerce/events',\n    purchase_completed: '/commerce/events',\n    club_event: '/social/events',\n  };\n  private flushTimer: number | null = null;\n  private isOnline: boolean = true;\n\n  constructor(config: RetentionConfig) {\n    super();\n\n    this.config = {\n      batchSize: 10,\n      flushIntervalMs: 30000, // 30 seconds\n      maxRetries: 3,\n      offlineStorageKey: 'retention_events',\n      enableDebugLogging: false,\n      ...config\n    };\n\n    this.sessionHash = `s_${uuidv4().replace(/-/g, '')}`;\n    this.offlineQueue = new OfflineEventQueue(this.config.offlineStorageKey);\n\n    this.setupNetworkMonitoring();\n    this.setupFlushTimer();\n    this.processOfflineEvents();\n  }\n\n  /**\n   * Start a new session and track session_start event\n   */\n  public startSession(additionalData?: Partial<SessionStartEvent>): void {\n    const event: SessionStartEvent = {\n      event: 'session_start',\n      v: '1.0',\n      ts: Math.floor(Date.now() / 1000),\n      userId: this.config.userId,\n      sessionHash: this.sessionHash,\n      platform: this.detectPlatform(),\n      clientVersion: this.getClientVersion(),\n      returningPlayer: this.isReturningPlayer(),\n      daysSinceLastSession: this.getDaysSinceLastSession(),\n      ...additionalData\n    };\n\n    this.trackEvent(event);\n    this.updateLastSessionTime();\n  }\n\n  /**\n   * Track a match result\n   */\n  public trackMatchResult(matchData: Omit<MatchResultEvent, 'event' | 'v' | 'ts' | 'userId' | 'sessionHash'>): void {\n    const event: MatchResultEvent = {\n      event: 'match_result',\n      v: '1.0',\n      ts: Math.floor(Date.now() / 1000),\n      userId: this.config.userId,\n      sessionHash: this.sessionHash,\n      ...matchData\n    };\n\n    this.trackEvent(event);\n  }\n\n  /**\n   * Track club-related events\n   */\n  public trackClubEvent(action: string, clubId?: string): void {\n    const event: ClubEvent = {\n      event: 'club_event',\n      v: '1.0',\n      ts: Math.floor(Date.now() / 1000),\n      userId: this.config.userId,\n      sessionHash: this.sessionHash,\n      clubId: clubId || 'unknown',\n      action: action\n    };\n\n    this.trackEvent(event);\n  }\n\n  /**\n   * Track progression grants (XP, unlocks, etc.)\n   */\n  public trackProgression(grantType: ProgressionGrantEvent['grantType'], amount: number, reason: ProgressionGrantEvent['reason'], additionalData?: Omit<ProgressionGrantEvent, 'event' | 'v' | 'ts' | 'userId' | 'sessionHash' | 'grantType' | 'amount' | 'reason'>): void {\n    const event: ProgressionGrantEvent = {\n      event: 'progression_grant',\n      v: '1.0',\n      ts: Math.floor(Date.now() / 1000),\n      userId: this.config.userId,\n      sessionHash: this.sessionHash,\n      grantType: grantType,\n      amount: amount,\n      reason: reason,\n      ...additionalData\n    };\n\n    this.trackEvent(event);\n  }\n\n  /**\n   * Track store impressions\n   */\n  public trackStoreImpression(section: StoreImpressionEvent['storeSection'], additionalData?: Omit<StoreImpressionEvent, 'event' | 'v' | 'ts' | 'userId' | 'sessionHash' | 'storeSection'>): void {\n    const event: StoreImpressionEvent = {\n      event: 'store_impression',\n      v: '1.0',\n      ts: Math.floor(Date.now() / 1000),\n      userId: this.config.userId,\n      sessionHash: this.sessionHash,\n      storeSection: section,\n      ...additionalData\n    };\n\n    this.trackEvent(event);\n  }\n\n  /**\n   * Track completed purchases\n   */\n  public trackPurchase(transactionId: string, totalAmount: number, currency: string, items: PurchaseCompletedEvent['items'], additionalData?: Omit<PurchaseCompletedEvent, 'event' | 'v' | 'ts' | 'userId' | 'sessionHash' | 'transactionId' | 'totalAmount' | 'currency' | 'items'>): void {\n    const event: PurchaseCompletedEvent = {\n      event: 'purchase_completed',\n      v: '1.0',\n      ts: Math.floor(Date.now() / 1000),\n      userId: this.config.userId,\n      sessionHash: this.sessionHash,\n      transactionId: transactionId,\n      totalAmount: totalAmount,\n      currency: currency,\n      items: items,\n      ...additionalData\n    };\n\n    this.trackEvent(event);\n  }\n\n  /**\n   * Manually flush all queued events\n   */\n  public flush(): Promise<void> {\n    return this.flushEvents();\n  }\n\n  /**\n   * End session and flush all remaining events\n   */\n  public endSession(): Promise<void> {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer);\n      this.flushTimer = null;\n    }\n\n    return this.flushEvents();\n  }\n\n  private trackEvent(event: IRetentionEvent): void {\n    if (!this.validateEvent(event)) {\n      this.log('Invalid event data:', event);\n      return;\n    }\n\n    this.eventQueue.push(event);\n    this.emit('event_tracked', event);\n\n    // Auto-flush if batch size reached\n    if (this.eventQueue.length >= this.config.batchSize) {\n      this.flushEvents();\n    }\n  }\n\n  private async flushEvents(): Promise<void> {\n    if (this.eventQueue.length === 0) {\n      return;\n    }\n\n    const eventsToSend = [...this.eventQueue];\n    this.eventQueue = [];\n\n    const eventsByEndpoint: Record<string, IRetentionEvent[]> = {};\n    for (const event of eventsToSend) {\n      const endpoint = this.eventEndpoints[event.event];\n      if (endpoint) {\n        if (!eventsByEndpoint[endpoint]) {\n          eventsByEndpoint[endpoint] = [];\n        }\n        eventsByEndpoint[endpoint].push(event);\n      }\n    }\n\n    for (const endpoint in eventsByEndpoint) {\n      try {\n        if (this.isOnline) {\n          await this.sendEvents(endpoint, eventsByEndpoint[endpoint]);\n          this.log(`Successfully sent ${eventsByEndpoint[endpoint].length} events to ${endpoint}`);\n          this.emit('events_sent', { endpoint, events: eventsByEndpoint[endpoint] });\n        } else {\n          // Store offline for later sending\n          eventsByEndpoint[endpoint].forEach(event => this.offlineQueue.enqueue(event));\n          this.log(`Stored ${eventsByEndpoint[endpoint].length} events offline for ${endpoint}`);\n        }\n      } catch (error) {\n        this.log(`Failed to send events to ${endpoint}, storing offline:`, error);\n        eventsByEndpoint[endpoint].forEach(event => this.offlineQueue.enqueue(event));\n        this.emit('events_failed', { endpoint, events: eventsByEndpoint[endpoint], error });\n      }\n    }\n  }\n\n  private async _sendWithRetry(endpoint: string, payload: IRetentionEvent[], retryCount: number = 0): Promise<void> {\n    try {\n      const response = await fetch(`${this.config.apiEndpoint}${endpoint}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.config.apiKey}`,\n          'X-Client-Version': this.getClientVersion()\n        },\n        body: JSON.stringify({ events: payload })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n    } catch (error) {\n      if (retryCount < this.config.maxRetries) {\n        const delay = Math.pow(2, retryCount) * 1000;\n        await new Promise(resolve => setTimeout(resolve, delay));\n        return this._sendWithRetry(endpoint, payload, retryCount + 1);\n      }\n      throw error;\n    }\n  }\n\n  private async sendEvents(endpointOrEvents: string | IRetentionEvent[], events?: IRetentionEvent[]): Promise<void> {\n    let endpoint: string;\n    let payload: IRetentionEvent[];\n\n    if (typeof endpointOrEvents === 'string') {\n      endpoint = endpointOrEvents;\n      payload = events ?? [];\n    } else {\n      endpoint = '/analytics/events';\n      payload = endpointOrEvents;\n    }\n\n    return this._sendWithRetry(endpoint, payload);\n  }\n\n  private validateEvent(event: IRetentionEvent): boolean {\n    return !!(\n      event.event &&\n      event.v &&\n      event.ts &&\n      event.userId &&\n      event.sessionHash\n    );\n  }\n\n  private setupNetworkMonitoring(): void {\n    if (typeof window !== 'undefined') {\n      window.addEventListener('online', () => {\n        this.isOnline = true;\n        this.processOfflineEvents();\n      });\n\n      window.addEventListener('offline', () => {\n        this.isOnline = false;\n      });\n\n      this.isOnline = navigator.onLine;\n    }\n  }\n\n  private setupFlushTimer(): void {\n    this.flushTimer = setInterval(() => {\n      this.flushEvents();\n    }, this.config.flushIntervalMs) as unknown as number;\n  }\n\n  private async processOfflineEvents(): Promise<void> {\n    if (!this.isOnline) return;\n\n    const offlineEvents = this.offlineQueue.dequeueAll();\n    if (offlineEvents.length > 0) {\n      try {\n        // Default to analytics endpoint for offline events\n        await this.sendEvents('/analytics/events', offlineEvents);\n        this.log(`Successfully sent ${offlineEvents.length} offline events`);\n      } catch (error) {\n        this.log('Failed to send offline events:', error);\n        // Re-queue failed events\n        offlineEvents.forEach(event => this.offlineQueue.enqueue(event));\n      }\n    }\n  }\n\n  private detectPlatform(): 'web' | 'mobile' | 'desktop' {\n    if (typeof window === 'undefined') return 'desktop';\n\n    const userAgent = navigator.userAgent.toLowerCase();\n    if (/mobile|android|iphone|ipad/.test(userAgent)) {\n      return 'mobile';\n    }\n    return 'web';\n  }\n\n  private getClientVersion(): string {\n    // In a real implementation, this would come from your build process\n    return '1.0.0';\n  }\n\n  private isReturningPlayer(): boolean {\n    try {\n      return localStorage.getItem('retention_last_session') !== null;\n    } catch {\n      return false;\n    }\n  }\n\n  private getDaysSinceLastSession(): number {\n    try {\n      const lastSession = localStorage.getItem('retention_last_session');\n      if (!lastSession) return 0;\n\n      const lastTime = parseInt(lastSession);\n      const daysDiff = Math.floor((Date.now() - lastTime) / (1000 * 60 * 60 * 24));\n      return Math.max(0, daysDiff);\n    } catch {\n      return 0;\n    }\n  }\n\n  private updateLastSessionTime(): void {\n    try {\n      localStorage.setItem('retention_last_session', Date.now().toString());\n    } catch {\n      // Fail silently\n    }\n  }\n\n  private log(message: string, ...args: any[]): void {\n    if (this.config.enableDebugLogging) {\n      console.log(`[RetentionClient] ${message}`, ...args);\n    }\n  }\n}", "import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n", "let getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n    if (!getRandomValues) {\n        if (typeof crypto === 'undefined' || !crypto.getRandomValues) {\n            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n        }\n        getRandomValues = crypto.getRandomValues.bind(crypto);\n    }\n    return getRandomValues(rnds8);\n}\n", "const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default { randomUUID };\n", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n", "/**\n * Storefront - Direct pricing and transparent commerce system\n * \n * Enforces ethical monetization practices:\n * - Direct real currency pricing (no virtual currency abstraction)\n * - Transparent bundle discounts with visible individual prices\n * - Clear return window documentation\n * - No FOMO traps - all items have documented return paths\n * - Accessibility compliant UI\n * \n * Usage:\n * const storefront = new Storefront({\n *   retentionClient,\n *   apiEndpoint: 'https://api.yourgame.com',\n *   currency: 'USD',\n *   region: 'US'\n * });\n * \n * storefront.loadCatalog();\n * storefront.purchaseItem('skin_legendary_fire');\n * \n * How to extend:\n * - Add new item types by extending StoreItem interface\n * - Implement regional pricing by modifying loadCatalog()\n * - Add payment providers by extending PaymentMethod enum\n * - Customize UI by overriding render methods\n */\n\nimport { EventEmitter } from 'eventemitter3';\nimport { RetentionClient } from '../retention/RetentionClient';\n\nexport interface StorefrontConfig {\n  retentionClient: RetentionClient;\n  apiEndpoint: string;\n  currency: string;\n  region: string;\n  accessibilityMode?: boolean;\n  debugMode?: boolean;\n}\n\nexport interface StoreItem {\n  id: string;\n  name: string;\n  description: string;\n  type: 'skin' | 'title' | 'banner' | 'announcer' | 'vfx_palette' | 'stage_variant';\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n  price: number;\n  currency: string;\n  taxInclusive: boolean;\n  characterId?: string;\n  previewAssets: {\n    thumbnail?: string;\n    preview?: string;\n    video?: string;\n  };\n  availability: {\n    permanent: boolean;\n    returnWindowDays: number;\n    returnDate?: number; // Unix timestamp\n    seasonalEvent?: string;\n    unlockConditions?: Array<{\n      type: 'account_level' | 'character_mastery' | 'achievement' | 'event_participation';\n      value: string;\n    }>;\n  };\n  owned: boolean;\n  purchasable: boolean;\n}\n\nexport interface StoreBundle {\n  id: string;\n  name: string;\n  description: string;\n  items: string[]; // Item IDs\n  pricing: {\n    bundlePrice: number;\n    individualTotal: number;\n    savingsAmount: number;\n    savingsPercent: number;\n  };\n  currency: string;\n  taxInclusive: boolean;\n  availability: {\n    startTime: number;\n    endTime: number;\n    returnDate?: number;\n  };\n  previewAssets: {\n    thumbnail?: string;\n    preview?: string;\n  };\n  purchasable: boolean;\n}\n\nexport interface StoreSection {\n  id: string;\n  name: string;\n  items: (StoreItem | StoreBundle)[];\n  rotationDays: number;\n  lastRotation: number;\n}\n\nexport interface PurchaseRequest {\n  itemId: string;\n  paymentMethod: PaymentMethod;\n  billingDetails?: {\n    name: string;\n    email: string;\n    address?: {\n      line1: string;\n      line2?: string;\n      city: string;\n      state: string;\n      postalCode: string;\n      country: string;\n    };\n  };\n}\n\nexport interface PurchaseResult {\n  success: boolean;\n  transactionId?: string;\n  error?: string;\n  receipt?: {\n    items: Array<{\n      itemId: string;\n      name: string;\n      price: number;\n    }>;\n    totalAmount: number;\n    taxAmount: number;\n    currency: string;\n    timestamp: number;\n  };\n}\n\nexport type PaymentMethod = 'card' | 'paypal' | 'apple_pay' | 'google_pay';\n\nexport type StoreFilter = {\n  type?: StoreItem['type'];\n  rarity?: StoreItem['rarity'];\n  character?: string;\n  owned?: boolean;\n  priceRange?: { min: number; max: number };\n  searchQuery?: string;\n};\n\nexport class Storefront extends EventEmitter {\n  private config: StorefrontConfig;\n  private catalog: Map<string, StoreItem> = new Map();\n  private bundles: Map<string, StoreBundle> = new Map();\n  private sections: Map<string, StoreSection> = new Map();\n  private currentImpression: {\n    section: string;\n    startTime: number;\n    viewedItems: string[];\n    clickedItems: string[];\n  } | null = null;\n\n  constructor(config: StorefrontConfig) {\n    super();\n    this.config = config;\n    this.setupEventListeners();\n  }\n\n  /**\n   * Load store catalog from server\n   */\n  public async loadCatalog(): Promise<void> {\n    try {\n      const apiUrl = this.config.apiEndpoint.startsWith('/data') ? '/api/store/catalog' : `${this.config.apiEndpoint}/store/catalog`;\n      const response = await fetch(apiUrl, {\n        headers: {\n          'Accept': 'application/json',\n          'X-Region': this.config.region,\n          'X-Currency': this.config.currency\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to load catalog: ${response.statusText}`);\n      }\n\n      const catalogData = await response.json();\n      this.processCatalogData(catalogData);\n      this.emit('catalog_loaded', { itemCount: this.catalog.size, bundleCount: this.bundles.size });\n\n    } catch (error) {\n      this.emit('catalog_error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get items for a specific store section\n   */\n  public getSection(sectionId: string): StoreSection | null {\n    return this.sections.get(sectionId) || null;\n  }\n\n  /**\n   * Get all available store sections\n   */\n  public getSections(): StoreSection[] {\n    return Array.from(this.sections.values());\n  }\n\n  /**\n   * Get specific item details\n   */\n  public getItem(itemId: string): StoreItem | null {\n    return this.catalog.get(itemId) || null;\n  }\n\n  /**\n   * Get specific bundle details\n   */\n  public getBundle(bundleId: string): StoreBundle | null {\n    return this.bundles.get(bundleId) || null;\n  }\n\n  /**\n   * Filter items based on criteria\n   */\n  public filterItems(filter: StoreFilter): StoreItem[] {\n    let items = Array.from(this.catalog.values());\n\n    if (filter.type) {\n      items = items.filter(item => item.type === filter.type);\n    }\n\n    if (filter.rarity) {\n      items = items.filter(item => item.rarity === filter.rarity);\n    }\n\n    if (filter.character) {\n      items = items.filter(item => item.characterId === filter.character);\n    }\n\n    if (filter.owned !== undefined) {\n      items = items.filter(item => item.owned === filter.owned);\n    }\n\n    if (filter.priceRange) {\n      items = items.filter(item => \n        item.price >= filter.priceRange!.min && \n        item.price <= filter.priceRange!.max\n      );\n    }\n\n    if (filter.searchQuery) {\n      const query = filter.searchQuery.toLowerCase();\n      items = items.filter(item => \n        item.name.toLowerCase().includes(query) ||\n        item.description.toLowerCase().includes(query)\n      );\n    }\n\n    return items;\n  }\n\n  /**\n   * Start tracking store impression for analytics\n   */\n  public startStoreImpression(sectionId: string): void {\n    // End previous impression if active\n    this.endStoreImpression();\n\n    this.currentImpression = {\n      section: sectionId,\n      startTime: Date.now(),\n      viewedItems: [],\n      clickedItems: []\n    };\n\n    const section = this.getSection(sectionId);\n    if (section) {\n      // Track visible items\n      section.items.forEach(item => {\n        this.currentImpression!.viewedItems.push(item.id);\n      });\n    }\n  }\n\n  /**\n   * Track item click for analytics\n   */\n  public trackItemClick(itemId: string): void {\n    if (this.currentImpression && !this.currentImpression.clickedItems.includes(itemId)) {\n      this.currentImpression.clickedItems.push(itemId);\n    }\n  }\n\n  /**\n   * End store impression and send analytics\n   */\n  public endStoreImpression(): void {\n    if (!this.currentImpression) return;\n\n    const duration = Date.now() - this.currentImpression.startTime;\n    const section = this.getSection(this.currentImpression.section);\n\n    if (section) {\n      const viewedItems = this.currentImpression.viewedItems\n        .map(itemId => {\n          const item = this.getItem(itemId) || this.getBundle(itemId);\n          if (!item) return null;\n\n          return {\n            itemId,\n            price: 'pricing' in item ? item.pricing.bundlePrice : item.price,\n            currency: item.currency,\n            onSale: this.isItemOnSale(item),\n            returnWindowDays: this.getReturnWindowDays(item)\n          };\n        })\n        .filter(Boolean);\n\n      this.config.retentionClient.trackStoreImpression({\n        storeSection: this.currentImpression.section as any,\n        itemsViewed: viewedItems as any,\n        viewDurationMs: duration,\n        clickedItems: this.currentImpression.clickedItems\n      });\n    }\n\n    this.currentImpression = null;\n  }\n\n  /**\n   * Purchase an item or bundle\n   */\n  public async purchaseItem(itemId: string, paymentDetails: PurchaseRequest): Promise<PurchaseResult> {\n    try {\n      const item = this.getItem(itemId) || this.getBundle(itemId);\n      if (!item) {\n        throw new Error('Item not found');\n      }\n\n      if (!item.purchasable) {\n        throw new Error('Item is not purchasable');\n      }\n\n      // Validate payment method availability\n      this.validatePaymentMethod(paymentDetails.paymentMethod);\n\n      // Create purchase request\n      const purchasePayload = {\n        itemId,\n        paymentMethod: paymentDetails.paymentMethod,\n        currency: this.config.currency,\n        region: this.config.region,\n        billingDetails: paymentDetails.billingDetails\n      };\n\n      const response = await fetch(`${this.config.apiEndpoint}/store/purchase`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Region': this.config.region,\n          'X-Currency': this.config.currency\n        },\n        body: JSON.stringify(purchasePayload)\n      });\n\n      const result = await response.json();\n\n      if (response.ok && result.success) {\n        // Track successful purchase\n        this.trackPurchaseSuccess(result);\n\n        // Update item ownership\n        this.updateItemOwnership(itemId);\n\n        this.emit('purchase_completed', result);\n        return result;\n      } else {\n        this.emit('purchase_failed', result);\n        return { success: false, error: result.error || 'Purchase failed' };\n      }\n\n    } catch (error) {\n      const errorResult = { success: false, error: error instanceof Error ? error.message : 'Unknown error' };\n      this.emit('purchase_failed', errorResult);\n      return errorResult;\n    }\n  }\n\n  /**\n   * Get transparent pricing breakdown for a bundle\n   */\n  public getBundlePricing(bundleId: string): {\n    bundlePrice: number;\n    individualPrices: Array<{ itemId: string; name: string; price: number }>;\n    totalIndividual: number;\n    savings: number;\n    savingsPercent: number;\n  } | null {\n    const bundle = this.getBundle(bundleId);\n    if (!bundle) return null;\n\n    const individualPrices = bundle.items\n      .map(itemId => {\n        const item = this.getItem(itemId);\n        return item ? {\n          itemId,\n          name: item.name,\n          price: item.price\n        } : null;\n      })\n      .filter(Boolean) as Array<{ itemId: string; name: string; price: number }>;\n\n    return {\n      bundlePrice: bundle.pricing.bundlePrice,\n      individualPrices,\n      totalIndividual: bundle.pricing.individualTotal,\n      savings: bundle.pricing.savingsAmount,\n      savingsPercent: bundle.pricing.savingsPercent\n    };\n  }\n\n  /**\n   * Get return window information for an item\n   */\n  public getReturnInfo(itemId: string): {\n    permanent: boolean;\n    returnWindowDays: number;\n    returnDate?: Date;\n    description: string;\n  } | null {\n    const item = this.getItem(itemId);\n    if (!item) return null;\n\n    const { availability } = item;\n    let description: string;\n\n    if (availability.permanent) {\n      description = 'This item is permanently available in the store.';\n    } else if (availability.returnDate) {\n      const returnDate = new Date(availability.returnDate * 1000);\n      description = `This item will return to the store on ${returnDate.toLocaleDateString()}.`;\n    } else {\n      description = `This item will return in ${availability.returnWindowDays} days.`;\n    }\n\n    return {\n      permanent: availability.permanent,\n      returnWindowDays: availability.returnWindowDays,\n      returnDate: availability.returnDate ? new Date(availability.returnDate * 1000) : undefined,\n      description\n    };\n  }\n\n  /**\n   * Check if user meets unlock conditions for an item\n   */\n  public checkUnlockConditions(itemId: string, userProfile: any): {\n    unlocked: boolean;\n    missingConditions: string[];\n  } {\n    const item = this.getItem(itemId);\n    if (!item || !item.availability.unlockConditions) {\n      return { unlocked: true, missingConditions: [] };\n    }\n\n    const missingConditions: string[] = [];\n\n    item.availability.unlockConditions.forEach(condition => {\n      let conditionMet = false;\n\n      switch (condition.type) {\n        case 'account_level':\n          conditionMet = userProfile.accountLevel >= parseInt(condition.value);\n          if (!conditionMet) {\n            missingConditions.push(`Reach account level ${condition.value}`);\n          }\n          break;\n\n        case 'character_mastery':\n          const [charId, level] = condition.value.split(':');\n          const charLevel = userProfile.characters?.[charId]?.level || 0;\n          conditionMet = charLevel >= parseInt(level);\n          if (!conditionMet) {\n            missingConditions.push(`Reach level ${level} with ${charId}`);\n          }\n          break;\n\n        case 'achievement':\n          conditionMet = userProfile.achievements?.includes(condition.value);\n          if (!conditionMet) {\n            missingConditions.push(`Complete achievement: ${condition.value}`);\n          }\n          break;\n\n        case 'event_participation':\n          conditionMet = userProfile.eventParticipation?.includes(condition.value);\n          if (!conditionMet) {\n            missingConditions.push(`Participate in event: ${condition.value}`);\n          }\n          break;\n      }\n    });\n\n    return {\n      unlocked: missingConditions.length === 0,\n      missingConditions\n    };\n  }\n\n  private processCatalogData(catalogData: any): void {\n    // Process individual items\n    if (catalogData.items) {\n      catalogData.items.forEach((itemData: any) => {\n        const item: StoreItem = {\n          ...itemData,\n          owned: false, // Will be updated based on user's owned items\n          purchasable: this.isItemPurchasable(itemData)\n        };\n        this.catalog.set(item.id, item);\n      });\n    }\n\n    // Process bundles\n    if (catalogData.bundles) {\n      catalogData.bundles.forEach((bundleData: any) => {\n        const bundle: StoreBundle = {\n          ...bundleData,\n          purchasable: this.isBundlePurchasable(bundleData)\n        };\n        this.bundles.set(bundle.id, bundle);\n      });\n    }\n\n    // Process store sections\n    if (catalogData.sections) {\n      catalogData.sections.forEach((sectionData: any) => {\n        const section: StoreSection = {\n          ...sectionData,\n          items: sectionData.items.map((itemId: string) => \n            this.catalog.get(itemId) || this.bundles.get(itemId)\n          ).filter(Boolean)\n        };\n        this.sections.set(section.id, section);\n      });\n    }\n  }\n\n  private isItemPurchasable(item: any): boolean {\n    const now = Date.now() / 1000;\n\n    // Check if item is still available\n    if (!item.availability.permanent) {\n      if (item.availability.endTime && now > item.availability.endTime) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private isBundlePurchasable(bundle: any): boolean {\n    const now = Date.now() / 1000;\n    return now >= bundle.availability.startTime && now <= bundle.availability.endTime;\n  }\n\n  private isItemOnSale(item: StoreItem | StoreBundle): boolean {\n    // In this ethical system, sales are transparent and not manipulative\n    // This would check for legitimate promotional periods\n    return 'pricing' in item && item.pricing.savingsPercent > 0;\n  }\n\n  private getReturnWindowDays(item: StoreItem | StoreBundle): number {\n    if ('availability' in item && 'returnWindowDays' in item.availability) {\n      return item.availability.returnWindowDays;\n    }\n    if ('availability' in item && 'returnDate' in item.availability && item.availability.returnDate) {\n      const daysUntilReturn = Math.ceil((item.availability.returnDate * 1000 - Date.now()) / (1000 * 60 * 60 * 24));\n      return Math.max(0, daysUntilReturn);\n    }\n    return 0;\n  }\n\n  private validatePaymentMethod(method: PaymentMethod): void {\n    // Validate payment method is available in region\n    const availableMethods = this.getAvailablePaymentMethods();\n    if (!availableMethods.includes(method)) {\n      throw new Error(`Payment method ${method} not available in ${this.config.region}`);\n    }\n  }\n\n  private getAvailablePaymentMethods(): PaymentMethod[] {\n    // Return available payment methods based on region\n    const allMethods: PaymentMethod[] = ['card', 'paypal', 'apple_pay', 'google_pay'];\n    return allMethods; // In production, filter by region\n  }\n\n  private trackPurchaseSuccess(result: PurchaseResult): void {\n    if (!result.receipt) return;\n\n    const isFirstPurchase = this.isFirstPurchase();\n\n    this.config.retentionClient.trackPurchase({\n      transactionId: result.transactionId!,\n      totalAmount: result.receipt.totalAmount,\n      currency: result.receipt.currency,\n      items: result.receipt.items.map(item => ({\n        itemId: item.itemId,\n        itemType: this.getItemType(item.itemId),\n        price: item.price,\n        quantity: 1\n      })),\n      taxAmount: result.receipt.taxAmount,\n      firstPurchase: isFirstPurchase\n    });\n  }\n\n  private updateItemOwnership(itemId: string): void {\n    const item = this.catalog.get(itemId);\n    if (item) {\n      item.owned = true;\n      item.purchasable = false;\n      this.catalog.set(itemId, item);\n    }\n\n    const bundle = this.bundles.get(itemId);\n    if (bundle) {\n      // Mark all bundle items as owned\n      bundle.items.forEach(bundledItemId => {\n        const bundledItem = this.catalog.get(bundledItemId);\n        if (bundledItem) {\n          bundledItem.owned = true;\n          bundledItem.purchasable = false;\n          this.catalog.set(bundledItemId, bundledItem);\n        }\n      });\n    }\n  }\n\n  private isFirstPurchase(): boolean {\n    return Array.from(this.catalog.values()).every(item => !item.owned);\n  }\n\n  private getItemType(itemId: string): 'skin' | 'title' | 'banner' | 'announcer' | 'vfx_palette' | 'bundle' | 'stage_variant' {\n    const item = this.catalog.get(itemId);\n    if (item) return item.type;\n\n    const bundle = this.bundles.get(itemId);\n    if (bundle) return 'bundle';\n\n    return 'skin'; // Default fallback\n  }\n\n  private setupEventListeners(): void {\n    // Listen for visibility changes to end impressions\n    if (typeof document !== 'undefined') {\n      document.addEventListener('visibilitychange', () => {\n        if (document.hidden) {\n          this.endStoreImpression();\n        }\n      });\n    }\n\n    // Listen for page unload to end impressions\n    if (typeof window !== 'undefined') {\n      window.addEventListener('beforeunload', () => {\n        this.endStoreImpression();\n      });\n    }\n  }\n\n  private log(message: string, ...args: any[]): void {\n    if (this.config.debugMode) {\n      console.log(`[Storefront] ${message}`, ...args);\n    }\n  }\n}", "import { RetentionClient } from '../../client/retention/RetentionClient';\nimport { Storefront, StorefrontConfig } from '../../client/commerce/Storefront';\n\nexport class MonetizationService {\n  public retention: RetentionClient;\n  public storefront: Storefront;\n\n  constructor(opts?: { retention?: Partial<ConstructorParameters<typeof RetentionClient>[0]>; storefront?: Partial<StorefrontConfig> }) {\n    this.retention = new RetentionClient({\n      apiEndpoint: opts?.retention?.apiEndpoint || '/api',\n      userId: opts?.retention?.userId || 'guest',\n      apiKey: opts?.retention?.apiKey || 'public',\n      enableDebugLogging: false,\n      batchSize: 5,\n      flushIntervalMs: 15000\n    });\n\n    this.storefront = new Storefront({\n      retentionClient: this.retention,\n      apiEndpoint: opts?.storefront?.apiEndpoint || '/data',\n      currency: opts?.storefront?.currency || 'USD',\n      region: opts?.storefront?.region || 'US',\n      accessibilityMode: true,\n      debugMode: false\n    } as any);\n  }\n\n  public async initialize(): Promise<void> {\n    try {\n      this.retention.startSession();\n      await this.storefront.loadCatalog().catch(() => undefined);\n    } catch {}\n  }\n}\n\n", "export class SecurityService {\n  private devtoolsDetected = false;\n  private integrityViolations: string[] = [];\n\n  start(): void {\n    this.detectDevTools();\n    this.detectTimingTamper();\n    this.freezeCriticalObjects();\n  }\n\n  private detectDevTools(): void {\n    // Silent heuristic: measure layout thrash variance without debugger trap\n    const threshold = 250;\n    let last = performance.now();\n    const check = () => {\n      const now = performance.now();\n      if (now - last > threshold) {\n        this.devtoolsDetected = true;\n      }\n      last = now;\n      requestAnimationFrame(check);\n    };\n    requestAnimationFrame(check);\n  }\n\n  private detectTimingTamper(): void {\n    let last = performance.now();\n    setInterval(() => {\n      const now = performance.now();\n      if (now < last) {\n        this.integrityViolations.push('clock_skew');\n      }\n      last = now;\n    }, 1000);\n  }\n\n  private freezeCriticalObjects(): void {\n    // Disabled: Freezing global constructors can break third-party engines like PlayCanvas\n    // Intentionally left as a no-op to avoid destabilizing runtime\n    try { /* no-op */ } catch {}\n  }\n\n  public getStatus(): { devtools: boolean; violations: string[] } {\n    return { devtools: this.devtoolsDetected, violations: [...this.integrityViolations] };\n  }\n}\n\n", "export interface CheatReport {\n  type: string;\n  details?: Record<string, any>;\n}\n\nexport class AntiCheat {\n  private reports: CheatReport[] = [];\n\n  monitorInputRate(getInputCount: () => number): void {\n    let lastCount = getInputCount();\n    setInterval(() => {\n      const current = getInputCount();\n      const perSecond = current - lastCount;\n      if (perSecond > 120) {\n        this.reports.push({ type: 'input_rate', details: { perSecond } });\n      }\n      lastCount = current;\n    }, 1000);\n  }\n\n  monitorPhysicsDivergence(sample: () => number): void {\n    const reference = sample();\n    setInterval(() => {\n      const value = sample();\n      if (Math.abs(value - reference) > 1e6) {\n        this.reports.push({ type: 'physics_divergence', details: { value, reference } });\n      }\n    }, 2000);\n  }\n\n  getReports(): CheatReport[] { return [...this.reports]; }\n}\n\n", "export class OfflineService {\n  private storage: Storage;\n\n  constructor() {\n    this.storage = typeof localStorage !== 'undefined' ? localStorage : ({} as any);\n  }\n\n  save<T>(key: string, value: T): void {\n    try { this.storage.setItem(key, JSON.stringify(value)); } catch {}\n  }\n\n  load<T>(key: string, fallback: T): T {\n    try {\n      const v = this.storage.getItem(key);\n      return v ? (JSON.parse(v) as T) : fallback;\n    } catch { return fallback; }\n  }\n\n  enqueueEvent(event: any): void {\n    const q = this.load<any[]>('offline_events', []);\n    q.push({ ...event, ts: Date.now() });\n    this.save('offline_events', q);\n  }\n\n  dequeueAll(): any[] {\n    const q = this.load<any[]>('offline_events', []);\n    this.save('offline_events', []);\n    return q;\n  }\n}\n\n", "export class SyncService {\n  private flushing = false;\n\n  constructor(private offline: { dequeueAll: () => any[] }) {}\n\n  start(): void {\n    if (typeof window !== 'undefined') {\n      window.addEventListener('online', () => this.flush());\n      setInterval(() => this.flush(), 15000);\n    }\n  }\n\n  async flush(): Promise<void> {\n    if (this.flushing) return;\n    this.flushing = true;\n    try {\n      const events = this.offline.dequeueAll();\n      if (!events.length) return;\n      await fetch('/api/analytics', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ events }) });\n    } catch {}\n    this.flushing = false;\n  }\n}\n\n", "export class RemoteConfigService {\n  private config: Record<string, any> = {};\n\n  async load(): Promise<void> {\n    try {\n      const r = await fetch('/api/config', { cache: 'no-store' });\n      this.config = await r.json();\n    } catch {\n      this.config = {};\n    }\n  }\n\n  get<T = any>(key: string, fallback: T): T {\n    return (this.config && key in this.config ? this.config[key] : fallback) as T;\n  }\n}\n\n", "export class LiveOpsService {\n  private events: any[] = [];\n\n  async load(): Promise<void> {\n    try {\n      const r = await fetch('/api/config?resource=events', { cache: 'no-store' });\n      const j = await r.json();\n      this.events = j?.events || [];\n    } catch { this.events = []; }\n  }\n\n  getActive(now = Date.now()): any[] {\n    return this.events.filter(e => (!e.start || e.start <= now) && (!e.end || e.end >= now));\n  }\n}\n\n", "import { PlayerInputs } from '../../core/input/InputManager';\n\nexport type FrameNumber = number;\n\nexport interface SerializedInputFrame {\n  frame: FrameNumber;\n  bits: number;\n}\n\nexport interface GameStateSnapshot {\n  frame: FrameNumber;\n  payload: any;\n  checksum: number;\n}\n\nexport function inputsToBits(i: PlayerInputs): number {\n  let b = 0;\n  b |= i.up ? 1 << 0 : 0;\n  b |= i.down ? 1 << 1 : 0;\n  b |= i.left ? 1 << 2 : 0;\n  b |= i.right ? 1 << 3 : 0;\n  b |= i.lightPunch ? 1 << 4 : 0;\n  b |= i.mediumPunch ? 1 << 5 : 0;\n  b |= i.heavyPunch ? 1 << 6 : 0;\n  b |= i.lightKick ? 1 << 7 : 0;\n  b |= i.mediumKick ? 1 << 8 : 0;\n  b |= i.heavyKick ? 1 << 9 : 0;\n  b |= i.hadoken ? 1 << 10 : 0;\n  b |= i.shoryuken ? 1 << 11 : 0;\n  b |= i.tatsumaki ? 1 << 12 : 0;\n  return b >>> 0;\n}\n\nexport function bitsToInputs(bits: number): PlayerInputs {\n  return {\n    up: !!(bits & (1 << 0)),\n    down: !!(bits & (1 << 1)),\n    left: !!(bits & (1 << 2)),\n    right: !!(bits & (1 << 3)),\n    lightPunch: !!(bits & (1 << 4)),\n    mediumPunch: !!(bits & (1 << 5)),\n    heavyPunch: !!(bits & (1 << 6)),\n    lightKick: !!(bits & (1 << 7)),\n    mediumKick: !!(bits & (1 << 8)),\n    heavyKick: !!(bits & (1 << 9)),\n    hadoken: !!(bits & (1 << 10)),\n    shoryuken: !!(bits & (1 << 11)),\n    tatsumaki: !!(bits & (1 << 12))\n  };\n}\n\nexport function checksum32FromObject(obj: any): number {\n  const s = JSON.stringify(obj);\n  let h = 2166136261 >>> 0;\n  for (let i = 0; i < s.length; i++) {\n    h ^= s.charCodeAt(i);\n    h = Math.imul(h, 16777619) >>> 0;\n  }\n  return h >>> 0;\n}\n\n", "import { DeterministicAdapter } from './DeterministicAdapter';\nimport { bitsToInputs, FrameNumber, GameStateSnapshot } from './types';\n\nexport interface Transport {\n  connect(): void;\n  disconnect(): void;\n  sendLocalInput(frame: number, bits: number): void;\n  onRemoteInput?: (frame: number, bits: number) => void;\n}\n\nexport class RollbackNetcode {\n  private currentFrame: FrameNumber = 0;\n  private confirmedRemoteFrame: FrameNumber = -1;\n  private localInputs: Map<number, number> = new Map();\n  private remoteInputs: Map<number, number> = new Map();\n  private predictedRemote: Map<number, number> = new Map();\n  private snapshots: Map<number, GameStateSnapshot> = new Map();\n  private running = false;\n\n  constructor(\n    private adapter: DeterministicAdapter,\n    private transport: Transport,\n    private frameDelay: number = 2,\n    private maxRollback: number = 10\n  ) {\n    this.transport.onRemoteInput = (f, bits) => this.onRemoteInput(f, bits);\n  }\n\n  start(): void {\n    this.running = true;\n  }\n\n  stop(): void {\n    this.running = false;\n  }\n\n  pushLocal(bits: number): void {\n    const targetFrame = this.currentFrame + this.frameDelay;\n    this.localInputs.set(targetFrame, bits);\n    this.transport.sendLocalInput(targetFrame, bits);\n  }\n\n  private onRemoteInput(frame: number, bits: number): void {\n    this.remoteInputs.set(frame, bits);\n    if (frame > this.confirmedRemoteFrame) this.confirmedRemoteFrame = frame;\n  }\n\n  advance(): void {\n    if (!this.running) return;\n    const frame = this.currentFrame;\n    // save snapshot BEFORE stepping\n    this.snapshots.set(frame, this.adapter.saveState(frame));\n\n    const local = this.localInputs.get(frame) ?? 0;\n    let remote = this.remoteInputs.get(frame);\n    const predicted = this.predictedRemote.get(frame);\n    if (remote == null) {\n      // predict: use last known, else 0\n      const lastRemote = this.remoteInputs.get(frame - 1);\n      remote = lastRemote != null ? lastRemote : (predicted != null ? predicted : 0);\n      this.predictedRemote.set(frame, remote);\n    }\n\n    this.adapter.step(frame, bitsToInputs(local), bitsToInputs(remote));\n    this.currentFrame++;\n\n    // check for mismatches when remote arrives late\n    const mismatchFrame = this.findMismatchFrame();\n    if (mismatchFrame != null) {\n      this.rollbackTo(mismatchFrame);\n    }\n  }\n\n  private findMismatchFrame(): number | null {\n    // scan last maxRollback frames for any frame where remote input exists and differs from prediction\n    let start = Math.max(0, this.currentFrame - this.maxRollback);\n    for (let f = start; f < this.currentFrame; f++) {\n      const r = this.remoteInputs.get(f);\n      const p = this.predictedRemote.get(f);\n      if (r != null && p != null && r !== p) return f;\n    }\n    return null;\n  }\n\n  private rollbackTo(frame: number): void {\n    const snap = this.snapshots.get(frame);\n    if (!snap) return;\n    this.adapter.loadState(snap);\n\n    // re-simulate from frame to currentFrame-1\n    for (let f = frame; f < this.currentFrame; f++) {\n      const local = this.localInputs.get(f) ?? 0;\n      const remote = this.remoteInputs.get(f) ?? this.predictedRemote.get(f) ?? 0;\n      this.adapter.step(f, bitsToInputs(local), bitsToInputs(remote));\n      // refresh snapshot for determinism checking if desired\n      this.snapshots.set(f, this.adapter.saveState(f));\n      // once confirmed, clear prediction\n      if (this.remoteInputs.has(f)) this.predictedRemote.delete(f);\n    }\n  }\n}\n\n", "import { PlayerInputs } from '../input/InputManager';\nimport { GameStateSnapshot, FrameNumber, checksum32FromObject } from './types';\nimport { CombatSystem } from '../combat/CombatSystem';\nimport { CharacterManager } from '../characters/CharacterManager';\nimport * as pc from 'playcanvas';\n\nexport interface DeterministicAdapter {\n  saveState(frame: FrameNumber): GameStateSnapshot;\n  loadState(snapshot: GameStateSnapshot): void;\n  step(frame: FrameNumber, p0: PlayerInputs, p1: PlayerInputs): void;\n}\n\nexport class CombatDeterministicAdapter implements DeterministicAdapter {\n  constructor(private combat: CombatSystem, private chars: CharacterManager) {}\n\n  saveState(frame: FrameNumber): GameStateSnapshot {\n    const characters = this.chars.getActiveCharacters().map(c => ({\n      id: c.id,\n      health: c.health,\n      state: c.state,\n      currentMove: c.currentMove ? {\n        name: c.currentMove.name,\n        currentFrame: c.currentMove.currentFrame,\n        phase: c.currentMove.phase\n      } : null,\n      frameData: c.frameData ? { ...c.frameData } : null,\n      position: (() => { const p = c.entity.getPosition(); return { x: p.x, y: p.y, z: p.z }; })()\n    }));\n    const payload = {\n      frame: this.combat.getCurrentFrame(),\n      hitstop: (this.combat as any).hitstop ?? 0,\n      characters\n    };\n    return { frame, payload, checksum: checksum32FromObject(payload) };\n  }\n\n  loadState(snapshot: GameStateSnapshot): void {\n    const p = snapshot.payload;\n    // restore frame and hitstop\n    (this.combat as any).frameCounter = p.frame;\n    (this.combat as any).hitstop = p.hitstop;\n    // restore characters\n    const active = this.chars.getActiveCharacters();\n    for (const ch of active) {\n      const src = p.characters.find((x: any) => x.id === ch.id);\n      if (!src) continue;\n      ch.health = src.health;\n      ch.state = src.state;\n      ch.currentMove = src.currentMove ? { name: src.currentMove.name, data: ch.config.moves[src.currentMove.name], currentFrame: src.currentMove.currentFrame, phase: src.currentMove.phase } : null;\n      ch.frameData = src.frameData ? { ...src.frameData } : null;\n      ch.entity.setPosition(new pc.Vec3(src.position.x, src.position.y, src.position.z));\n    }\n  }\n\n  step(frame: FrameNumber, p0: PlayerInputs, p1: PlayerInputs): void {\n    this.combat.stepWithInputs(p0, p1);\n  }\n}\n\n", "import { Transport } from './RollbackNetcode';\n\nexport class LocalTransport implements Transport {\n  private peer?: LocalTransport;\n  public onRemoteInput?: (frame: number, bits: number) => void;\n\n  connect(): void {}\n  disconnect(): void {}\n  setPeer(peer: LocalTransport) { this.peer = peer; }\n\n  sendLocalInput(frame: number, bits: number): void {\n    // deliver to peer immediately (same tick)\n    this.peer?.onRemoteInput?.(frame, bits);\n  }\n}\n\n", "import { RollbackNetcode } from './RollbackNetcode';\nimport { CombatDeterministicAdapter } from './DeterministicAdapter';\nimport { LocalTransport } from './LocalTransport';\nimport { InputManager, PlayerInputs } from '../input/InputManager';\nimport { CharacterManager } from '../characters/CharacterManager';\nimport { CombatSystem } from '../combat/CombatSystem';\nimport { inputsToBits } from './types';\n\nexport class NetcodeService {\n  private netcode?: RollbackNetcode;\n  private enabled = false;\n\n  constructor(private combat: CombatSystem, private chars: CharacterManager, private input: InputManager) {}\n\n  enableLocalP2(): void {\n    const adapter = new CombatDeterministicAdapter(this.combat, this.chars);\n    const a = new LocalTransport();\n    const b = new LocalTransport();\n    a.setPeer(b); b.setPeer(a);\n    // single Rollback instance drives both players; peer delivers remote inputs\n    this.netcode = new RollbackNetcode(adapter, a, 2, 12);\n    this.enabled = true;\n    this.netcode.start();\n  }\n\n  disable(): void { this.enabled = false; this.netcode?.stop(); }\n\n  isEnabled(): boolean { return this.enabled; }\n\n  step(): void {\n    if (!this.enabled || !this.netcode) return;\n    // acquire local inputs (P1) and treat P2 as remote via transport\n    const p1 = this.input.getPlayerInputs(0);\n    const bits = inputsToBits(p1);\n    this.netcode.pushLocal(bits);\n    this.netcode.advance();\n  }\n}\n\n", "export class ConfigService {\n\tprivate cache = new Map<string, unknown>();\n\n\tasync loadJson<T = unknown>(path: string, bust = false): Promise<T> {\n\t\tif (!bust && this.cache.has(path)) return this.cache.get(path) as T;\n\t\tconst res = await fetch(path);\n\t\tif (!res.ok) throw new Error(`Failed to load ${path}: ${res.status}`);\n\t\tconst data = (await res.json()) as T;\n\t\tthis.cache.set(path, data);\n\t\treturn data;\n\t}\n}"],
  "mappings": "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",
  "names": ["pc", "EventEmitter", "pc", "pc", "pc", "pc", "window", "pc", "pc", "pc", "pc", "pc", "pc", "pc", "pc", "slot", "import_eventemitter3", "pc", "DebugOverlay"]
}
