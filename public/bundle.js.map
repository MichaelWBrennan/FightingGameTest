{
  "version": 3,
  "sources": ["../types/playcanvas-shim.ts", "../src/core/utils/ConfigService.ts", "../src/core/debug/DebugOverlay.ts", "../src/index.ts", "../src/core/GameEngine.ts", "../src/core/characters/CharacterManager.ts", "../src/core/utils/Logger.ts", "../src/core/combat/CombatSystem.ts", "../src/core/stages/StageManager.ts", "../src/core/input/InputManager.ts", "../src/core/ui/UIManager.ts", "../src/scripts/graphics/PostProcessingManager.ts", "../src/core/graphics/ShaderUtils.ts", "../src/typescript/shaders/CharacterHighlightShader.ts", "../src/typescript/shaders/RimLightingShader.ts", "../src/typescript/shaders/SpriteNormalMappingShader.ts", "../src/typescript/shaders/DepthPostProcessShader.ts", "../src/typescript/shaders/StageStormySkyShader.ts", "../src/core/utils/EventBus.ts", "../src/core/utils/ServiceContainer.ts", "../src/core/utils/FeatureFlags.ts", "../src/core/UpdatePipeline.ts", "../src/core/state/GameStateStack.ts", "../src/core/state/BootState.ts", "../src/core/state/MenuState.ts", "../src/core/state/MatchState.ts", "../src/core/graphics/ProceduralSpriteGenerator.ts", "../src/core/graphics/SpriteRegistry.ts", "../src/core/utils/PreloadManager.ts"],
  "sourcesContent": ["// Runtime shim to map module 'playcanvas' imports to the global `pc` provided\n// by the PlayCanvas engine script tag.\n// This is intentionally minimal and relies on the engine being loaded first.\n\nconst pcGlobal: any = (globalThis as any).pc;\n\n// Use CommonJS-style default export so that `import * as pc from 'playcanvas'`\n// receives the entire namespace object across our TypeScript sources.\nexport = pcGlobal;\n\n", "export class ConfigService {\n\tprivate cache = new Map<string, unknown>();\n\n\tasync loadJson<T = unknown>(path: string, bust = false): Promise<T> {\n\t\tif (!bust && this.cache.has(path)) return this.cache.get(path) as T;\n\t\tconst res = await fetch(path);\n\t\tif (!res.ok) throw new Error(`Failed to load ${path}: ${res.status}`);\n\t\tconst data = (await res.json()) as T;\n\t\tthis.cache.set(path, data);\n\t\treturn data;\n\t}\n}", "export interface TimingSample { name: string; ms: number; }\n\nexport class DebugOverlay {\n\tprivate container: HTMLDivElement;\n\tprivate fpsLabel: HTMLDivElement;\n\tprivate timingsLabel: HTMLDivElement;\n\tprivate lastTime = performance.now();\n\tprivate frames = 0;\n\tprivate fps = 0;\n\n\tconstructor() {\n\t\tthis.container = document.createElement('div');\n\t\tthis.container.style.position = 'fixed';\n\t\tthis.container.style.top = '8px';\n\t\tthis.container.style.left = '8px';\n\t\tthis.container.style.background = 'rgba(0,0,0,0.5)';\n\t\tthis.container.style.color = '#0f0';\n\t\tthis.container.style.font = '12px monospace';\n\t\tthis.container.style.padding = '6px 8px';\n\t\tthis.container.style.borderRadius = '4px';\n\t\tthis.container.style.zIndex = '9999';\n\n\t\tthis.fpsLabel = document.createElement('div');\n\t\tthis.timingsLabel = document.createElement('div');\n\t\tthis.container.appendChild(this.fpsLabel);\n\t\tthis.container.appendChild(this.timingsLabel);\n\t\tdocument.body.appendChild(this.container);\n\t}\n\n\tupdate(): void {\n\t\tthis.frames++;\n\t\tconst now = performance.now();\n\t\tif (now - this.lastTime >= 1000) {\n\t\t\tthis.fps = Math.round((this.frames * 1000) / (now - this.lastTime));\n\t\t\tthis.frames = 0;\n\t\t\tthis.lastTime = now;\n\t\t\tthis.fpsLabel.textContent = `FPS: ${this.fps}`;\n\t\t}\n\t}\n\n\tsetTimings(samples: TimingSample[]): void {\n\t\tconst text = samples.map(s => `${s.name}:${s.ms.toFixed(2)}ms`).join('  ');\n\t\tthis.timingsLabel.textContent = text;\n\t}\n}", "\nimport { GameEngine } from './core/GameEngine';\nimport { Logger } from './core/utils/Logger';\nimport * as pc from 'playcanvas';\n\nasync function defaultStart(canvas: HTMLCanvasElement | null): Promise<void> {\n  const targetCanvas = canvas || createCanvas();\n  const engine = new GameEngine(targetCanvas);\n  Logger.info('Starting Street Fighter III: 3rd Strike - PlayCanvas Edition');\n  await engine.initialize();\n\n  const characterManager = engine.getCharacterManager();\n  const ryu = characterManager.createCharacter('ryu', new pc.Vec3(-2, 0, 0));\n  const ken = characterManager.createCharacter('ken', new pc.Vec3(2, 0, 0));\n  if (ryu && ken) {\n    characterManager.setActiveCharacters('ryu', 'ken');\n  }\n}\n\nfunction createCanvas(): HTMLCanvasElement {\n  const canvas = document.createElement('canvas');\n  canvas.id = 'application-canvas';\n  Object.assign(canvas.style, {\n    width: '100vw',\n    height: '100vh',\n    display: 'block',\n    background: '#000',\n    position: 'fixed',\n    inset: '0'\n  } as CSSStyleDeclaration);\n  document.body.appendChild(canvas);\n  return canvas;\n}\n\nexport { defaultStart };\n", "\nimport * as pc from 'playcanvas';\nimport { CharacterManager } from './characters/CharacterManager';\nimport { CombatSystem } from './combat/CombatSystem';\n// Integrate with existing PlayCanvas script-based managers under src/scripts\nimport { StageManager } from './stages/StageManager';\nimport { InputManager } from './input/InputManager';\nimport { UIManager } from './ui/UIManager';\n// (Optional) Asset loader integration available under scripts if needed\nimport { Logger } from './utils/Logger';\nimport PostProcessingManager from '../scripts/graphics/PostProcessingManager';\nimport { EventBus } from './utils/EventBus';\nimport { ServiceContainer } from './utils/ServiceContainer';\nimport { FeatureFlags } from './utils/FeatureFlags';\nimport { UpdatePipeline, UpdatableSystem } from './UpdatePipeline';\nimport { GameStateStack } from './state/GameStateStack';\nimport { BootState } from './state/BootState';\nimport { MenuState } from './state/MenuState';\nimport { MatchState } from './state/MatchState';\nimport { ProceduralSpriteGenerator } from './graphics/ProceduralSpriteGenerator';\nimport { SpriteRegistry } from './graphics/SpriteRegistry';\nimport { PreloadManager } from './utils/PreloadManager';\n\nexport class GameEngine {\n  private app: pc.Application;\n  private characterManager: CharacterManager;\n  private combatSystem: CombatSystem;\n  private stageManager: StageManager;\n  private inputManager: InputManager;\n  private uiManager: UIManager;\n  private postProcessingManager: PostProcessingManager | null = null;\n  private eventBus: EventBus;\n  private services: ServiceContainer;\n  private featureFlags: FeatureFlags;\n  private pipeline: UpdatePipeline;\n  private debugOverlay: any | null = null;\n  private stateStack: GameStateStack;\n  private spriteGenerator: ProceduralSpriteGenerator;\n  private spriteRegistry: SpriteRegistry;\n  private preloader: PreloadManager;\n  // private assetManager: any;\n  private isInitialized = false;\n  private updateHandler: ((dt: number) => void) | null = null;\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.app = new pc.Application(canvas, {\n      mouse: new pc.Mouse(canvas),\n      touch: new pc.TouchDevice(canvas),\n      keyboard: new pc.Keyboard(window),\n      gamepads: new pc.GamePads()\n    });\n\n    this.setupApplication();\n    this.initializeManagers();\n\n    // Core infrastructure\n    this.eventBus = new EventBus();\n    this.services = new ServiceContainer();\n    this.featureFlags = new FeatureFlags();\n    this.pipeline = new UpdatePipeline();\n\n    // Register services\n    this.services.register('app', this.app);\n    this.services.register('events', this.eventBus);\n    this.services.register('flags', this.featureFlags);\n    this.services.register('config', new (require('./utils/ConfigService').ConfigService)());\n    this.spriteGenerator = new ProceduralSpriteGenerator(this.app);\n    this.spriteRegistry = new SpriteRegistry(this.app);\n    this.preloader = new PreloadManager();\n    this.services.register('spriteGen', this.spriteGenerator);\n    this.services.register('sprites', this.spriteRegistry);\n    this.services.register('preloader', this.preloader);\n\n    // State stack\n    this.stateStack = new GameStateStack();\n\n    // State transitions via EventBus\n    this.eventBus.on('state:goto', async ({ state }: any) => {\n      switch (state) {\n        case 'menu':\n          await this.stateStack.replace(new MenuState(this.app, this.eventBus));\n          break;\n        case 'match':\n          await this.stateStack.replace(new MatchState(this.app, this.eventBus));\n          break;\n      }\n    });\n  }\n\n  private setupApplication(): void {\n    this.app.setCanvasFillMode(pc.FILLMODE_FILL_WINDOW);\n    this.app.setCanvasResolution(pc.RESOLUTION_AUTO);\n    \n    window.addEventListener('resize', () => this.app.resizeCanvas());\n    \n    Logger.info('PlayCanvas application initialized');\n  }\n\n  private initializeManagers(): void {\n    // Asset loading can be handled later via script components\n    this.inputManager = new InputManager(this.app);\n    // Audio handled by PlayCanvas components or a future wrapper\n    this.characterManager = new CharacterManager(this.app);\n    this.combatSystem = new CombatSystem(this.app);\n    this.stageManager = new StageManager(this.app);\n    this.uiManager = new UIManager(this.app);\n    // expose for states\n    (this.app as any)._ui = this.uiManager;\n    this.postProcessingManager = new PostProcessingManager(this.app);\n\n    // Register update order\n    const inputUpdatable: UpdatableSystem = { name: 'input', priority: 10, update: dt => this.inputManager.update() };\n    const characterUpdatable: UpdatableSystem = { name: 'characters', priority: 20, update: dt => this.characterManager.update(dt) };\n    const combatUpdatable: UpdatableSystem = { name: 'combat', priority: 30, update: dt => this.combatSystem.update(dt) };\n    const postFxUpdatable: UpdatableSystem = { name: 'postfx', priority: 90, update: dt => this.postProcessingManager?.update(dt) };\n    this.pipeline.add(inputUpdatable);\n    this.pipeline.add(characterUpdatable);\n    this.pipeline.add(combatUpdatable);\n    this.pipeline.add(postFxUpdatable);\n  }\n\n  public async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      Logger.info('Initializing game systems...');\n      \n      // Preload assets if needed using AssetLoader script\n      await this.characterManager.initialize();\n      // StageManager/UIManager initialize through their own methods if needed\n      await this.stageManager.initialize();\n      await this.uiManager.initialize();\n      if (this.postProcessingManager) {\n        await this.postProcessingManager.initialize();\n      }\n\n      // Load manifest first\n      await this.preloader.loadManifest('/assets/manifest.json');\n\n      // Generate basic procedural sprites for placeholders\n      const checker = this.spriteGenerator.createTexture({ width: 256, height: 256, type: 'checker', tile: 16, colorA: [200,200,200,255], colorB: [80,80,80,255] });\n      this.spriteRegistry.register('checkerboard', checker);\n      \n      this.combatSystem.initialize(this.characterManager, this.inputManager);\n      \n      this.isInitialized = true;\n      this.app.start();\n\n      // Push boot state\n      await this.stateStack.push(new BootState(this.app, this.services, this.eventBus));\n\n      // Wire main update loop\n      this.updateHandler = (dt: number) => {\n        this.pipeline.update(dt);\n        this.stateStack.update(dt);\n        if (!this.debugOverlay && typeof window !== 'undefined') {\n          try { const { DebugOverlay } = require('./debug/DebugOverlay'); this.debugOverlay = new DebugOverlay(); } catch {}\n        }\n        this.debugOverlay?.update();\n        this.debugOverlay?.setTimings(this.pipeline.getTimings());\n      };\n      this.app.on('update', this.updateHandler);\n      \n      Logger.info('Game engine fully initialized');\n    } catch (error) {\n      Logger.error('Failed to initialize game engine:', error);\n      throw error;\n    }\n  }\n\n  public getApp(): pc.Application {\n    return this.app;\n  }\n\n  public getCharacterManager(): CharacterManager {\n    return this.characterManager;\n  }\n\n  public getCombatSystem(): CombatSystem {\n    return this.combatSystem;\n  }\n\n  public destroy(): void {\n    if (this.updateHandler) {\n      this.app.off('update', this.updateHandler);\n      this.updateHandler = null;\n    }\n    this.app.destroy();\n    Logger.info('Game engine destroyed');\n  }\n}\n", "\nimport * as pc from 'playcanvas';\nimport { Character, CharacterConfig } from '../../../types/character';\nimport { Logger } from '../utils/Logger';\nimport { PreloadManager } from '../utils/PreloadManager';\n\nexport class CharacterManager {\n  private app: pc.Application;\n  private characters = new Map<string, Character>();\n  private characterConfigs = new Map<string, CharacterConfig>();\n  private activeCharacters: Character[] = [];\n  private preloader: PreloadManager | null = null;\n\n  constructor(app: pc.Application) {\n    this.app = app;\n  }\n\n  public async initialize(): Promise<void> {\n    try {\n      // Attempt to resolve preloader from global services if present\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const services = (this.app as any)._services as any;\n      if (services && services.resolve) {\n        this.preloader = services.resolve('preloader') as PreloadManager;\n      }\n    } catch {}\n    await this.loadCharacterConfigs();\n    Logger.info('Character manager initialized');\n  }\n\n  private async loadCharacterConfigs(): Promise<void> {\n    // Prefer a consolidated database file if available\n    try {\n      const dbResponse = await fetch('/data/characters_db.json');\n      if (dbResponse.ok) {\n        const db = await dbResponse.json();\n        const keys = Object.keys(db);\n        for (const key of keys) {\n          const normalized = this.normalizeCharacterConfig(db[key] as CharacterConfig);\n          this.characterConfigs.set(key, normalized);\n        }\n        Logger.info(`Loaded ${keys.length} characters from consolidated database`);\n        return;\n      }\n    } catch (e) {\n      Logger.warn('Consolidated character database not found; falling back to individual files');\n    }\n\n    // Fallback to individual files\n    const characterNames = ['ryu', 'ken', 'chun_li', 'sagat', 'zangief'];\n    for (const name of characterNames) {\n      try {\n        const response = await fetch(`/data/characters/${name}.json`);\n        const rawConfig: CharacterConfig = await response.json();\n        const config = this.normalizeCharacterConfig(rawConfig);\n        this.characterConfigs.set(name, config);\n        Logger.info(`Loaded character config: ${name}`);\n      } catch (error) {\n        Logger.error(`Failed to load character ${name}:`, error);\n      }\n    }\n  }\n\n  private normalizeCharacterConfig(config: CharacterConfig): CharacterConfig {\n    // Ensure stats exist with required fields using top-level fallbacks\n    const normalizedStats = {\n      health: (config as any).stats?.health ?? (config as any).health ?? 1000,\n      walkSpeed: (config as any).stats?.walkSpeed ?? (config as any).walkSpeed ?? 2\n    } as any;\n\n    // Flatten nested move groups like { moves: { normals: { ... }, specials: { ... } } }\n    let flattenedMoves: Record<string, any> | undefined = undefined;\n    const movesAny = (config as any).moves as any;\n    if (movesAny && typeof movesAny === 'object') {\n      const groups = ['normals', 'specials', 'supers', 'throws', 'unique'];\n      flattenedMoves = {};\n      for (const key of Object.keys(movesAny)) {\n        if (groups.includes(key) && movesAny[key] && typeof movesAny[key] === 'object') {\n          Object.assign(flattenedMoves, movesAny[key]);\n        } else if (movesAny[key] && typeof movesAny[key] === 'object') {\n          // Top-level moves already\n          flattenedMoves[key] = movesAny[key];\n        }\n      }\n    }\n\n    const normalized = {\n      ...config,\n      stats: normalizedStats,\n      moves: flattenedMoves ?? (config as any).moves\n    } as CharacterConfig as any;\n\n    return normalized;\n  }\n\n  public createCharacter(characterId: string, position: pc.Vec3): Character | null {\n    const config = this.characterConfigs.get(characterId);\n    if (!config) {\n      Logger.error(`Character config not found: ${characterId}`);\n      return null;\n    }\n\n    const characterEntity = new pc.Entity(characterId);\n    characterEntity.setPosition(position);\n    \n    const character: Character = {\n      id: characterId,\n      entity: characterEntity,\n      config: config,\n      health: config.stats.health,\n      meter: 0,\n      state: 'idle',\n      currentMove: null,\n      frameData: {\n        startup: 0,\n        active: 0,\n        recovery: 0,\n        advantage: 0\n      }\n    };\n\n    this.characters.set(characterId, character);\n    this.app.root.addChild(characterEntity);\n    \n    Logger.info(`Created character: ${characterId}`);\n    return character;\n  }\n\n  public getCharacter(characterId: string): Character | undefined {\n    return this.characters.get(characterId);\n  }\n\n  public setActiveCharacters(player1Id: string, player2Id: string): void {\n    const p1 = this.characters.get(player1Id);\n    const p2 = this.characters.get(player2Id);\n    \n    if (p1 && p2) {\n      this.activeCharacters = [p1, p2];\n      Logger.info(`Active characters set: ${player1Id} vs ${player2Id}`);\n    }\n  }\n\n  public getActiveCharacters(): Character[] {\n    return this.activeCharacters;\n  }\n\n  public update(deltaTime: number): void {\n    for (const character of this.activeCharacters) {\n      this.updateCharacterState(character, deltaTime);\n    }\n  }\n\n  private updateCharacterState(character: Character, deltaTime: number): void {\n    // Update character animation, physics, and state\n    // This will be expanded based on your specific needs\n  }\n\n  public getAvailableCharacters(): string[] {\n    return Array.from(this.characterConfigs.keys());\n  }\n}\n", "\nexport enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3\n}\n\nexport class Logger {\n  private static logLevel: LogLevel = LogLevel.INFO;\n  private static prefix = '[SF3]';\n\n  public static setLogLevel(level: LogLevel): void {\n    this.logLevel = level;\n  }\n\n  public static debug(message: string, ...args: any[]): void {\n    if (this.logLevel <= LogLevel.DEBUG) {\n      console.debug(`${this.prefix}[DEBUG]`, message, ...args);\n    }\n  }\n\n  public static info(message: string, ...args: any[]): void {\n    if (this.logLevel <= LogLevel.INFO) {\n      console.info(`${this.prefix}[INFO]`, message, ...args);\n    }\n  }\n\n  public static warn(message: string, ...args: any[]): void {\n    if (this.logLevel <= LogLevel.WARN) {\n      console.warn(`${this.prefix}[WARN]`, message, ...args);\n    }\n  }\n\n  public static error(message: string, ...args: any[]): void {\n    if (this.logLevel <= LogLevel.ERROR) {\n      console.error(`${this.prefix}[ERROR]`, message, ...args);\n    }\n  }\n}\n", "\nimport * as pc from 'playcanvas';\nimport { Character } from '../../../types/character';\nimport { CharacterManager } from '../characters/CharacterManager';\nimport { InputManager } from '../input/InputManager';\nimport { Logger } from '../utils/Logger';\n\ninterface HitResult {\n  hit: boolean;\n  damage: number;\n  knockback: pc.Vec3;\n  hitstun: number;\n  blockstun: number;\n}\n\nexport class CombatSystem {\n  private app: pc.Application;\n  private characterManager!: CharacterManager;\n  private inputManager!: InputManager;\n  private frameCounter = 0;\n  private hitstop = 0;\n\n  constructor(app: pc.Application) {\n    this.app = app;\n  }\n\n  public initialize(characterManager: CharacterManager, inputManager: InputManager): void {\n    this.characterManager = characterManager;\n    this.inputManager = inputManager;\n    Logger.info('Combat system initialized');\n  }\n\n  public update(deltaTime: number): void {\n    if (this.hitstop > 0) {\n      this.hitstop--;\n      return; // Skip frame during hitstop\n    }\n\n    this.frameCounter++;\n    this.processInputs();\n    this.updateHitboxes();\n    this.checkCollisions();\n  }\n\n  private processInputs(): void {\n    const activeCharacters = this.characterManager.getActiveCharacters();\n    \n    for (let i = 0; i < activeCharacters.length; i++) {\n      const character = activeCharacters[i];\n      const inputs = this.inputManager.getPlayerInputs(i);\n      \n      this.processCharacterInputs(character, inputs);\n    }\n  }\n\n  private processCharacterInputs(character: Character, inputs: any): void {\n    if (character.state !== 'idle' && character.state !== 'walking') {\n      return; // Character is in an active state\n    }\n\n    // Process movement\n    if (inputs.left) {\n      this.moveCharacter(character, -1);\n    } else if (inputs.right) {\n      this.moveCharacter(character, 1);\n    }\n\n    // Process attacks\n    if (inputs.lightPunch) {\n      this.executeMove(character, 'lightPunch');\n    } else if (inputs.mediumPunch) {\n      this.executeMove(character, 'mediumPunch');\n    } else if (inputs.heavyPunch) {\n      this.executeMove(character, 'heavyPunch');\n    }\n\n    // Process special moves (simplified motion detection)\n    if (inputs.hadoken) {\n      this.executeMove(character, 'hadoken');\n    }\n  }\n\n  private moveCharacter(character: Character, direction: number): void {\n    const walkSpeed = character.config.stats.walkSpeed;\n    const currentPos = character.entity.getPosition();\n    \n    currentPos.x += direction * walkSpeed * (1/60); // Assuming 60fps\n    character.entity.setPosition(currentPos);\n    \n    character.state = 'walking';\n  }\n\n  private executeMove(character: Character, moveName: string): void {\n    const moveData = character.config.moves[moveName];\n    if (!moveData) {\n      Logger.warn(`Move not found: ${moveName} for character ${character.id}`);\n      return;\n    }\n\n    character.currentMove = {\n      name: moveName,\n      data: moveData,\n      currentFrame: 0,\n      phase: 'startup'\n    };\n\n    character.state = 'attacking';\n    character.frameData = {\n      startup: moveData.startupFrames,\n      active: moveData.activeFrames,\n      recovery: moveData.recoveryFrames,\n      advantage: moveData.advantage || 0\n    };\n\n    Logger.info(`${character.id} executing ${moveName}`);\n  }\n\n  private updateHitboxes(): void {\n    const activeCharacters = this.characterManager.getActiveCharacters();\n    \n    for (const character of activeCharacters) {\n      if (character.currentMove) {\n        this.updateMoveFrames(character);\n      }\n    }\n  }\n\n  private updateMoveFrames(character: Character): void {\n    if (!character.currentMove) return;\n\n    character.currentMove.currentFrame++;\n    const move = character.currentMove;\n    const frameData = character.frameData;\n\n    if (move.currentFrame <= frameData.startup) {\n      move.phase = 'startup';\n    } else if (move.currentFrame <= frameData.startup + frameData.active) {\n      move.phase = 'active';\n    } else if (move.currentFrame <= frameData.startup + frameData.active + frameData.recovery) {\n      move.phase = 'recovery';\n    } else {\n      // Move finished\n      character.currentMove = null;\n      character.state = 'idle';\n    }\n  }\n\n  private checkCollisions(): void {\n    const activeCharacters = this.characterManager.getActiveCharacters();\n    \n    if (activeCharacters.length !== 2) return;\n\n    const [p1, p2] = activeCharacters;\n    \n    if (p1.currentMove?.phase === 'active' && this.charactersColliding(p1, p2)) {\n      this.processHit(p1, p2);\n    } else if (p2.currentMove?.phase === 'active' && this.charactersColliding(p2, p1)) {\n      this.processHit(p2, p1);\n    }\n  }\n\n  private charactersColliding(attacker: Character, defender: Character): boolean {\n    const attackerPos = attacker.entity.getPosition();\n    const defenderPos = defender.entity.getPosition();\n    const distance = attackerPos.distance(defenderPos);\n    \n    // Simple collision detection - should be replaced with proper hitbox system\n    return distance < 2.0;\n  }\n\n  private processHit(attacker: Character, defender: Character): void {\n    if (!attacker.currentMove) return;\n\n    const moveData = attacker.currentMove.data;\n    const damage = moveData.damage;\n    \n    defender.health = Math.max(0, defender.health - damage);\n    this.hitstop = Math.floor(damage / 10); // Hitstop based on damage\n    \n    Logger.info(`${attacker.id} hits ${defender.id} for ${damage} damage`);\n    \n    if (defender.health <= 0) {\n      this.handleKO(defender, attacker);\n    }\n  }\n\n  private handleKO(ko: Character, winner: Character): void {\n    ko.state = 'ko';\n    Logger.info(`${ko.id} is KO'd! ${winner.id} wins!`);\n    \n    // Trigger victory sequence\n    this.app.fire('match:victory', winner.id);\n  }\n\n  public getCurrentFrame(): number {\n    return this.frameCounter;\n  }\n\n  public isInHistop(): boolean {\n    return this.hitstop > 0;\n  }\n}\n", "import * as pc from 'playcanvas';\n\nexport class StageManager {\n  private app: pc.Application;\n\n  constructor(app: pc.Application) {\n    this.app = app;\n  }\n\n  public async initialize(): Promise<void> {\n    // Camera\n    const camera = new pc.Entity('MainCamera');\n    camera.addComponent('camera', {\n      clearColor: new pc.Color(0, 0, 0),\n      fov: 55,\n      nearClip: 0.1,\n      farClip: 1000\n    });\n    camera.setPosition(0, 2, 10);\n    camera.lookAt(0, 1, 0);\n    this.app.root.addChild(camera);\n\n    // Light\n    const light = new pc.Entity('DirectionalLight');\n    light.addComponent('light', {\n      type: pc.LIGHTTYPE_DIRECTIONAL,\n      color: new pc.Color(1, 1, 1),\n      intensity: 1.0,\n      castShadows: false\n    });\n    light.setEulerAngles(45, 30, 0);\n    this.app.root.addChild(light);\n\n    // Test cube\n    const box = new pc.Entity('TestBox');\n    box.addComponent('model', { type: 'box' });\n    box.setPosition(0, 0.5, 0);\n    this.app.root.addChild(box);\n  }\n}\n\n", "\nimport * as pc from 'playcanvas';\n\nexport interface PlayerInputs {\n  up: boolean;\n  down: boolean;\n  left: boolean;\n  right: boolean;\n  lightPunch: boolean;\n  mediumPunch: boolean;\n  heavyPunch: boolean;\n  lightKick: boolean;\n  mediumKick: boolean;\n  heavyKick: boolean;\n  hadoken: boolean;\n  shoryuken: boolean;\n  tatsumaki: boolean;\n}\n\nexport class InputManager {\n  private app: pc.Application;\n  private player1Inputs: PlayerInputs;\n  private player2Inputs: PlayerInputs;\n  private keyboard: pc.Keyboard;\n  private gamepads: pc.GamePads;\n\n  constructor(app: pc.Application) {\n    this.app = app;\n    this.keyboard = app.keyboard;\n    this.gamepads = app.gamepads;\n    \n    this.player1Inputs = this.createEmptyInputs();\n    this.player2Inputs = this.createEmptyInputs();\n    \n    this.setupKeyboardBindings();\n  }\n\n  private createEmptyInputs(): PlayerInputs {\n    return {\n      up: false,\n      down: false,\n      left: false,\n      right: false,\n      lightPunch: false,\n      mediumPunch: false,\n      heavyPunch: false,\n      lightKick: false,\n      mediumKick: false,\n      heavyKick: false,\n      hadoken: false,\n      shoryuken: false,\n      tatsumaki: false\n    };\n  }\n\n  private setupKeyboardBindings(): void {\n    // Player 1 controls (WASD + keys)\n    this.keyboard.on('keydown', (e) => {\n      switch (e.key.toLowerCase()) {\n        case 'w': this.player1Inputs.up = true; break;\n        case 's': this.player1Inputs.down = true; break;\n        case 'a': this.player1Inputs.left = true; break;\n        case 'd': this.player1Inputs.right = true; break;\n        case 'u': this.player1Inputs.lightPunch = true; break;\n        case 'i': this.player1Inputs.mediumPunch = true; break;\n        case 'o': this.player1Inputs.heavyPunch = true; break;\n        case 'j': this.player1Inputs.lightKick = true; break;\n        case 'k': this.player1Inputs.mediumKick = true; break;\n        case 'l': this.player1Inputs.heavyKick = true; break;\n      }\n    });\n\n    this.keyboard.on('keyup', (e) => {\n      switch (e.key.toLowerCase()) {\n        case 'w': this.player1Inputs.up = false; break;\n        case 's': this.player1Inputs.down = false; break;\n        case 'a': this.player1Inputs.left = false; break;\n        case 'd': this.player1Inputs.right = false; break;\n        case 'u': this.player1Inputs.lightPunch = false; break;\n        case 'i': this.player1Inputs.mediumPunch = false; break;\n        case 'o': this.player1Inputs.heavyPunch = false; break;\n        case 'j': this.player1Inputs.lightKick = false; break;\n        case 'k': this.player1Inputs.mediumKick = false; break;\n        case 'l': this.player1Inputs.heavyKick = false; break;\n      }\n    });\n  }\n\n  public getPlayerInputs(playerIndex: number): PlayerInputs {\n    return playerIndex === 0 ? this.player1Inputs : this.player2Inputs;\n  }\n\n  public update(): void {\n    // Update gamepad inputs if connected\n    this.updateGamepadInputs();\n    \n    // Update special move detection\n    this.updateSpecialMoves();\n  }\n\n  private updateGamepadInputs(): void {\n    const pads = this.gamepads.poll();\n    const gamepad = pads[0];\n    if (gamepad) {\n      // Map gamepad inputs to player 1\n      this.player1Inputs.left = gamepad.isPressed(pc.PAD_L_STICK_BUTTON) || gamepad.isPressed(pc.PAD_LEFT);\n      this.player1Inputs.right = gamepad.isPressed(pc.PAD_RIGHT);\n      this.player1Inputs.up = gamepad.isPressed(pc.PAD_UP);\n      this.player1Inputs.down = gamepad.isPressed(pc.PAD_DOWN);\n\n      this.player1Inputs.lightPunch = gamepad.isPressed(pc.PAD_FACE_1);\n      this.player1Inputs.mediumPunch = gamepad.isPressed(pc.PAD_FACE_2);\n      this.player1Inputs.heavyPunch = gamepad.isPressed(pc.PAD_R_SHOULDER_1);\n      this.player1Inputs.lightKick = gamepad.isPressed(pc.PAD_FACE_3);\n      this.player1Inputs.mediumKick = gamepad.isPressed(pc.PAD_FACE_4);\n      this.player1Inputs.heavyKick = gamepad.isPressed(pc.PAD_R_SHOULDER_2);\n    }\n  }\n\n  private updateSpecialMoves(): void {\n    // Simple special move detection (should be expanded with proper motion buffer)\n    this.player1Inputs.hadoken = this.detectHadoken(this.player1Inputs);\n    this.player2Inputs.hadoken = this.detectHadoken(this.player2Inputs);\n  }\n\n  private detectHadoken(inputs: PlayerInputs): boolean {\n    // Simplified hadoken detection (down -> forward + punch)\n    return inputs.down && inputs.right && inputs.lightPunch;\n  }\n}\n", "import * as pc from 'playcanvas';\n\nexport class UIManager {\n\tprivate app: pc.Application;\n\tprivate root: pc.Entity | null = null;\n\tprivate menu: pc.Entity | null = null;\n\tprivate hud: pc.Entity | null = null;\n\n\tconstructor(app: pc.Application) {\n\t\tthis.app = app;\n\t}\n\n\tpublic async initialize(): Promise<void> {\n\t\tthis.root = new pc.Entity('UIRoot');\n\t\tthis.root.addComponent('screen', {\n\t\t\treferenceResolution: new pc.Vec2(1920, 1080),\n\t\t\tscaleMode: pc.SCALEMODE_BLEND,\n\t\t\tscaleBlend: 0.5,\n\t\t\tscreenSpace: true\n\t\t});\n\t\tthis.app.root.addChild(this.root);\n\t}\n\n\tpublic showMenu(): void {\n\t\tthis.hideHUD();\n\t\tif (this.menu) { this.menu.enabled = true; return; }\n\t\tthis.menu = new pc.Entity('MenuUI');\n\t\tthis.menu.addComponent('element', { type: pc.ELEMENTTYPE_GROUP, anchor: new pc.Vec4(0,0,1,1) });\n\t\tconst label = new pc.Entity('MenuLabel');\n\t\tlabel.addComponent('element', { type: pc.ELEMENTTYPE_TEXT, text: 'Press Enter to Start', fontSize: 48, pivot: new pc.Vec2(0.5,0.5), anchor: new pc.Vec4(0.5,0.5,0.5,0.5) });\n\t\tthis.menu.addChild(label);\n\t\tthis.root?.addChild(this.menu);\n\t}\n\n\tpublic hideMenu(): void {\n\t\tif (this.menu) this.menu.enabled = false;\n\t}\n\n\tpublic showHUD(): void {\n\t\tthis.hideMenu();\n\t\tif (this.hud) { this.hud.enabled = true; return; }\n\t\tthis.hud = new pc.Entity('MatchHUD');\n\t\tthis.hud.addComponent('element', { type: pc.ELEMENTTYPE_GROUP, anchor: new pc.Vec4(0,0,1,1) });\n\t\tconst p1 = new pc.Entity('P1');\n\t\tp1.addComponent('element', { type: pc.ELEMENTTYPE_TEXT, text: 'P1: 1000', fontSize: 32, anchor: new pc.Vec4(0,1,0,1), pivot: new pc.Vec2(0,1) });\n\t\tconst p2 = new pc.Entity('P2');\n\t\tp2.addComponent('element', { type: pc.ELEMENTTYPE_TEXT, text: 'P2: 1000', fontSize: 32, anchor: new pc.Vec4(1,1,1,1), pivot: new pc.Vec2(1,1) });\n\t\tthis.hud.addChild(p1);\n\t\tthis.hud.addChild(p2);\n\t\tthis.root?.addChild(this.hud);\n\t}\n\n\tpublic hideHUD(): void {\n\t\tif (this.hud) this.hud.enabled = false;\n\t}\n\n\tpublic updateHUD(p1Health: number, p2Health: number): void {\n\t\tif (!this.hud) return;\n\t\tconst p1 = this.hud.findByName('P1');\n\t\tconst p2 = this.hud.findByName('P2');\n\t\tif (p1 && p1.element) {\n\t\t\tp1.element.text = `P1: ${Math.max(0, Math.floor(p1Health))}`;\n\t\t}\n\t\tif (p2 && p2.element) {\n\t\t\tp2.element.text = `P2: ${Math.max(0, Math.floor(p2Health))}`;\n\t\t}\n\t}\n}\n\n", "/**\n * PostProcessingManager - HD-2D Post-Processing Effects\n * Implements Octopath Traveler style post-processing: depth-of-field, bloom, color grading\n * Features: Real-time DOF, volumetric lighting, cinematic color grading\n */\n\nimport * as pc from 'playcanvas';\nimport { ShaderUtils } from '../../core/graphics/ShaderUtils';\nimport { ISystem } from '../../../types/core';\nimport { PostProcessEffect, PostProcessingState, ScreenShake, HitFlash, SlowMotion } from '../../../types/graphics';\n\ninterface DepthOfFieldSettings {\n    enabled: boolean;\n    focusDistance: number;\n    focusRange: number;\n    blurRadius: number;\n    maxBlur: number;\n    bokehIntensity: number;\n    adaptiveFocus: boolean;\n}\n\ninterface BloomSettings {\n    enabled: boolean;\n    threshold: number;\n    intensity: number;\n    radius: number;\n    passes: number;\n    quality: string;\n}\n\ninterface ColorGradingSettings {\n    enabled: boolean;\n    contrast: number;\n    saturation: number;\n    brightness: number;\n    warmth: number;\n    vignette: number;\n    filmGrain: number;\n}\n\ninterface LightingEffectsSettings {\n    enabled: boolean;\n    volumetricFog: boolean;\n    lightShafts: boolean;\n    screenSpaceReflections: boolean;\n    ambientOcclusion: boolean;\n}\n\ninterface FightingGameEffects {\n    enabled: boolean;\n    hitPause: boolean;\n    screenShake: ScreenShake;\n    flashEffect: HitFlash;\n    slowMotion: SlowMotion;\n    dramaTicLighting: boolean;\n}\n\ninterface PostProcessingEffects {\n    depthOfField: DepthOfFieldSettings;\n    bloom: BloomSettings;\n    colorGrading: ColorGradingSettings;\n    lightingEffects: LightingEffectsSettings;\n    fightingGameEffects: FightingGameEffects;\n}\n\ninterface RenderTargets {\n    sceneColor: pc.RenderTarget | null;\n    sceneDepth: pc.RenderTarget | null;\n    blurHorizontal: pc.RenderTarget | null;\n    blurVertical: pc.RenderTarget | null;\n    bloom: pc.RenderTarget | null;\n    final: pc.RenderTarget | null;\n}\n\ninterface PostProcessingMaterials {\n    depthOfField: pc.StandardMaterial | null;\n    bloom: pc.StandardMaterial | null;\n    colorGrading: pc.StandardMaterial | null;\n    combine: pc.StandardMaterial | null;\n    blur: pc.StandardMaterial | null;\n}\n\ninterface PostProcessingCameras {\n    postProcess: pc.Entity | null;\n    depth: pc.Entity | null;\n}\n\ninterface QualitySettings {\n    scale: number;\n    minScale: number;\n    maxScale: number;\n}\n\nclass PostProcessingManager implements ISystem {\n    private app: pc.Application;\n    private initialized: boolean = false;\n    \n    // Post-processing configuration\n    private effects: PostProcessingEffects = {\n        depthOfField: {\n            enabled: true,\n            focusDistance: 15.0,\n            focusRange: 5.0,\n            blurRadius: 1.5,\n            maxBlur: 2.0,\n            bokehIntensity: 0.8,\n            adaptiveFocus: true\n        },\n        \n        bloom: {\n            enabled: true,\n            threshold: 0.7,\n            intensity: 0.9,\n            radius: 0.8,\n            passes: 3,\n            quality: 'high'\n        },\n        \n        colorGrading: {\n            enabled: true,\n            contrast: 1.1,\n            saturation: 1.15,\n            brightness: 0.05,\n            warmth: 0.1,\n            vignette: 0.3,\n            filmGrain: 0.15\n        },\n        \n        lightingEffects: {\n            enabled: true,\n            volumetricFog: true,\n            lightShafts: true,\n            screenSpaceReflections: false,\n            ambientOcclusion: true\n        },\n        \n        fightingGameEffects: {\n            enabled: true,\n            hitPause: false,\n            screenShake: { intensity: 0, duration: 0, decay: 0, frequency: 0, active: false },\n            flashEffect: { color: new pc.Color(1, 1, 1), intensity: 0, duration: 0, active: false },\n            slowMotion: { factor: 1.0, duration: 0, active: false },\n            dramaTicLighting: false\n        }\n    };\n    \n    // Render targets for multi-pass rendering\n    private renderTargets: RenderTargets = {\n        sceneColor: null,\n        sceneDepth: null,\n        blurHorizontal: null,\n        blurVertical: null,\n        bloom: null,\n        final: null\n    };\n    \n    // Post-processing materials/shaders\n    private materials: PostProcessingMaterials = {\n        depthOfField: null,\n        bloom: null,\n        colorGrading: null,\n        combine: null,\n        blur: null\n    };\n    \n    // Effect cameras for multi-pass rendering\n    private cameras: PostProcessingCameras = {\n        postProcess: null,\n        depth: null\n    };\n    \n    // Performance settings\n    private quality: string = 'ultra'; // ultra, high, medium, low\n    private resolution: QualitySettings = {\n        scale: 1.0,\n        minScale: 0.5,\n        maxScale: 1.0\n    };\n    \n    // Entities\n    private fullScreenQuad: pc.Entity | null = null;\n\n    constructor(app: pc.Application) {\n        this.app = app;\n    }\n\n    public async initialize(): Promise<void> {\n        console.log('Initializing Post-Processing Manager...');\n        \n        try {\n            // Create render targets\n            this.createRenderTargets();\n            \n            // Create post-processing materials\n            await this.createPostProcessingMaterials();\n            \n            // Setup post-processing cameras\n            this.setupPostProcessingCameras();\n            \n            // Create effect entities\n            this.createEffectEntities();\n            \n            // Setup render pipeline\n            this.setupRenderPipeline();\n            \n            this.initialized = true;\n            console.log('Post-Processing Manager initialized successfully');\n            \n        } catch (error) {\n            console.error('Failed to initialize Post-Processing Manager:', error);\n            throw error;\n        }\n    }\n\n    private createRenderTargets(): void {\n        const device = this.app.graphicsDevice;\n        const width = Math.floor(device.width * this.resolution.scale);\n        const height = Math.floor(device.height * this.resolution.scale);\n        \n        // Main scene color buffer\n        this.renderTargets.sceneColor = new pc.RenderTarget({\n            colorBuffer: new pc.Texture(device, {\n                width: width,\n                height: height,\n                format: pc.PIXELFORMAT_R8_G8_B8_A8,\n                mipmaps: false,\n                addressU: pc.ADDRESS_CLAMP_TO_EDGE,\n                addressV: pc.ADDRESS_CLAMP_TO_EDGE,\n                magFilter: pc.FILTER_LINEAR,\n                minFilter: pc.FILTER_LINEAR\n            }),\n            depthBuffer: true,\n            samples: this.quality === 'ultra' ? 4 : 1\n        });\n        \n        // Depth buffer for DOF\n        this.renderTargets.sceneDepth = new pc.RenderTarget({\n            colorBuffer: new pc.Texture(device, {\n                width: width,\n                height: height,\n                format: pc.PIXELFORMAT_R8_G8_B8_A8,\n                mipmaps: false,\n                addressU: pc.ADDRESS_CLAMP_TO_EDGE,\n                addressV: pc.ADDRESS_CLAMP_TO_EDGE,\n                magFilter: pc.FILTER_LINEAR,\n                minFilter: pc.FILTER_LINEAR\n            }),\n            depthBuffer: false\n        });\n        \n        // Blur targets (half resolution for performance)\n        const blurWidth = Math.floor(width * 0.5);\n        const blurHeight = Math.floor(height * 0.5);\n        \n        this.renderTargets.blurHorizontal = new pc.RenderTarget({\n            colorBuffer: new pc.Texture(device, {\n                width: blurWidth,\n                height: blurHeight,\n                format: pc.PIXELFORMAT_R8_G8_B8_A8,\n                mipmaps: false,\n                addressU: pc.ADDRESS_CLAMP_TO_EDGE,\n                addressV: pc.ADDRESS_CLAMP_TO_EDGE,\n                magFilter: pc.FILTER_LINEAR,\n                minFilter: pc.FILTER_LINEAR\n            }),\n            depthBuffer: false\n        });\n        \n        this.renderTargets.blurVertical = new pc.RenderTarget({\n            colorBuffer: new pc.Texture(device, {\n                width: blurWidth,\n                height: blurHeight,\n                format: pc.PIXELFORMAT_R8_G8_B8_A8,\n                mipmaps: false,\n                addressU: pc.ADDRESS_CLAMP_TO_EDGE,\n                addressV: pc.ADDRESS_CLAMP_TO_EDGE,\n                magFilter: pc.FILTER_LINEAR,\n                minFilter: pc.FILTER_LINEAR\n            }),\n            depthBuffer: false\n        });\n        \n        // Bloom target\n        this.renderTargets.bloom = new pc.RenderTarget({\n            colorBuffer: new pc.Texture(device, {\n                width: blurWidth,\n                height: blurHeight,\n                format: pc.PIXELFORMAT_R8_G8_B8_A8,\n                mipmaps: false,\n                addressU: pc.ADDRESS_CLAMP_TO_EDGE,\n                addressV: pc.ADDRESS_CLAMP_TO_EDGE,\n                magFilter: pc.FILTER_LINEAR,\n                minFilter: pc.FILTER_LINEAR\n            }),\n            depthBuffer: false\n        });\n        \n        console.log('Post-processing render targets created');\n    }\n\n    private async createPostProcessingMaterials(): Promise<void> {\n        // Depth material driven by our TS shader\n        const depthMat = ShaderUtils.createDepthPostProcessMaterial(this.app) as unknown as pc.StandardMaterial;\n        depthMat.blendType = pc.BLEND_NONE;\n        depthMat.depthTest = false;\n        depthMat.depthWrite = false;\n        this.materials.depthOfField = depthMat;\n        \n        // Bloom material (placeholder simple additive pass)\n        this.materials.bloom = new pc.StandardMaterial();\n        this.materials.bloom.chunks.PS_LIGHTING = this.getBloomFragmentShader();\n        this.materials.bloom.blendType = pc.BLEND_ADDITIVE;\n        this.materials.bloom.depthTest = false;\n        this.materials.bloom.depthWrite = false;\n        \n        // Blur material (placeholder)\n        this.materials.blur = new pc.StandardMaterial();\n        this.materials.blur.chunks.PS_LIGHTING = this.getBlurFragmentShader();\n        this.materials.blur.blendType = pc.BLEND_NONE;\n        this.materials.blur.depthTest = false;\n        this.materials.blur.depthWrite = false;\n        \n        // Color grading material (placeholder)\n        this.materials.colorGrading = new pc.StandardMaterial();\n        this.materials.colorGrading.chunks.PS_LIGHTING = this.getColorGradingFragmentShader();\n        this.materials.colorGrading.blendType = pc.BLEND_NONE;\n        this.materials.colorGrading.depthTest = false;\n        this.materials.colorGrading.depthWrite = false;\n        \n        // Final combine material (placeholder)\n        this.materials.combine = new pc.StandardMaterial();\n        this.materials.combine.chunks.PS_LIGHTING = this.getCombineFragmentShader();\n        this.materials.combine.blendType = pc.BLEND_NONE;\n        this.materials.combine.depthTest = false;\n        this.materials.combine.depthWrite = false;\n        \n        console.log('Post-processing materials created');\n    }\n\n    private getDOFFragmentShader(): string {\n        return `\n        uniform sampler2D texture_sceneColor;\n        uniform sampler2D texture_sceneDepth;\n        uniform vec2 uScreenSize;\n        uniform float uFocusDistance;\n        uniform float uFocusRange;\n        uniform float uMaxBlur;\n        \n        varying vec2 vUv0;\n        \n        void main() {\n            vec2 uv = vUv0;\n            vec4 sceneColor = texture2D(texture_sceneColor, uv);\n            float depth = texture2D(texture_sceneDepth, uv).r;\n            \n            // Calculate blur amount based on distance from focus\n            float focusBlur = abs(depth - uFocusDistance) / uFocusRange;\n            focusBlur = clamp(focusBlur, 0.0, 1.0) * uMaxBlur;\n            \n            // Simple box blur (would be replaced with proper DOF in production)\n            vec3 color = sceneColor.rgb;\n            if (focusBlur > 0.1) {\n                vec3 blurColor = vec3(0.0);\n                float samples = 0.0;\n                \n                for (int x = -2; x <= 2; x++) {\n                    for (int y = -2; y <= 2; y++) {\n                        vec2 offset = vec2(float(x), float(y)) * focusBlur / uScreenSize;\n                        blurColor += texture2D(texture_sceneColor, uv + offset).rgb;\n                        samples += 1.0;\n                    }\n                }\n                \n                color = mix(color, blurColor / samples, focusBlur);\n            }\n            \n            gl_FragColor = vec4(color, sceneColor.a);\n        }`;\n    }\n\n    private getBloomFragmentShader(): string {\n        return `\n        uniform sampler2D texture_sceneColor;\n        uniform float uBloomThreshold;\n        uniform float uBloomIntensity;\n        \n        varying vec2 vUv0;\n        \n        void main() {\n            vec4 color = texture2D(texture_sceneColor, vUv0);\n            \n            // Extract bright areas\n            float luminance = dot(color.rgb, vec3(0.299, 0.587, 0.114));\n            float bloomAmount = max(luminance - uBloomThreshold, 0.0);\n            bloomAmount *= uBloomIntensity;\n            \n            gl_FragColor = vec4(color.rgb * bloomAmount, color.a);\n        }`;\n    }\n\n    private getBlurFragmentShader(): string {\n        return `\n        uniform sampler2D texture_source;\n        uniform vec2 uBlurDirection;\n        uniform vec2 uScreenSize;\n        \n        varying vec2 vUv0;\n        \n        void main() {\n            vec2 texelSize = 1.0 / uScreenSize;\n            vec3 color = vec3(0.0);\n            \n            // 9-tap Gaussian blur\n            color += texture2D(texture_source, vUv0 - 4.0 * uBlurDirection * texelSize).rgb * 0.05;\n            color += texture2D(texture_source, vUv0 - 3.0 * uBlurDirection * texelSize).rgb * 0.09;\n            color += texture2D(texture_source, vUv0 - 2.0 * uBlurDirection * texelSize).rgb * 0.12;\n            color += texture2D(texture_source, vUv0 - 1.0 * uBlurDirection * texelSize).rgb * 0.15;\n            color += texture2D(texture_source, vUv0).rgb * 0.18;\n            color += texture2D(texture_source, vUv0 + 1.0 * uBlurDirection * texelSize).rgb * 0.15;\n            color += texture2D(texture_source, vUv0 + 2.0 * uBlurDirection * texelSize).rgb * 0.12;\n            color += texture2D(texture_source, vUv0 + 3.0 * uBlurDirection * texelSize).rgb * 0.09;\n            color += texture2D(texture_source, vUv0 + 4.0 * uBlurDirection * texelSize).rgb * 0.05;\n            \n            gl_FragColor = vec4(color, 1.0);\n        }`;\n    }\n\n    private getColorGradingFragmentShader(): string {\n        return `\n        uniform sampler2D texture_sceneColor;\n        uniform float uContrast;\n        uniform float uSaturation;\n        uniform float uBrightness;\n        uniform float uWarmth;\n        uniform float uVignette;\n        uniform float uFilmGrain;\n        uniform float uTime;\n        \n        varying vec2 vUv0;\n        \n        float random(vec2 st) {\n            return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n        }\n        \n        void main() {\n            vec2 uv = vUv0;\n            vec4 color = texture2D(texture_sceneColor, uv);\n            \n            // Brightness\n            color.rgb += uBrightness;\n            \n            // Contrast\n            color.rgb = (color.rgb - 0.5) * uContrast + 0.5;\n            \n            // Saturation\n            float luminance = dot(color.rgb, vec3(0.299, 0.587, 0.114));\n            color.rgb = mix(vec3(luminance), color.rgb, uSaturation);\n            \n            // Warmth (blue/orange tint)\n            color.rgb = mix(color.rgb, color.rgb * vec3(1.0 + uWarmth, 1.0, 1.0 - uWarmth), abs(uWarmth));\n            \n            // Vignette\n            if (uVignette > 0.0) {\n                float dist = distance(uv, vec2(0.5));\n                float vignetteFactor = 1.0 - smoothstep(0.3, 0.8, dist * uVignette);\n                color.rgb *= vignetteFactor;\n            }\n            \n            // Film grain\n            if (uFilmGrain > 0.0) {\n                float noise = random(uv + uTime) * 2.0 - 1.0;\n                color.rgb += noise * uFilmGrain * 0.1;\n            }\n            \n            gl_FragColor = vec4(color.rgb, color.a);\n        }`;\n    }\n\n    private getCombineFragmentShader(): string {\n        return `\n        uniform sampler2D texture_sceneColor;\n        uniform sampler2D texture_bloom;\n        uniform float uBloomIntensity;\n        uniform vec3 uFlashColor;\n        uniform float uFlashIntensity;\n        \n        varying vec2 vUv0;\n        \n        void main() {\n            vec4 sceneColor = texture2D(texture_sceneColor, vUv0);\n            vec4 bloomColor = texture2D(texture_bloom, vUv0);\n            \n            // Combine scene and bloom\n            vec3 finalColor = sceneColor.rgb + bloomColor.rgb * uBloomIntensity;\n            \n            // Apply flash effect (for hit effects)\n            if (uFlashIntensity > 0.0) {\n                finalColor = mix(finalColor, uFlashColor, uFlashIntensity);\n            }\n            \n            gl_FragColor = vec4(finalColor, sceneColor.a);\n        }`;\n    }\n\n    private setupPostProcessingCameras(): void {\n        // Post-processing camera (orthographic, full screen)\n        this.cameras.postProcess = new pc.Entity('PostProcessCamera');\n        this.cameras.postProcess.addComponent('camera', {\n            clearColor: new pc.Color(0, 0, 0, 0),\n            projection: pc.PROJECTION_ORTHOGRAPHIC,\n            orthoHeight: 1,\n            nearClip: 0,\n            farClip: 1,\n            priority: 100,\n            enabled: false\n        });\n        \n        this.app.root.addChild(this.cameras.postProcess);\n    }\n\n    private createEffectEntities(): void {\n        // Full-screen quad for post-processing\n        this.fullScreenQuad = new pc.Entity('FullScreenQuad');\n        this.fullScreenQuad.addComponent('render', {\n            type: 'plane'\n        });\n        this.fullScreenQuad.setLocalScale(2, 2, 1);\n        this.fullScreenQuad.setPosition(0, 0, 0.5);\n        \n        this.app.root.addChild(this.fullScreenQuad);\n    }\n\n    private setupRenderPipeline(): void {\n        // Hook into the main camera's render pipeline\n        const mainCamera = this.app.root.findByName('MainCamera');\n        if (mainCamera && mainCamera.camera) {\n            // Set main camera to render to our scene color target\n            mainCamera.camera.renderTarget = this.renderTargets.sceneColor;\n        }\n        \n        console.log('Post-processing render pipeline configured');\n    }\n\n    // Public API methods\n    public setDepthOfField(focusDistance: number, focusRange: number, blurRadius: number): void {\n        this.effects.depthOfField.focusDistance = focusDistance;\n        this.effects.depthOfField.focusRange = focusRange;\n        this.effects.depthOfField.blurRadius = blurRadius;\n    }\n\n    public setBloom(threshold: number, intensity: number, radius: number): void {\n        this.effects.bloom.threshold = threshold;\n        this.effects.bloom.intensity = intensity;\n        this.effects.bloom.radius = radius;\n    }\n\n    public setColorGrading(contrast: number, saturation: number, brightness: number, warmth: number): void {\n        this.effects.colorGrading.contrast = contrast;\n        this.effects.colorGrading.saturation = saturation;\n        this.effects.colorGrading.brightness = brightness;\n        this.effects.colorGrading.warmth = warmth;\n    }\n\n    // Fighting game specific effects\n    public triggerHitFlash(color: [number, number, number] = [1, 1, 1], intensity: number = 0.8, duration: number = 100): void {\n        this.effects.fightingGameEffects.flashEffect.color = new pc.Color(color[0], color[1], color[2]);\n        this.effects.fightingGameEffects.flashEffect.intensity = intensity;\n        this.effects.fightingGameEffects.flashEffect.duration = duration;\n        this.effects.fightingGameEffects.flashEffect.active = true;\n        \n        // Fade out flash over duration\n        const startTime = Date.now();\n        const fadeFlash = () => {\n            const elapsed = Date.now() - startTime;\n            const progress = elapsed / duration;\n            \n            if (progress < 1) {\n                this.effects.fightingGameEffects.flashEffect.intensity = intensity * (1 - progress);\n                requestAnimationFrame(fadeFlash);\n            } else {\n                this.effects.fightingGameEffects.flashEffect.intensity = 0;\n                this.effects.fightingGameEffects.flashEffect.active = false;\n            }\n        };\n        \n        fadeFlash();\n    }\n\n    public triggerScreenShake(intensity: number = 1.0, duration: number = 300): void {\n        this.effects.fightingGameEffects.screenShake.intensity = intensity;\n        this.effects.fightingGameEffects.screenShake.duration = duration;\n        this.effects.fightingGameEffects.screenShake.active = true;\n        \n        const startTime = Date.now();\n        const mainCamera = this.app.root.findByName('MainCamera');\n        const originalPos = mainCamera.getPosition().clone();\n        \n        const shakeCamera = () => {\n            const elapsed = Date.now() - startTime;\n            const progress = elapsed / duration;\n            \n            if (progress < 1) {\n                const currentIntensity = intensity * (1 - progress);\n                const shakeX = (Math.random() - 0.5) * currentIntensity * 0.5;\n                const shakeY = (Math.random() - 0.5) * currentIntensity * 0.3;\n                \n                mainCamera.setPosition(originalPos.x + shakeX, originalPos.y + shakeY, originalPos.z);\n                requestAnimationFrame(shakeCamera);\n            } else {\n                mainCamera.setPosition(originalPos);\n                this.effects.fightingGameEffects.screenShake.intensity = 0;\n                this.effects.fightingGameEffects.screenShake.active = false;\n            }\n        };\n        \n        shakeCamera();\n    }\n\n    public triggerSlowMotion(factor: number = 0.3, duration: number = 1000): void {\n        this.effects.fightingGameEffects.slowMotion.factor = factor;\n        this.effects.fightingGameEffects.slowMotion.duration = duration;\n        this.effects.fightingGameEffects.slowMotion.active = true;\n        this.app.timeScale = factor;\n        \n        setTimeout(() => {\n            this.effects.fightingGameEffects.slowMotion.factor = 1.0;\n            this.effects.fightingGameEffects.slowMotion.active = false;\n            this.app.timeScale = 1.0;\n        }, duration);\n    }\n\n    public setDramaticLighting(enabled: boolean): void {\n        this.effects.fightingGameEffects.dramaTicLighting = enabled;\n        \n        // Adjust post-processing for dramatic effect\n        if (enabled) {\n            this.setColorGrading(1.3, 1.4, 0.1, 0.2);\n            this.setBloom(0.5, 1.2, 1.0);\n        } else {\n            // Reset to normal values\n            this.setColorGrading(1.1, 1.15, 0.05, 0.1);\n            this.setBloom(0.7, 0.9, 0.8);\n        }\n    }\n\n    // Update loop\n    public update(dt: number): void {\n        if (!this.initialized) return;\n        \n        this.updateEffectParameters(dt);\n        this.renderPostProcessing(dt);\n    }\n\n    private updateEffectParameters(dt: number): void {\n        // Update material parameters\n        if (this.materials.depthOfField) {\n            this.materials.depthOfField.setParameter('uFocusDistance', this.effects.depthOfField.focusDistance);\n            this.materials.depthOfField.setParameter('uFocusRange', this.effects.depthOfField.focusRange);\n            this.materials.depthOfField.setParameter('uMaxBlur', this.effects.depthOfField.maxBlur);\n        }\n        \n        if (this.materials.bloom) {\n            this.materials.bloom.setParameter('uBloomThreshold', this.effects.bloom.threshold);\n            this.materials.bloom.setParameter('uBloomIntensity', this.effects.bloom.intensity);\n        }\n        \n        if (this.materials.colorGrading) {\n            this.materials.colorGrading.setParameter('uContrast', this.effects.colorGrading.contrast);\n            this.materials.colorGrading.setParameter('uSaturation', this.effects.colorGrading.saturation);\n            this.materials.colorGrading.setParameter('uBrightness', this.effects.colorGrading.brightness);\n            this.materials.colorGrading.setParameter('uWarmth', this.effects.colorGrading.warmth);\n            this.materials.colorGrading.setParameter('uVignette', this.effects.colorGrading.vignette);\n            this.materials.colorGrading.setParameter('uFilmGrain', this.effects.colorGrading.filmGrain);\n            this.materials.colorGrading.setParameter('uTime', Date.now() * 0.001);\n        }\n        \n        if (this.materials.combine) {\n            this.materials.combine.setParameter('uBloomIntensity', this.effects.bloom.intensity);\n            this.materials.combine.setParameter('uFlashColor', [\n                this.effects.fightingGameEffects.flashEffect.color.r,\n                this.effects.fightingGameEffects.flashEffect.color.g,\n                this.effects.fightingGameEffects.flashEffect.color.b\n            ]);\n            this.materials.combine.setParameter('uFlashIntensity', this.effects.fightingGameEffects.flashEffect.intensity);\n        }\n    }\n\n    private renderPostProcessing(dt: number): void {\n        if (!this.fullScreenQuad || !this.materials.depthOfField || !this.renderTargets.sceneColor) return;\n        const device = this.app.graphicsDevice;\n\n        // Update dynamic uniforms\n        const timeSec = Date.now() * 0.001;\n        (this.materials.depthOfField as pc.Material).setParameter('uTime', timeSec);\n        (this.materials.depthOfField as pc.Material).setParameter('uScreenSize', new Float32Array([device.width, device.height]));\n        (this.materials.depthOfField as pc.Material).setParameter('uInvScreenSize', new Float32Array([1 / Math.max(1, device.width), 1 / Math.max(1, device.height)]));\n\n        // Bind input textures (scene color as both color and depth placeholder if no depth RT)\n        (this.materials.depthOfField as pc.Material).setParameter('texture_colorBuffer', this.renderTargets.sceneColor.colorBuffer);\n        const depthBufferTex = this.renderTargets.sceneDepth ? this.renderTargets.sceneDepth.colorBuffer : this.renderTargets.sceneColor.colorBuffer;\n        (this.materials.depthOfField as pc.Material).setParameter('texture_depthBuffer', depthBufferTex);\n\n        // Render fullscreen quad with DOF shader\n        this.fullScreenQuad.render.material = this.materials.depthOfField;\n    }\n\n    // Quality management\n    public setQuality(quality: string): void {\n        this.quality = quality;\n        \n        const qualitySettings: Record<string, any> = {\n            low: { scale: 0.5, bloom: false, dof: false },\n            medium: { scale: 0.75, bloom: true, dof: false },\n            high: { scale: 1.0, bloom: true, dof: true },\n            ultra: { scale: 1.0, bloom: true, dof: true }\n        };\n        \n        const settings = qualitySettings[quality];\n        this.resolution.scale = settings.scale;\n        this.effects.bloom.enabled = settings.bloom;\n        this.effects.depthOfField.enabled = settings.dof;\n        \n        // Recreate render targets with new resolution\n        this.createRenderTargets();\n        \n        console.log(`Post-processing quality set to: ${quality}`);\n    }\n\n    public destroy(): void {\n        // Clean up resources\n        if (this.fullScreenQuad) {\n            this.fullScreenQuad.destroy();\n        }\n        \n        // Clean up render targets\n        Object.values(this.renderTargets).forEach(target => {\n            if (target) {\n                target.destroy();\n            }\n        });\n        \n        // Clean up cameras\n        Object.values(this.cameras).forEach(camera => {\n            if (camera) {\n                camera.destroy();\n            }\n        });\n        \n        console.log('PostProcessingManager destroyed');\n    }\n}\n\nexport default PostProcessingManager;", "import * as pc from 'playcanvas';\nimport { CharacterHighlightShader } from '../../typescript/shaders/CharacterHighlightShader';\nimport { RimLightingShader } from '../../typescript/shaders/RimLightingShader';\nimport { SpriteNormalMappingShader } from '../../typescript/shaders/SpriteNormalMappingShader';\nimport { DepthPostProcessShader } from '../../typescript/shaders/DepthPostProcessShader';\nimport { StageStormySkyShader } from '../../typescript/shaders/StageStormySkyShader';\n\nexport class ShaderUtils {\n    public static createMaterialFromShaders(app: pc.Application, vertexShader: string, fragmentShader: string): pc.Material {\n        const shader = new pc.Shader(app.graphicsDevice, {\n            attributes: {\n                vertex_position: pc.SEMANTIC_POSITION,\n                vertex_texCoord0: pc.SEMANTIC_TEXCOORD0,\n                vertex_normal: pc.SEMANTIC_NORMAL,\n                vertex_tangent: pc.SEMANTIC_TANGENT\n            },\n            vshader: vertexShader,\n            fshader: fragmentShader\n        });\n\n        const material = new pc.Material();\n        material.shader = shader;\n        return material;\n    }\n\n    public static createCharacterHighlightMaterial(app: pc.Application): pc.Material {\n        const mat = this.createMaterialFromShaders(app, CharacterHighlightShader.vertexShader, CharacterHighlightShader.fragmentShader);\n        // Reasonable defaults; callers can override\n        mat.setParameter('outline_width', 2.0);\n        mat.setParameter('outline_color', new Float32Array([1.0, 0.5, 0.0, 1.0]));\n        mat.setParameter('rim_power', 2.0);\n        mat.setParameter('rim_intensity', 1.0);\n        mat.setParameter('rim_color', new Float32Array([0.8, 0.9, 1.0, 1.0]));\n        mat.setParameter('energy_flow_speed', 2.0);\n        mat.setParameter('energy_frequency', 5.0);\n        mat.setParameter('enable_energy_flow', 1);\n        mat.setParameter('ambient_color', new Float32Array([0.2, 0.2, 0.3, 1.0]));\n        mat.setParameter('main_light_color', new Float32Array([1.0, 0.95, 0.9, 1.0]));\n        mat.setParameter('lighting_intensity', 1.0);\n        mat.setParameter('light_direction', new Float32Array([0.3, -0.5]));\n        mat.setParameter('enable_pseudo_depth', 1);\n        mat.setParameter('depth_offset', 0.01);\n        mat.setParameter('shadow_color', new Float32Array([0.1, 0.1, 0.2, 0.3]));\n        mat.setParameter('time', 0.0);\n        mat.setParameter('texture_pixelSize', new Float32Array([1.0 / 256.0, 1.0 / 256.0]));\n        return mat;\n    }\n\n    public static createRimLightingMaterial(app: pc.Application): pc.Material {\n        const mat = this.createMaterialFromShaders(app, RimLightingShader.vertexShader, RimLightingShader.fragmentShader);\n        // Minimal defaults\n        mat.setParameter('material_opacity', 1.0);\n        mat.setParameter('material_diffuse', new Float32Array([1, 1, 1]));\n        mat.setParameter('material_emissive', new Float32Array([0, 0, 0]));\n        mat.setParameter('light_globalAmbient', new Float32Array([0.2, 0.2, 0.2]));\n        mat.setParameter('light_color', new Float32Array([1, 1, 1]));\n        mat.setParameter('light_direction', new Float32Array([0, -1, 0]));\n        mat.setParameter('light_intensity', 1.0);\n        mat.setParameter('rimPower', 2.0);\n        mat.setParameter('rimIntensity', 0.8);\n        mat.setParameter('rimColor', new Float32Array([0.8, 0.9, 1.0]));\n        mat.setParameter('depthBlur', 0.0);\n        mat.setParameter('pixelSize', 0.0);\n        mat.setParameter('screenResolution', new Float32Array([1920, 1080]));\n        mat.setParameter('hitFlash', 0.0);\n        mat.setParameter('hitFlashColor', new Float32Array([1.0, 1.0, 1.0]));\n        mat.setParameter('characterHighlight', 0.0);\n        return mat;\n    }\n\n    public static createSpriteNormalMappingMaterial(app: pc.Application): pc.Material {\n        const mat = this.createMaterialFromShaders(app, SpriteNormalMappingShader.vertexShader, SpriteNormalMappingShader.fragmentShader);\n        // Defaults for normal mapping sprite\n        mat.setParameter('material_diffuse', new Float32Array([1, 1, 1]));\n        mat.setParameter('material_specular', new Float32Array([0.1, 0.1, 0.1]));\n        mat.setParameter('material_shininess', 16.0);\n        mat.setParameter('material_opacity', 1.0);\n        mat.setParameter('light_color_0', new Float32Array([1, 1, 1]));\n        mat.setParameter('light_color_1', new Float32Array([1, 1, 1]));\n        mat.setParameter('light_color_2', new Float32Array([1, 1, 1]));\n        mat.setParameter('light_intensity_0', 1.0);\n        mat.setParameter('light_intensity_1', 0.5);\n        mat.setParameter('light_intensity_2', 0.2);\n        mat.setParameter('normalMapStrength', 1.0);\n        mat.setParameter('spriteDepth', 0.0);\n        mat.setParameter('spritePixelSize', new Float32Array([256, 256]));\n        mat.setParameter('pixelPerfect', 0.0);\n        mat.setParameter('hitFlash', 0.0);\n        mat.setParameter('hitFlashColor', new Float32Array([1, 1, 1]));\n        mat.setParameter('stunEffect', 0.0);\n        mat.setParameter('counterHitGlow', 0.0);\n        mat.setParameter('playerTint', new Float32Array([1, 1, 1]));\n        mat.setParameter('animationFrame', 0.0);\n        mat.setParameter('spriteSheetSize', new Float32Array([1, 1]));\n        mat.setParameter('frameSize', new Float32Array([1, 1]));\n        return mat;\n    }\n\n    public static createDepthPostProcessMaterial(app: pc.Application): pc.Material {\n        const mat = this.createMaterialFromShaders(app, DepthPostProcessShader.vertexShader, DepthPostProcessShader.fragmentShader);\n        // Defaults\n        const device = app.graphicsDevice;\n        mat.setParameter('uScreenSize', new Float32Array([device.width, device.height]));\n        mat.setParameter('uInvScreenSize', new Float32Array([1 / Math.max(1, device.width), 1 / Math.max(1, device.height)]));\n        mat.setParameter('uNearClip', 0.1);\n        mat.setParameter('uFarClip', 1000.0);\n        mat.setParameter('uFocusDistance', 15.0);\n        mat.setParameter('uFocusRange', 5.0);\n        mat.setParameter('uBokehRadius', 1.5);\n        mat.setParameter('uBokehIntensity', 0.8);\n        mat.setParameter('uFogColor', new Float32Array([0.7, 0.8, 0.9]));\n        mat.setParameter('uFogDensity', 0.0);\n        mat.setParameter('uFogStart', 10.0);\n        mat.setParameter('uFogEnd', 50.0);\n        mat.setParameter('uAtmosphericPerspective', 0.0);\n        mat.setParameter('uAtmosphereColor', new Float32Array([0.7, 0.8, 0.9]));\n        mat.setParameter('uHeatHaze', 0.0);\n        mat.setParameter('uColorSeparation', 0.0);\n        mat.setParameter('uScreenShake', 0.0);\n        mat.setParameter('uScreenShakeOffset', new Float32Array([0, 0]));\n        mat.setParameter('uTimeScale', 1.0);\n        mat.setParameter('uTime', 0.0);\n        return mat;\n    }\n\n    public static createStageStormySkyMaterial(app: pc.Application): pc.Material {\n        const mat = this.createMaterialFromShaders(app, StageStormySkyShader.vertexShader, StageStormySkyShader.fragmentShader);\n        mat.setParameter('uScrollSpeed', new Float32Array([0.01, 0.002]));\n        mat.setParameter('uTime', 0.0);\n        mat.setParameter('uTint', new Float32Array([0.6, 0.7, 0.8, 1.0]));\n        return mat;\n    }\n}\n\n", "\n/**\n * Advanced Character Highlight Shader for Cutting-Edge Visuals\n * Enhanced for Pseudo 2.5D rendering pipeline\n * Converted from GDScript to TypeScript\n */\n\nexport class CharacterHighlightShader {\n  static readonly vertexShader = `\n    attribute vec3 vertex_position;\n    attribute vec2 vertex_texCoord0;\n    \n    uniform mat4 matrix_model;\n    uniform mat4 matrix_view;\n    uniform mat4 matrix_projection;\n    \n    varying vec2 vUv0;\n    varying vec2 vWorldPosition;\n    \n    void main() {\n        vec4 worldPos = matrix_model * vec4(vertex_position, 1.0);\n        vWorldPosition = worldPos.xy;\n        vUv0 = vertex_texCoord0;\n        gl_Position = matrix_projection * matrix_view * worldPos;\n    }\n  `;\n\n  static readonly fragmentShader = `\n    #ifdef GL_ES\n    precision highp float;\n    #endif\n    \n    varying vec2 vUv0;\n    varying vec2 vWorldPosition;\n    \n    uniform sampler2D texture_diffuseMap;\n    uniform vec2 texture_pixelSize;\n    \n    // Shader parameters\n    uniform float outline_width;\n    uniform vec4 outline_color;\n    uniform float rim_power;\n    uniform float rim_intensity;\n    uniform vec4 rim_color;\n    uniform float energy_flow_speed;\n    uniform float energy_frequency;\n    uniform bool enable_energy_flow;\n    \n    // Pseudo 2.5D lighting integration\n    uniform vec4 ambient_color;\n    uniform vec4 main_light_color;\n    uniform float lighting_intensity;\n    uniform vec2 light_direction;\n    \n    // Depth and shadow effects\n    uniform bool enable_pseudo_depth;\n    uniform float depth_offset;\n    uniform vec4 shadow_color;\n    \n    uniform float time;\n    \n    // Calculate pseudo normal for depth effect\n    vec3 calculate_pseudo_normal(vec2 uv) {\n        vec2 tex_size = 1.0 / texture_pixelSize;\n        float offset = 1.0 / tex_size.x;\n        \n        float height_left = texture2D(texture_diffuseMap, uv - vec2(offset, 0.0)).r;\n        float height_right = texture2D(texture_diffuseMap, uv + vec2(offset, 0.0)).r;\n        float height_up = texture2D(texture_diffuseMap, uv - vec2(0.0, offset)).r;\n        float height_down = texture2D(texture_diffuseMap, uv + vec2(0.0, offset)).r;\n        \n        float dx = (height_right - height_left);\n        float dy = (height_down - height_up);\n        \n        return normalize(vec3(dx, dy, 1.0));\n    }\n    \n    void main() {\n        vec2 uv = vUv0;\n        vec4 tex_color = texture2D(texture_diffuseMap, uv);\n        \n        // Skip transparent pixels\n        if (tex_color.a < 0.1) {\n            gl_FragColor = tex_color;\n            return;\n        }\n        \n        vec3 final_color = tex_color.rgb;\n        \n        // Apply pseudo 2.5D lighting\n        if (enable_pseudo_depth) {\n            vec3 pseudo_normal = calculate_pseudo_normal(uv);\n            float light_factor = dot(pseudo_normal, normalize(vec3(light_direction, 1.0)));\n            light_factor = light_factor * 0.5 + 0.5;\n            \n            vec3 lit_color = mix(ambient_color.rgb, main_light_color.rgb, light_factor);\n            final_color *= lit_color * lighting_intensity;\n            \n            // Add subtle shadow\n            float shadow_factor = 1.0 - light_factor;\n            shadow_factor = smoothstep(0.3, 0.7, shadow_factor);\n            final_color = mix(final_color, shadow_color.rgb, shadow_factor * shadow_color.a * 0.2);\n        }\n        \n        // Create outline by sampling neighboring pixels\n        float outline = 0.0;\n        vec2 tex_size = 1.0 / texture_pixelSize;\n        float outline_width_uv = outline_width / tex_size.x;\n        \n        for (float i = 0.0; i < 8.0; i++) {\n            float angle = i * 0.785398; // 45 degrees in radians\n            vec2 offset = vec2(cos(angle), sin(angle)) * outline_width_uv;\n            float alpha = texture2D(texture_diffuseMap, uv + offset).a;\n            if (alpha < 0.1 && tex_color.a > 0.1) {\n                outline = 1.0;\n                break;\n            }\n        }\n        \n        // Apply outline with depth consideration\n        if (outline > 0.0) {\n            final_color = mix(final_color, outline_color.rgb, outline_color.a);\n        }\n        \n        // Create enhanced rim lighting effect\n        vec2 center = vec2(0.5, 0.5);\n        vec2 rim_dir = normalize(uv - center);\n        float rim_factor = dot(rim_dir, rim_dir);\n        rim_factor = pow(rim_factor, rim_power);\n        \n        // Add energy flow animation\n        float energy = 1.0;\n        if (enable_energy_flow) {\n            float time_offset = time * energy_flow_speed;\n            energy = sin(uv.y * energy_frequency + time_offset) * 0.5 + 0.5;\n            energy = smoothstep(0.3, 0.7, energy);\n        }\n        \n        // Apply rim lighting with energy animation\n        vec3 rim_light = rim_color.rgb * rim_intensity * rim_factor * energy;\n        final_color += rim_light;\n        \n        // Enhanced contrast for fighting game aesthetics\n        final_color = pow(final_color, vec3(0.9));\n        final_color = clamp(final_color, 0.0, 1.0);\n        \n        gl_FragColor = vec4(final_color, tex_color.a);\n    }\n  `;\n\n  public static createMaterial(device: any): any {\n    const material = new device.StandardMaterial();\n    material.chunks.VS_TRANSFORM = this.vertexShader;\n    material.chunks.PS_OUTPUT = this.fragmentShader;\n    return material;\n  }\n\n  public static setUniforms(material: any, params: {\n    outlineWidth: number;\n    outlineColor: [number, number, number, number];\n    rimPower: number;\n    rimIntensity: number;\n    rimColor: [number, number, number, number];\n    energyFlowSpeed: number;\n    energyFrequency: number;\n    enableEnergyFlow: boolean;\n    ambientColor: [number, number, number, number];\n    mainLightColor: [number, number, number, number];\n    lightingIntensity: number;\n    lightDirection: [number, number];\n    enablePseudoDepth: boolean;\n    depthOffset: number;\n    shadowColor: [number, number, number, number];\n    time: number;\n    texturePixelSize: [number, number];\n  }): void {\n    material.setParameter('outline_width', params.outlineWidth);\n    material.setParameter('outline_color', params.outlineColor);\n    material.setParameter('rim_power', params.rimPower);\n    material.setParameter('rim_intensity', params.rimIntensity);\n    material.setParameter('rim_color', params.rimColor);\n    material.setParameter('energy_flow_speed', params.energyFlowSpeed);\n    material.setParameter('energy_frequency', params.energyFrequency);\n    material.setParameter('enable_energy_flow', params.enableEnergyFlow);\n    material.setParameter('ambient_color', params.ambientColor);\n    material.setParameter('main_light_color', params.mainLightColor);\n    material.setParameter('lighting_intensity', params.lightingIntensity);\n    material.setParameter('light_direction', params.lightDirection);\n    material.setParameter('enable_pseudo_depth', params.enablePseudoDepth);\n    material.setParameter('depth_offset', params.depthOffset);\n    material.setParameter('shadow_color', params.shadowColor);\n    material.setParameter('time', params.time);\n    material.setParameter('texture_pixelSize', params.texturePixelSize);\n  }\n}\n\nexport interface CharacterHighlightParams {\n  outlineWidth: number;\n  outlineColor: [number, number, number, number];\n  rimPower: number;\n  rimIntensity: number;\n  rimColor: [number, number, number, number];\n  energyFlowSpeed: number;\n  energyFrequency: number;\n  enableEnergyFlow: boolean;\n  ambientColor: [number, number, number, number];\n  mainLightColor: [number, number, number, number];\n  lightingIntensity: number;\n  lightDirection: [number, number];\n  enablePseudoDepth: boolean;\n  depthOffset: number;\n  shadowColor: [number, number, number, number];\n}\n\nexport class CharacterHighlightManager {\n  private materials: Map<string, any> = new Map();\n  private startTime: number = Date.now();\n\n  createHighlightMaterial(device: any, characterId: string, params: CharacterHighlightParams): any {\n    const material = CharacterHighlightShader.createMaterial(device);\n    this.materials.set(characterId, { material, params });\n    return material;\n  }\n\n  updateHighlight(characterId: string, deltaTime: number): void {\n    const data = this.materials.get(characterId);\n    if (!data) return;\n\n    const currentTime = (Date.now() - this.startTime) / 1000.0;\n    CharacterHighlightShader.setUniforms(data.material, {\n      ...data.params,\n      time: currentTime,\n      texturePixelSize: [1.0 / 256, 1.0 / 256] // Default sprite size\n    });\n  }\n\n  setHighlightParams(characterId: string, params: Partial<CharacterHighlightParams>): void {\n    const data = this.materials.get(characterId);\n    if (!data) return;\n\n    Object.assign(data.params, params);\n  }\n\n  removeHighlight(characterId: string): void {\n    this.materials.delete(characterId);\n  }\n\n  updateAll(deltaTime: number): void {\n    for (const characterId of this.materials.keys()) {\n      this.updateHighlight(characterId, deltaTime);\n    }\n  }\n}\n", "\n/**\n * Rim Lighting Shader for HD-2D Character Depth\n * Provides Octopath Traveler-style rim lighting on 2D sprites\n * Converted from GLSL to TypeScript\n */\n\nexport class RimLightingShader {\n  static readonly vertexShader = `\n    // ========== VERTEX SHADER ==========\n    attribute vec3 vertex_position;\n    attribute vec2 vertex_texCoord0;\n    attribute vec3 vertex_normal;\n\n    uniform mat4 matrix_model;\n    uniform mat4 matrix_view;\n    uniform mat4 matrix_projection;\n    uniform mat4 matrix_normal;\n\n    // Camera and lighting uniforms\n    uniform vec3 view_position;\n    uniform vec3 light_globalAmbient;\n\n    // Rim lighting parameters\n    uniform float rimPower;\n    uniform float rimIntensity;\n    uniform vec3 rimColor;\n\n    // Output to fragment shader\n    varying vec2 vUv0;\n    varying vec3 vWorldPosition;\n    varying vec3 vWorldNormal;\n    varying vec3 vViewDirection;\n    varying float vRimFactor;\n\n    void main(void) {\n        // Transform vertex position\n        vec4 worldPosition = matrix_model * vec4(vertex_position, 1.0);\n        vWorldPosition = worldPosition.xyz;\n        \n        // Transform normal to world space\n        vWorldNormal = normalize((matrix_normal * vec4(vertex_normal, 0.0)).xyz);\n        \n        // Calculate view direction\n        vViewDirection = normalize(view_position - vWorldPosition);\n        \n        // Calculate rim lighting factor in vertex shader for smooth interpolation\n        float rimDot = 1.0 - dot(vViewDirection, vWorldNormal);\n        vRimFactor = pow(smoothstep(0.0, 1.0, rimDot), rimPower);\n        \n        // Pass texture coordinates\n        vUv0 = vertex_texCoord0;\n        \n        // Final vertex position\n        gl_Position = matrix_projection * matrix_view * worldPosition;\n    }\n  `;\n\n  static readonly fragmentShader = `\n    // ========== FRAGMENT SHADER ==========\n    #ifdef GL_ES\n    precision highp float;\n    #endif\n\n    // Input from vertex shader\n    varying vec2 vUv0;\n    varying vec3 vWorldPosition;\n    varying vec3 vWorldNormal;\n    varying vec3 vViewDirection;\n    varying float vRimFactor;\n\n    // Texture uniforms\n    uniform sampler2D texture_diffuseMap;\n    uniform sampler2D texture_normalMap;\n\n    // Material properties\n    uniform vec3 material_diffuse;\n    uniform vec3 material_emissive;\n    uniform float material_opacity;\n\n    // Lighting uniforms\n    uniform vec3 light_globalAmbient;\n    uniform vec3 light_color;\n    uniform vec3 light_direction;\n    uniform float light_intensity;\n\n    // Rim lighting parameters\n    uniform float rimPower;\n    uniform float rimIntensity;\n    uniform vec3 rimColor;\n    uniform float rimBlend;\n\n    // HD-2D specific parameters\n    uniform float depthBlur;\n    uniform float pixelSize;\n    uniform vec2 screenResolution;\n\n    // Fighting game specific\n    uniform float hitFlash;\n    uniform vec3 hitFlashColor;\n    uniform float characterHighlight;\n\n    // Utility functions\n    vec3 getNormalFromMap(vec2 uv, vec3 worldPos, vec3 worldNormal) {\n        vec3 tangentNormal = texture2D(texture_normalMap, uv).xyz * 2.0 - 1.0;\n        \n        vec3 Q1 = dFdx(worldPos);\n        vec3 Q2 = dFdy(worldPos);\n        vec2 st1 = dFdx(uv);\n        vec2 st2 = dFdy(uv);\n        \n        vec3 N = normalize(worldNormal);\n        vec3 T = normalize(Q1 * st2.t - Q2 * st1.t);\n        vec3 B = -normalize(cross(N, T));\n        mat3 TBN = mat3(T, B, N);\n        \n        return normalize(TBN * tangentNormal);\n    }\n\n    vec3 pixelateColor(vec3 color, float pixelSize) {\n        if (pixelSize <= 0.0) return color;\n        \n        // Quantize color for pixel art effect\n        return floor(color * pixelSize) / pixelSize;\n    }\n\n    void main(void) {\n        // Sample base diffuse texture\n        vec4 baseColor = texture2D(texture_diffuseMap, vUv0);\n        vec3 diffuse = baseColor.rgb * material_diffuse;\n        \n        // Get normal (use normal map if available)\n        vec3 normal = vWorldNormal;\n        #ifdef NORMALMAP\n            normal = getNormalFromMap(vUv0, vWorldPosition, vWorldNormal);\n        #endif\n        \n        // Calculate basic lighting\n        float lightDot = max(dot(normal, -light_direction), 0.0);\n        vec3 lightColor = light_color * light_intensity * lightDot;\n        \n        // Calculate rim lighting\n        float rimFactor = vRimFactor;\n        \n        // Enhanced rim calculation for HD-2D effect\n        float fresnel = pow(1.0 - dot(vViewDirection, normal), rimPower);\n        fresnel = smoothstep(0.0, 1.0, fresnel);\n        \n        // Combine rim factors\n        rimFactor = max(rimFactor, fresnel) * rimIntensity;\n        \n        // Apply rim color\n        vec3 rimContribution = rimColor * rimFactor;\n        \n        // Combine lighting\n        vec3 ambient = light_globalAmbient * diffuse;\n        vec3 finalColor = ambient + diffuse * lightColor + rimContribution;\n        \n        // Apply emissive\n        finalColor += material_emissive;\n        \n        // Character highlight effect (for special moves, selection, etc.)\n        if (characterHighlight > 0.0) {\n            vec3 highlightColor = vec3(1.2, 1.1, 1.0);\n            finalColor = mix(finalColor, finalColor * highlightColor, characterHighlight);\n        }\n        \n        // Hit flash effect (for impact feedback)\n        if (hitFlash > 0.0) {\n            finalColor = mix(finalColor, hitFlashColor, hitFlash);\n        }\n        \n        // Depth-based blur simulation (simple desaturation)\n        if (depthBlur > 0.0) {\n            float luminance = dot(finalColor, vec3(0.299, 0.587, 0.114));\n            finalColor = mix(finalColor, vec3(luminance), depthBlur * 0.5);\n        }\n        \n        // Pixel art preservation\n        if (pixelSize > 0.0) {\n            finalColor = pixelateColor(finalColor, pixelSize);\n        }\n        \n        // Apply opacity with alpha testing for sprite edges\n        float alpha = baseColor.a * material_opacity;\n        if (alpha < 0.1) discard;\n        \n        gl_FragColor = vec4(finalColor, alpha);\n    }\n  `;\n\n  public static createMaterial(device: any): any {\n    const material = new device.StandardMaterial();\n    material.chunks.VS_TRANSFORM = this.vertexShader;\n    material.chunks.PS_OUTPUT = this.fragmentShader;\n    return material;\n  }\n\n  public static setUniforms(material: any, params: {\n    viewPosition: [number, number, number];\n    globalAmbient: [number, number, number];\n    rimPower: number;\n    rimIntensity: number;\n    rimColor: [number, number, number];\n    lightColor: [number, number, number];\n    lightDirection: [number, number, number];\n    lightIntensity: number;\n    materialDiffuse: [number, number, number];\n    materialEmissive: [number, number, number];\n    materialOpacity: number;\n    depthBlur: number;\n    pixelSize: number;\n    screenResolution: [number, number];\n    hitFlash: number;\n    hitFlashColor: [number, number, number];\n    characterHighlight: number;\n  }): void {\n    material.setParameter('view_position', params.viewPosition);\n    material.setParameter('light_globalAmbient', params.globalAmbient);\n    material.setParameter('rimPower', params.rimPower);\n    material.setParameter('rimIntensity', params.rimIntensity);\n    material.setParameter('rimColor', params.rimColor);\n    material.setParameter('light_color', params.lightColor);\n    material.setParameter('light_direction', params.lightDirection);\n    material.setParameter('light_intensity', params.lightIntensity);\n    material.setParameter('material_diffuse', params.materialDiffuse);\n    material.setParameter('material_emissive', params.materialEmissive);\n    material.setParameter('material_opacity', params.materialOpacity);\n    material.setParameter('depthBlur', params.depthBlur);\n    material.setParameter('pixelSize', params.pixelSize);\n    material.setParameter('screenResolution', params.screenResolution);\n    material.setParameter('hitFlash', params.hitFlash);\n    material.setParameter('hitFlashColor', params.hitFlashColor);\n    material.setParameter('characterHighlight', params.characterHighlight);\n  }\n}\n", "\n/**\n * Sprite Normal Mapping Shader for HD-2D 2D Sprites\n * Adds depth and lighting to flat 2D character sprites using normal maps\n * Converted from GLSL to TypeScript\n */\n\nexport class SpriteNormalMappingShader {\n  static readonly vertexShader = `\n    // ========== VERTEX SHADER ==========\n    attribute vec3 vertex_position;\n    attribute vec2 vertex_texCoord0;\n    attribute vec3 vertex_normal;\n    attribute vec3 vertex_tangent;\n\n    uniform mat4 matrix_model;\n    uniform mat4 matrix_view;\n    uniform mat4 matrix_projection;\n    uniform mat4 matrix_normal;\n\n    // Camera position\n    uniform vec3 view_position;\n\n    // Light positions (multiple lights for HD-2D)\n    uniform vec3 light_position_0;\n    uniform vec3 light_position_1;\n    uniform vec3 light_position_2;\n\n    // Output to fragment shader\n    varying vec2 vUv0;\n    varying vec3 vWorldPosition;\n    varying vec3 vWorldNormal;\n    varying vec3 vWorldTangent;\n    varying vec3 vWorldBitangent;\n    varying vec3 vViewDirection;\n\n    // Light directions in tangent space\n    varying vec3 vLightDirection0_TS;\n    varying vec3 vLightDirection1_TS;\n    varying vec3 vLightDirection2_TS;\n    varying vec3 vViewDirection_TS;\n\n    void main(void) {\n        // Transform vertex to world space\n        vec4 worldPosition = matrix_model * vec4(vertex_position, 1.0);\n        vWorldPosition = worldPosition.xyz;\n        \n        // Transform normal and tangent to world space\n        vWorldNormal = normalize((matrix_normal * vec4(vertex_normal, 0.0)).xyz);\n        vWorldTangent = normalize((matrix_normal * vec4(vertex_tangent, 0.0)).xyz);\n        vWorldBitangent = cross(vWorldNormal, vWorldTangent);\n        \n        // Create tangent-to-world matrix\n        mat3 TBN = mat3(vWorldTangent, vWorldBitangent, vWorldNormal);\n        mat3 worldToTangent = transpose(TBN);\n        \n        // Calculate view direction\n        vViewDirection = normalize(view_position - vWorldPosition);\n        vViewDirection_TS = worldToTangent * vViewDirection;\n        \n        // Calculate light directions in tangent space\n        vec3 lightDir0 = normalize(light_position_0 - vWorldPosition);\n        vec3 lightDir1 = normalize(light_position_1 - vWorldPosition);\n        vec3 lightDir2 = normalize(light_position_2 - vWorldPosition);\n        \n        vLightDirection0_TS = worldToTangent * lightDir0;\n        vLightDirection1_TS = worldToTangent * lightDir1;\n        vLightDirection2_TS = worldToTangent * lightDir2;\n        \n        // Pass texture coordinates\n        vUv0 = vertex_texCoord0;\n        \n        // Final vertex position\n        gl_Position = matrix_projection * matrix_view * worldPosition;\n    }\n  `;\n\n  static readonly fragmentShader = `\n    // ========== FRAGMENT SHADER ==========\n    #ifdef GL_ES\n    precision highp float;\n    #endif\n\n    // Input from vertex shader\n    varying vec2 vUv0;\n    varying vec3 vWorldPosition;\n    varying vec3 vWorldNormal;\n    varying vec3 vWorldTangent;\n    varying vec3 vWorldBitangent;\n    varying vec3 vViewDirection;\n\n    varying vec3 vLightDirection0_TS;\n    varying vec3 vLightDirection1_TS;\n    varying vec3 vLightDirection2_TS;\n    varying vec3 vViewDirection_TS;\n\n    // Texture uniforms\n    uniform sampler2D texture_diffuseMap;\n    uniform sampler2D texture_normalMap;\n    uniform sampler2D texture_specularMap;\n\n    // Material properties\n    uniform vec3 material_diffuse;\n    uniform vec3 material_specular;\n    uniform float material_shininess;\n    uniform float material_opacity;\n\n    // Light properties\n    uniform vec3 light_color_0;\n    uniform vec3 light_color_1;\n    uniform vec3 light_color_2;\n    uniform float light_intensity_0;\n    uniform float light_intensity_1;\n    uniform float light_intensity_2;\n\n    // HD-2D specific parameters\n    uniform float normalMapStrength;\n    uniform float spriteDepth;\n    uniform vec2 spritePixelSize;\n    uniform float pixelPerfect;\n\n    // Fighting game effects\n    uniform float hitFlash;\n    uniform vec3 hitFlashColor;\n    uniform float stunEffect;\n    uniform float counterHitGlow;\n    uniform vec3 playerTint; // P1/P2 color tinting\n\n    // Animation parameters\n    uniform float animationFrame;\n    uniform vec2 spriteSheetSize;\n    uniform vec2 frameSize;\n\n    vec2 getSpriteUV(vec2 baseUV) {\n        if (animationFrame <= 0.0) return baseUV;\n        \n        // Calculate sprite sheet coordinates\n        float frameX = mod(animationFrame, spriteSheetSize.x);\n        float frameY = floor(animationFrame / spriteSheetSize.x);\n        \n        vec2 frameOffset = vec2(frameX, frameY) * frameSize;\n        return frameOffset + baseUV * frameSize;\n    }\n\n    vec3 sampleNormalMap(vec2 uv) {\n        vec3 normal = texture2D(texture_normalMap, uv).rgb;\n        normal = normal * 2.0 - 1.0; // Convert from [0,1] to [-1,1]\n        \n        // Adjust normal map strength for HD-2D effect\n        normal.xy *= normalMapStrength;\n        normal = normalize(normal);\n        \n        return normal;\n    }\n\n    vec3 calculateLighting(vec3 normal, vec3 lightDir, vec3 lightColor, float lightIntensity, vec3 viewDir) {\n        // Diffuse lighting\n        float NdotL = max(dot(normal, lightDir), 0.0);\n        vec3 diffuse = lightColor * lightIntensity * NdotL;\n        \n        // Specular lighting (Blinn-Phong)\n        vec3 halfVector = normalize(lightDir + viewDir);\n        float NdotH = max(dot(normal, halfVector), 0.0);\n        float specularPower = pow(NdotH, material_shininess);\n        vec3 specular = material_specular * lightColor * specularPower * lightIntensity;\n        \n        return diffuse + specular;\n    }\n\n    vec3 applyPixelPerfectFiltering(vec3 color, vec2 uv) {\n        if (pixelPerfect <= 0.0) return color;\n        \n        // Snap UV coordinates to pixel boundaries\n        vec2 pixelUV = floor(uv * spritePixelSize) / spritePixelSize;\n        \n        // Sample with nearest neighbor filtering\n        return texture2D(texture_diffuseMap, pixelUV).rgb * material_diffuse;\n    }\n\n    void main(void) {\n        // Get sprite sheet UV coordinates\n        vec2 spriteUV = getSpriteUV(vUv0);\n        \n        // Sample base diffuse texture\n        vec4 baseColor = texture2D(texture_diffuseMap, spriteUV);\n        vec3 diffuse = baseColor.rgb * material_diffuse;\n        \n        // Early discard for transparent pixels (important for sprites)\n        if (baseColor.a < 0.1) discard;\n        \n        // Sample normal map and convert to tangent space\n        vec3 normalTS = sampleNormalMap(spriteUV);\n        \n        // Sample specular map if available\n        vec3 specularMask = texture2D(texture_specularMap, spriteUV).rgb;\n        \n        // Calculate lighting for each light source\n        vec3 totalLighting = vec3(0.0);\n        \n        // Light 0 (Key light)\n        totalLighting += calculateLighting(\n            normalTS, \n            normalize(vLightDirection0_TS), \n            light_color_0, \n            light_intensity_0,\n            normalize(vViewDirection_TS)\n        );\n        \n        // Light 1 (Fill light)\n        totalLighting += calculateLighting(\n            normalTS, \n            normalize(vLightDirection1_TS), \n            light_color_1, \n            light_intensity_1,\n            normalize(vViewDirection_TS)\n        );\n        \n        // Light 2 (Rim light)\n        totalLighting += calculateLighting(\n            normalTS, \n            normalize(vLightDirection2_TS), \n            light_color_2, \n            light_intensity_2,\n            normalize(vViewDirection_TS)\n        );\n        \n        // Apply specular mask\n        totalLighting *= (1.0 + specularMask * 0.5);\n        \n        // Combine diffuse and lighting\n        vec3 finalColor = diffuse * totalLighting;\n        \n        // Apply player tinting (P1 warm, P2 cool)\n        finalColor = mix(finalColor, finalColor * playerTint, 0.1);\n        \n        // Apply depth-based darkening for sprite layering\n        if (spriteDepth > 0.0) {\n            float depthFactor = 1.0 - spriteDepth * 0.2;\n            finalColor *= depthFactor;\n        }\n        \n        // Fighting game specific effects\n        \n        // Hit flash effect\n        if (hitFlash > 0.0) {\n            finalColor = mix(finalColor, hitFlashColor, hitFlash);\n        }\n        \n        // Stun effect (desaturation + blur simulation)\n        if (stunEffect > 0.0) {\n            float luminance = dot(finalColor, vec3(0.299, 0.587, 0.114));\n            finalColor = mix(finalColor, vec3(luminance), stunEffect * 0.7);\n            \n            // Add slight blue tint for stun\n            finalColor += vec3(0.0, 0.1, 0.2) * stunEffect * 0.3;\n        }\n        \n        // Counter hit glow effect\n        if (counterHitGlow > 0.0) {\n            vec3 glowColor = vec3(1.0, 0.4, 0.4); // Red glow\n            finalColor += glowColor * counterHitGlow * 0.5;\n        }\n        \n        // Pixel perfect rendering option\n        if (pixelPerfect > 0.0) {\n            diffuse = applyPixelPerfectFiltering(diffuse, spriteUV);\n            finalColor = mix(finalColor, diffuse * totalLighting, pixelPerfect);\n        }\n        \n        // Apply opacity\n        float alpha = baseColor.a * material_opacity;\n        \n        gl_FragColor = vec4(finalColor, alpha);\n    }\n  `;\n\n  public static createMaterial(device: any): any {\n    const material = new device.StandardMaterial();\n    material.chunks.VS_TRANSFORM = this.vertexShader;\n    material.chunks.PS_OUTPUT = this.fragmentShader;\n    return material;\n  }\n\n  public static setUniforms(material: any, params: {\n    viewPosition: [number, number, number];\n    lightPosition0: [number, number, number];\n    lightPosition1: [number, number, number];\n    lightPosition2: [number, number, number];\n    lightColor0: [number, number, number];\n    lightColor1: [number, number, number];\n    lightColor2: [number, number, number];\n    lightIntensity0: number;\n    lightIntensity1: number;\n    lightIntensity2: number;\n    materialDiffuse: [number, number, number];\n    materialSpecular: [number, number, number];\n    materialShininess: number;\n    materialOpacity: number;\n    normalMapStrength: number;\n    spriteDepth: number;\n    spritePixelSize: [number, number];\n    pixelPerfect: number;\n    hitFlash: number;\n    hitFlashColor: [number, number, number];\n    stunEffect: number;\n    counterHitGlow: number;\n    playerTint: [number, number, number];\n    animationFrame: number;\n    spriteSheetSize: [number, number];\n    frameSize: [number, number];\n  }): void {\n    material.setParameter('view_position', params.viewPosition);\n    material.setParameter('light_position_0', params.lightPosition0);\n    material.setParameter('light_position_1', params.lightPosition1);\n    material.setParameter('light_position_2', params.lightPosition2);\n    material.setParameter('light_color_0', params.lightColor0);\n    material.setParameter('light_color_1', params.lightColor1);\n    material.setParameter('light_color_2', params.lightColor2);\n    material.setParameter('light_intensity_0', params.lightIntensity0);\n    material.setParameter('light_intensity_1', params.lightIntensity1);\n    material.setParameter('light_intensity_2', params.lightIntensity2);\n    material.setParameter('material_diffuse', params.materialDiffuse);\n    material.setParameter('material_specular', params.materialSpecular);\n    material.setParameter('material_shininess', params.materialShininess);\n    material.setParameter('material_opacity', params.materialOpacity);\n    material.setParameter('normalMapStrength', params.normalMapStrength);\n    material.setParameter('spriteDepth', params.spriteDepth);\n    material.setParameter('spritePixelSize', params.spritePixelSize);\n    material.setParameter('pixelPerfect', params.pixelPerfect);\n    material.setParameter('hitFlash', params.hitFlash);\n    material.setParameter('hitFlashColor', params.hitFlashColor);\n    material.setParameter('stunEffect', params.stunEffect);\n    material.setParameter('counterHitGlow', params.counterHitGlow);\n    material.setParameter('playerTint', params.playerTint);\n    material.setParameter('animationFrame', params.animationFrame);\n    material.setParameter('spriteSheetSize', params.spriteSheetSize);\n    material.setParameter('frameSize', params.frameSize);\n  }\n}\n", "\n/**\n * Depth-Based Post-Processing Shader for HD-2D Effects\n * Implements depth-of-field, volumetric fog, and atmospheric effects\n * Converted from GLSL to TypeScript\n */\n\nexport class DepthPostProcessShader {\n  static readonly vertexShader = `\n    // ========== VERTEX SHADER ==========\n    attribute vec3 vertex_position;\n    attribute vec2 vertex_texCoord0;\n\n    uniform mat4 matrix_model;\n    uniform mat4 matrix_view;\n    uniform mat4 matrix_projection;\n\n    varying vec2 vUv0;\n\n    void main(void) {\n        vUv0 = vertex_texCoord0;\n        gl_Position = matrix_projection * matrix_view * matrix_model * vec4(vertex_position, 1.0);\n    }\n  `;\n\n  static readonly fragmentShader = `\n    // ========== FRAGMENT SHADER ==========\n    #ifdef GL_ES\n    precision highp float;\n    #endif\n\n    varying vec2 vUv0;\n\n    // Input textures\n    uniform sampler2D texture_colorBuffer;\n    uniform sampler2D texture_depthBuffer;\n\n    // Screen resolution\n    uniform vec2 uScreenSize;\n    uniform vec2 uInvScreenSize;\n\n    // Camera parameters\n    uniform float uNearClip;\n    uniform float uFarClip;\n    uniform vec3 uCameraPosition;\n    uniform mat4 uViewMatrix;\n    uniform mat4 uProjectionMatrix;\n\n    // Depth-of-field parameters\n    uniform float uFocusDistance;\n    uniform float uFocusRange;\n    uniform float uBokehRadius;\n    uniform float uBokehIntensity;\n    uniform int uDofSamples;\n\n    // Volumetric fog parameters\n    uniform vec3 uFogColor;\n    uniform float uFogDensity;\n    uniform float uFogStart;\n    uniform float uFogEnd;\n    uniform vec3 uLightPosition;\n    uniform vec3 uLightColor;\n    uniform float uLightScattering;\n\n    // HD-2D atmospheric effects\n    uniform float uAtmosphericPerspective;\n    uniform vec3 uAtmosphereColor;\n    uniform float uHeatHaze;\n    uniform float uColorSeparation;\n\n    // Fighting game specific\n    uniform float uScreenShake;\n    uniform vec2 uScreenShakeOffset;\n    uniform float uTimeScale;\n    uniform float uTime;\n\n    // Utility functions\n    float linearizeDepth(float depth) {\n        float z = depth * 2.0 - 1.0; // Convert from [0,1] to [-1,1]\n        return (2.0 * uNearClip * uFarClip) / (uFarClip + uNearClip - z * (uFarClip - uNearClip));\n    }\n\n    float getDepth(vec2 uv) {\n        return linearizeDepth(texture2D(texture_depthBuffer, uv).r);\n    }\n\n    vec3 getWorldPositionFromDepth(vec2 uv, float depth) {\n        vec4 clipSpacePosition = vec4(uv * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);\n        vec4 viewSpacePosition = inverse(uProjectionMatrix) * clipSpacePosition;\n        viewSpacePosition /= viewSpacePosition.w;\n        vec4 worldSpacePosition = inverse(uViewMatrix) * viewSpacePosition;\n        return worldSpacePosition.xyz;\n    }\n\n    // Gaussian blur for depth-of-field\n    vec3 gaussianBlur(sampler2D tex, vec2 uv, vec2 direction, float radius, int samples) {\n        vec3 color = vec3(0.0);\n        float totalWeight = 0.0;\n        \n        float step = radius / float(samples);\n        \n        for (int i = -samples; i <= samples; i++) {\n            vec2 offset = direction * step * float(i);\n            vec2 sampleUV = uv + offset * uInvScreenSize;\n            \n            // Check bounds\n            if (sampleUV.x >= 0.0 && sampleUV.x <= 1.0 && sampleUV.y >= 0.0 && sampleUV.y <= 1.0) {\n                float weight = exp(-0.5 * pow(float(i) / float(samples), 2.0));\n                color += texture2D(tex, sampleUV).rgb * weight;\n                totalWeight += weight;\n            }\n        }\n        \n        return color / totalWeight;\n    }\n\n    // Bokeh blur for depth-of-field\n    vec3 bokehBlur(sampler2D tex, vec2 uv, float radius) {\n        vec3 color = vec3(0.0);\n        float totalWeight = 0.0;\n        \n        // Hexagonal bokeh pattern\n        const int samples = 19;\n        const vec2 offsets[19] = vec2[](\n            vec2(0.0, 0.0),\n            vec2(0.0, 1.0), vec2(0.866, 0.5), vec2(0.866, -0.5), \n            vec2(0.0, -1.0), vec2(-0.866, -0.5), vec2(-0.866, 0.5),\n            vec2(0.0, 2.0), vec2(1.732, 1.0), vec2(1.732, -1.0),\n            vec2(0.0, -2.0), vec2(-1.732, -1.0), vec2(-1.732, 1.0),\n            vec2(1.5, 0.866), vec2(1.5, -0.866), vec2(-1.5, -0.866), vec2(-1.5, 0.866),\n            vec2(0.866, 1.5), vec2(-0.866, 1.5)\n        );\n        \n        for (int i = 0; i < samples; i++) {\n            vec2 offset = offsets[i] * radius * uInvScreenSize;\n            vec2 sampleUV = uv + offset;\n            \n            if (sampleUV.x >= 0.0 && sampleUV.x <= 1.0 && sampleUV.y >= 0.0 && sampleUV.y <= 1.0) {\n                float weight = 1.0;\n                if (i > 0) weight = 0.7; // Reduce weight for outer samples\n                \n                color += texture2D(tex, sampleUV).rgb * weight;\n                totalWeight += weight;\n            }\n        }\n        \n        return color / totalWeight;\n    }\n\n    // Calculate depth-of-field blur amount\n    float calculateDofBlur(float depth) {\n        float distance = abs(depth - uFocusDistance);\n        float blur = smoothstep(0.0, uFocusRange, distance);\n        return blur * uBokehRadius;\n    }\n\n    // Volumetric fog calculation\n    vec3 calculateVolumetricFog(vec2 uv, float depth, vec3 worldPos) {\n        // Calculate fog factor based on distance\n        float fogFactor = smoothstep(uFogStart, uFogEnd, depth);\n        fogFactor *= uFogDensity;\n        \n        // Calculate light scattering\n        vec3 lightDir = normalize(uLightPosition - worldPos);\n        vec3 viewDir = normalize(uCameraPosition - worldPos);\n        float scattering = pow(max(dot(lightDir, viewDir), 0.0), 8.0);\n        \n        // Combine fog color with light scattering\n        vec3 fogColorWithLight = mix(uFogColor, uLightColor, scattering * uLightScattering);\n        \n        return fogColorWithLight * fogFactor;\n    }\n\n    // Atmospheric perspective\n    vec3 applyAtmosphericPerspective(vec3 color, float depth) {\n        float atmosphereFactor = smoothstep(10.0, 50.0, depth) * uAtmosphericPerspective;\n        return mix(color, uAtmosphereColor, atmosphereFactor);\n    }\n\n    // Heat haze effect\n    vec2 applyHeatHaze(vec2 uv, float time) {\n        if (uHeatHaze <= 0.0) return uv;\n        \n        float wave1 = sin(uv.y * 30.0 + time * 5.0) * 0.003;\n        float wave2 = sin(uv.y * 45.0 + time * 3.0) * 0.002;\n        \n        return uv + vec2(wave1 + wave2, 0.0) * uHeatHaze;\n    }\n\n    // Chromatic aberration for impact effects\n    vec3 applyChromaticAberration(sampler2D tex, vec2 uv, float amount) {\n        if (amount <= 0.0) return texture2D(tex, uv).rgb;\n        \n        vec2 offset = (uv - 0.5) * amount * 0.01;\n        \n        float r = texture2D(tex, uv + offset).r;\n        float g = texture2D(tex, uv).g;\n        float b = texture2D(tex, uv - offset).b;\n        \n        return vec3(r, g, b);\n    }\n\n    // Screen shake effect\n    vec2 applyScreenShake(vec2 uv) {\n        if (uScreenShake <= 0.0) return uv;\n        \n        vec2 shake = uScreenShakeOffset * uScreenShake * 0.01;\n        return uv + shake;\n    }\n\n    void main(void) {\n        // Apply screen shake\n        vec2 finalUV = applyScreenShake(vUv0);\n        \n        // Apply heat haze\n        finalUV = applyHeatHaze(finalUV, uTime);\n        \n        // Get depth at current pixel\n        float depth = getDepth(finalUV);\n        vec3 worldPos = getWorldPositionFromDepth(finalUV, depth);\n        \n        // Sample base color\n        vec3 color = texture2D(texture_colorBuffer, finalUV).rgb;\n        \n        // Apply chromatic aberration for impact effects\n        if (uColorSeparation > 0.0) {\n            color = applyChromaticAberration(texture_colorBuffer, finalUV, uColorSeparation);\n        }\n        \n        // Calculate depth-of-field\n        float dofBlur = calculateDofBlur(depth);\n        \n        if (dofBlur > 0.1) {\n            // Apply bokeh blur for out-of-focus areas\n            vec3 blurredColor = bokehBlur(texture_colorBuffer, finalUV, dofBlur);\n            color = mix(color, blurredColor, min(dofBlur * uBokehIntensity, 1.0));\n        }\n        \n        // Apply volumetric fog\n        if (uFogDensity > 0.0) {\n            vec3 fogColor = calculateVolumetricFog(finalUV, depth, worldPos);\n            color = mix(color, fogColor, min(uFogDensity, 0.9));\n        }\n        \n        // Apply atmospheric perspective\n        if (uAtmosphericPerspective > 0.0) {\n            color = applyAtmosphericPerspective(color, depth);\n        }\n        \n        // Time-based effects for fighting games\n        if (uTimeScale != 1.0) {\n            // Slow motion effect - enhance clarity\n            color = mix(color, color * 1.1, (1.0 - uTimeScale) * 0.3);\n        }\n        \n        gl_FragColor = vec4(color, 1.0);\n    }\n  `;\n\n  public static createMaterial(device: any): any {\n    const material = new device.StandardMaterial();\n    material.chunks.VS_TRANSFORM = this.vertexShader;\n    material.chunks.PS_OUTPUT = this.fragmentShader;\n    return material;\n  }\n\n  public static setUniforms(material: any, params: {\n    screenSize: [number, number];\n    nearClip: number;\n    farClip: number;\n    focusDistance: number;\n    focusRange: number;\n    bokehRadius: number;\n    bokehIntensity: number;\n    fogColor: [number, number, number];\n    fogDensity: number;\n    fogStart: number;\n    fogEnd: number;\n    atmosphericPerspective: number;\n    atmosphereColor: [number, number, number];\n    heatHaze: number;\n    colorSeparation: number;\n    screenShake: number;\n    screenShakeOffset: [number, number];\n    timeScale: number;\n    time: number;\n  }): void {\n    material.setParameter('uScreenSize', params.screenSize);\n    material.setParameter('uInvScreenSize', [1.0 / params.screenSize[0], 1.0 / params.screenSize[1]]);\n    material.setParameter('uNearClip', params.nearClip);\n    material.setParameter('uFarClip', params.farClip);\n    material.setParameter('uFocusDistance', params.focusDistance);\n    material.setParameter('uFocusRange', params.focusRange);\n    material.setParameter('uBokehRadius', params.bokehRadius);\n    material.setParameter('uBokehIntensity', params.bokehIntensity);\n    material.setParameter('uFogColor', params.fogColor);\n    material.setParameter('uFogDensity', params.fogDensity);\n    material.setParameter('uFogStart', params.fogStart);\n    material.setParameter('uFogEnd', params.fogEnd);\n    material.setParameter('uAtmosphericPerspective', params.atmosphericPerspective);\n    material.setParameter('uAtmosphereColor', params.atmosphereColor);\n    material.setParameter('uHeatHaze', params.heatHaze);\n    material.setParameter('uColorSeparation', params.colorSeparation);\n    material.setParameter('uScreenShake', params.screenShake);\n    material.setParameter('uScreenShakeOffset', params.screenShakeOffset);\n    material.setParameter('uTimeScale', params.timeScale);\n    material.setParameter('uTime', params.time);\n  }\n}\n", "export class StageStormySkyShader {\n\tstatic readonly vertexShader = `\n\t\tattribute vec3 vertex_position;\n\t\tattribute vec2 vertex_texCoord0;\n\t\tuniform mat4 matrix_model;\n\t\tuniform mat4 matrix_view;\n\t\tuniform mat4 matrix_projection;\n\t\tvarying vec2 vUv0;\n\t\tvoid main(){\n\t\t\tvUv0 = vertex_texCoord0;\n\t\t\tgl_Position = matrix_projection * matrix_view * matrix_model * vec4(vertex_position,1.0);\n\t\t}\n\t`;\n\n\tstatic readonly fragmentShader = `\n\t\t#ifdef GL_ES\n\t\tprecision mediump float;\n\t\t#endif\n\t\tvarying vec2 vUv0;\n\t\tuniform sampler2D texture_diffuseMap;\n\t\tuniform vec2 uScrollSpeed;\n\t\tuniform float uTime;\n\t\tuniform vec4 uTint;\n\t\tvoid main(){\n\t\t\tvec2 uv = vUv0 + uScrollSpeed * uTime * 0.001;\n\t\t\tvec4 col = texture2D(texture_diffuseMap, uv);\n\t\t\tgl_FragColor = vec4(col.rgb * uTint.rgb, col.a * uTint.a);\n\t\t}\n\t`;\n}", "export type EventHandler<T = any> = (payload: T) => void;\n\nexport class EventBus {\n\tprivate handlers: Map<string, Set<EventHandler>> = new Map();\n\n\ton<T = any>(event: string, handler: EventHandler<T>): void {\n\t\tif (!this.handlers.has(event)) this.handlers.set(event, new Set());\n\t\tthis.handlers.get(event)!.add(handler as EventHandler);\n\t}\n\n\toff<T = any>(event: string, handler: EventHandler<T>): void {\n\t\tthis.handlers.get(event)?.delete(handler as EventHandler);\n\t}\n\n\temit<T = any>(event: string, payload: T): void {\n\t\tthis.handlers.get(event)?.forEach(h => h(payload));\n\t}\n\n\tclear(): void {\n\t\tthis.handlers.clear();\n\t}\n}", "export class ServiceContainer {\n\tprivate services = new Map<string, unknown>();\n\n\tregister<T>(key: string, instance: T): void {\n\t\tthis.services.set(key, instance as unknown);\n\t}\n\n\tresolve<T>(key: string): T {\n\t\tif (!this.services.has(key)) {\n\t\t\tthrow new Error(`Service not registered: ${key}`);\n\t\t}\n\t\treturn this.services.get(key) as T;\n\t}\n\n\thas(key: string): boolean {\n\t\treturn this.services.has(key);\n\t}\n\n\tclear(): void {\n\t\tthis.services.clear();\n\t}\n}", "export class FeatureFlags {\n\tprivate flags = new Map<string, boolean>();\n\n\tenable(key: string): void { this.flags.set(key, true); }\n\tdisable(key: string): void { this.flags.set(key, false); }\n\tset(key: string, value: boolean): void { this.flags.set(key, value); }\n\tisEnabled(key: string, defaultValue = false): boolean {\n\t\treturn this.flags.has(key) ? !!this.flags.get(key) : defaultValue;\n\t}\n}", "export interface UpdatableSystem {\n\tpriority: number;\n\tupdate(deltaTime: number): void;\n\tname?: string;\n}\n\nexport class UpdatePipeline {\n\tprivate systems: UpdatableSystem[] = [];\n\tprivate samples: { name: string; ms: number }[] = [];\n\n\tadd(system: UpdatableSystem): void {\n\t\tthis.systems.push(system);\n\t\tthis.systems.sort((a, b) => a.priority - b.priority);\n\t}\n\n\tremove(system: UpdatableSystem): void {\n\t\tthis.systems = this.systems.filter(s => s !== system);\n\t}\n\n\tupdate(deltaTime: number): void {\n\t\tthis.samples.length = 0;\n\t\tfor (const sys of this.systems) {\n\t\t\tconst start = performance.now();\n\t\t\tsys.update(deltaTime);\n\t\t\tconst end = performance.now();\n\t\t\tthis.samples.push({ name: sys.name || 'system', ms: end - start });\n\t\t}\n\t}\n\n\tgetTimings(): { name: string; ms: number }[] {\n\t\treturn this.samples.slice();\n\t}\n\n\tclear(): void {\n\t\tthis.systems.length = 0;\n\t}\n}", "export interface GameState {\n\tname: string;\n\tenter(prev?: GameState): Promise<void> | void;\n\texit(next?: GameState): Promise<void> | void;\n\tupdate(dt: number): void;\n}\n\nexport class GameStateStack {\n\tprivate stack: GameState[] = [];\n\n\tget current(): GameState | undefined { return this.stack[this.stack.length - 1]; }\n\n\tasync push(state: GameState): Promise<void> {\n\t\tconst prev = this.current;\n\t\tthis.stack.push(state);\n\t\tawait state.enter(prev);\n\t}\n\n\tasync pop(): Promise<void> {\n\t\tconst state = this.stack.pop();\n\t\tif (state) await state.exit(this.current);\n\t}\n\n\tasync replace(state: GameState): Promise<void> {\n\t\tconst prev = this.stack.pop();\n\t\tif (prev) await prev.exit(state);\n\t\tthis.stack.push(state);\n\t\tawait state.enter(prev);\n\t}\n\n\tupdate(dt: number): void {\n\t\tthis.current?.update(dt);\n\t}\n}", "import * as pc from 'playcanvas';\nimport { GameState } from './GameStateStack';\nimport { ConfigService } from '../utils/ConfigService';\n\nexport class BootState implements GameState {\n\tpublic name = 'boot';\n\tprivate app: pc.Application;\n\tprivate services: any;\n\tprivate events: any;\n\n\tconstructor(app: pc.Application, services: any, events: any) {\n\t\tthis.app = app;\n\t\tthis.services = services;\n\t\tthis.events = events;\n\t}\n\n\tasync enter(): Promise<void> {\n\t\ttry {\n\t\t\t// Load initial configs; extend as needed\n\t\t\tconst config = this.services.resolve<ConfigService>('config');\n\t\t\tawait Promise.all([\n\t\t\t\tconfig.loadJson('/data/balance/live_balance.json').catch(() => ({})),\n\t\t\t]);\n\t\t\tthis.events.emit('state:goto', { state: 'menu' });\n\t\t} catch (e) {\n\t\t\tconsole.error('BootState failed:', e);\n\t\t\tthis.events.emit('state:goto', { state: 'menu' });\n\t\t}\n\t}\n\n\texit(): void {}\n\n\tupdate(dt: number): void {}\n}\n\n", "import * as pc from 'playcanvas';\nimport { GameState } from './GameStateStack';\nimport { UIManager } from '../ui/UIManager';\n\nexport class MenuState implements GameState {\n\tpublic name = 'menu';\n\tprivate app: pc.Application;\n\tprivate events: any;\n\tprivate menuEntity: pc.Entity | null = null;\n\n\tconstructor(app: pc.Application, events: any) {\n\t\tthis.app = app;\n\t\tthis.events = events;\n\t}\n\n\tenter(): void {\n\t\t// Show UI-managed menu\n\t\tconst ui = (this.app as any)._ui as UIManager | undefined;\n\t\tui?.showMenu();\n\t\twindow.addEventListener('keydown', this.onKey);\n\t}\n\n\texit(): void {\n\t\twindow.removeEventListener('keydown', this.onKey);\n\t\tconst ui = (this.app as any)._ui as UIManager | undefined;\n\t\tui?.hideMenu();\n\t}\n\n\tupdate(dt: number): void {}\n\n\tprivate onKey = (e: KeyboardEvent) => {\n\t\tif (e.key === 'Enter') {\n\t\t\tthis.events.emit('state:goto', { state: 'match' });\n\t\t}\n\t}\n}\n\n", "import * as pc from 'playcanvas';\nimport { GameState } from './GameStateStack';\nimport { UIManager } from '../ui/UIManager';\n\nexport class MatchState implements GameState {\n\tpublic name = 'match';\n\tprivate app: pc.Application;\n\tprivate events: any;\n\n\tconstructor(app: pc.Application, events: any) {\n\t\tthis.app = app;\n\t\tthis.events = events;\n\t}\n\n\tenter(): void {\n\t\tconst ui = (this.app as any)._ui as UIManager | undefined;\n\t\tui?.showHUD();\n\t}\n\n\texit(): void {}\n\n\tupdate(dt: number): void {}\n}\n\n", "import * as pc from 'playcanvas';\n\nexport interface ProceduralSpriteOptions {\n\twidth: number;\n\theight: number;\n\ttype: 'solid' | 'gradient' | 'checker';\n\tcolorA?: [number, number, number, number];\n\tcolorB?: [number, number, number, number];\n\ttile?: number;\n}\n\nexport class ProceduralSpriteGenerator {\n\tprivate app: pc.Application;\n\n\tconstructor(app: pc.Application) {\n\t\tthis.app = app;\n\t}\n\n\tcreateTexture(opts: ProceduralSpriteOptions): pc.Texture {\n\t\tconst w = Math.max(1, Math.floor(opts.width));\n\t\tconst h = Math.max(1, Math.floor(opts.height));\n\t\tconst device = this.app.graphicsDevice;\n\t\tconst tex = new pc.Texture(device, { width: w, height: h, format: pc.PIXELFORMAT_R8_G8_B8_A8 });\n\t\tconst pixels = new Uint8Array(w * h * 4);\n\t\tconst a = opts.colorA || [255, 255, 255, 255];\n\t\tconst b = opts.colorB || [0, 0, 0, 255];\n\t\tconst tile = Math.max(1, opts.tile || 8);\n\n\t\tfor (let y = 0; y < h; y++) {\n\t\t\tfor (let x = 0; x < w; x++) {\n\t\t\t\tconst i = (y * w + x) * 4;\n\t\t\t\tswitch (opts.type) {\n\t\t\t\t\tcase 'solid': {\n\t\t\t\t\t\tpixels[i] = a[0]; pixels[i+1] = a[1]; pixels[i+2] = a[2]; pixels[i+3] = a[3];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'gradient': {\n\t\t\t\t\t\tconst t = y / (h - 1);\n\t\t\t\t\t\tpixels[i]   = Math.round(a[0] * (1 - t) + b[0] * t);\n\t\t\t\t\t\tpixels[i+1] = Math.round(a[1] * (1 - t) + b[1] * t);\n\t\t\t\t\t\tpixels[i+2] = Math.round(a[2] * (1 - t) + b[2] * t);\n\t\t\t\t\t\tpixels[i+3] = Math.round(a[3] * (1 - t) + b[3] * t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'checker': {\n\t\t\t\t\t\tconst cx = Math.floor(x / tile);\n\t\t\t\t\t\tconst cy = Math.floor(y / tile);\n\t\t\t\t\t\tconst useA = (cx + cy) % 2 === 0;\n\t\t\t\t\t\tconst c = useA ? a : b;\n\t\t\t\t\t\tpixels[i] = c[0]; pixels[i+1] = c[1]; pixels[i+2] = c[2]; pixels[i+3] = c[3];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttex.lock();\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-ignore\n\t\tnew Uint8Array(tex.lockedMipmaps[0][0].data.buffer).set(pixels);\n\t\ttex.unlock();\n\t\treturn tex;\n\t}\n}", "import * as pc from 'playcanvas';\n\nexport class SpriteRegistry {\n\tprivate app: pc.Application;\n\tprivate textures = new Map<string, pc.Texture>();\n\n\tconstructor(app: pc.Application) {\n\t\tthis.app = app;\n\t}\n\n\tregister(id: string, tex: pc.Texture): void {\n\t\tthis.textures.set(id, tex);\n\t}\n\n\tget(id: string): pc.Texture | undefined {\n\t\treturn this.textures.get(id);\n\t}\n\n\tall(): string[] {\n\t\treturn Array.from(this.textures.keys());\n\t}\n}\n\n", "export class PreloadManager {\n\tprivate manifest: { assets: { path: string; type: string }[] } = { assets: [] };\n\n\tasync loadManifest(url: string = '/assets/manifest.json'): Promise<void> {\n\t\tconst res = await fetch(url);\n\t\tif (!res.ok) throw new Error(`Manifest load failed: ${res.status}`);\n\t\tthis.manifest = await res.json();\n\t}\n\n\tgetAssetsByType(type: string): string[] {\n\t\treturn this.manifest.assets.filter(a => a.type === type).map(a => a.path);\n\t}\n\n\tasync getJson<T = unknown>(path: string): Promise<T> {\n\t\tconst res = await fetch(path);\n\t\tif (!res.ok) throw new Error(`JSON load failed: ${path}`);\n\t\treturn res.json();\n\t}\n}\n\n"],
  "mappings": "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",
  "names": ["pc", "pc", "pc", "pc", "pc", "pc", "pc", "DebugOverlay", "pc"]
}
