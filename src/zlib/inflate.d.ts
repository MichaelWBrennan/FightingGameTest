// TypeScript definitions for the Emscripten-compiled inflate module.
// This file describes the interface exposed by the inflate.wasm module,
// which includes functions from infcodes.c, inftrees.c, and infutil.c.

// Import the common EmscriptenModule definition
import type { EmscriptenModule } from './wasm-loader';

// Declare the specific module type for inflate.
// This interface extends the base EmscriptenModule with the known exported functions.
// The actual properties are determined at runtime by Emscripten's glue code.
interface WasiInflateModule extends EmscriptenModule {
  // Exported functions from C code.
  // Emscripten typically prefixes exported C functions with an underscore.

  /**
   * Processes literals and length/distance pairs during inflate.
   * Corresponds to `inflate_codes`.
   * @param s - InflateBlocksState (simplified type).
   * @param z - ZStream state.
   * @param r - Initial return code.
   * @returns The final status code.
   */
  _inflate_codes(s: any, z: any, r: number): number;

  /**
   * Creates and initializes the inflate codes state.
   * Corresponds to `inflate_codes_new`.
   * @param bl Literal/length tree bits.
   * @param bd Distance tree bits.
   * @param tl Literal/length Huffman tree.
   * @param td Distance Huffman tree.
   * @param z The ZStream reference.
   * @returns A new InflateCodesState object or null.
   */
  _inflate_codes_new(bl: number, bd: number, tl: any[] | null, td: any[] | null, z: ZStream): any | null; // Using 'any' for tree types as they are complex.

  /**
   * Frees the memory allocated for the inflate codes state.
   * Corresponds to `inflate_codes_free`.
   * @param c The InflateCodesState to free.
   * @param z The ZStream reference.
   */
  _inflate_codes_free(c: any, z: ZStream): void;

  /**
   * Generates Huffman trees for efficient decoding (bits).
   * Corresponds to `inflate_trees_bits`.
   * @param c - Code lengths array.
   * @param bb - Bits tree depth.
   * @param tb - Bits tree result pointer.
   * @param hp - Space for trees.
   * @param z - ZStream reference.
   * @returns The status code.
   */
  _inflate_trees_bits(c: number[], bb: number[], tb: any[] | null, hp: any[], z: ZStream): number;

  /**
   * Generates Huffman trees for dynamic decoding.
   * Corresponds to `inflate_trees_dynamic`.
   * @param nl Number of literal/length codes.
   * @param nd Number of distance codes.
   * @param c Code lengths array.
   * @param bl Literal tree bits.
   * @param bd Distance tree bits.
   * @param tl Literal/length tree result pointer.
   * @param td Distance tree result pointer.
   * @param hp Space for trees.
   * @param z ZStream reference.
   * @returns The status code.
   */
  _inflate_trees_dynamic(
    nl: number,
    nd: number,
    c: number[],
    bl: number[],
    bd: number[],
    tl: any[] | null,
    td: any[] | null,
    hp: any[],
    z: ZStream
  ): number;

  /**
   * Generates fixed Huffman trees.
   * Corresponds to `inflate_trees_fixed`.
   * @param bl Literal tree bits.
   * @param bd Distance tree bits.
   * @param tl Literal/length tree result pointer.
   * @param td Distance tree result pointer.
   * @param z ZStream reference.
   * @returns The status code.
   */
  _inflate_trees_fixed(
    bl: number[],
    bd: number[],
    tl: any[] | null,
    td: any[] | null,
    z: ZStream
  ): number;

  /**
   * Copies data from the sliding window to the output area.
   * Corresponds to `inflate_flush`.
   * @param s InflateBlocksState.
   * @param z ZStream state.
   * @param r Current inflate return code.
   * @returns Updated inflate return code.
   */
  _inflate_flush(s: any, z: ZStream, r: number): number;
}

// Emscripten Module loader function type.
// This function is responsible for loading the Wasm module and its JS glue code.
// It usually returns a Promise resolving with the EmscriptenModule instance.
// Note: The actual function signature might vary slightly based on Emscripten version and flags.
declare function Module(moduleArgs?: any): EmscriptenModule;

// Export the module loader function as a default export or a named export.
// This depends on how the Emscripten glue code is structured and imported.
// For now, assume it's accessible globally or via a specific import pattern.

// Example of how to load the module:
// import Module from './inflate.wasm'; // This would need the JS glue code generated by emcc
// Module().then((instance) => {
//   const inflateCodesFn = instance._inflate_codes;
//   // ... use inflateCodesFn ...
// });

// For this definition file, we mainly declare the *shape* of the module when loaded.
// The loading mechanism itself is part of the Emscripten-generated JS.

export default Module; // If Module is the primary export. Or export { Module } if not default.

// Note: The precise types for `s` (InflateBlocksState) and `z` (ZStream) would need
// to be fully defined or imported for type safety when calling these Wasm functions.
// The `any` type is used here as a placeholder for complex internal structures.

// We also need to consider how `inflate_fast` would be incorporated if not already bundled
// within `inflate.wasm`. It might be a separate module or part of further compilation.
// For now, we focus on the exported functions from the compiled modules.